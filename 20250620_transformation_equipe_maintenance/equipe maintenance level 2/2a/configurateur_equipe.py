#!/usr/bin/env python3
"""
Configurateur pour l'√©quipe de maintenance des agents.
Permet de choisir quels agents utiliser et de lancer des missions cibl√©es.
"""

import os
import sys
import json
import asyncio
from pathlib import Path
from datetime import datetime

def check_agent_availability():
    """V√©rifie quels agents sont disponibles."""
    agents_dir = Path("agent_factory_implementation/agents")
    
    available_agents = {
        "base": {},
        "extended": {}
    }
    
    # Agents de base (obligatoires)
    base_agents = {
        "01_analyseur": "agent_MAINTENANCE_01_analyseur_structure.py",
        "02_evaluateur": "agent_MAINTENANCE_02_evaluateur_utilite.py", 
        "03_adaptateur": "agent_MAINTENANCE_03_adaptateur_code.py",
        "04_testeur": "agent_MAINTENANCE_04_testeur_anti_faux_agents.py",
        "05_documenteur": "agent_MAINTENANCE_05_documenteur_peer_reviewer.py",
        "06_validateur": "agent_MAINTENANCE_06_validateur_final.py"
    }
    
    # Agents √©tendus (optionnels)
    extended_agents = {
        "07_dependances": "agent_MAINTENANCE_07_gestionnaire_dependances.py",
        "08_performance": "agent_MAINTENANCE_08_optimiseur_performance.py"
    }
    
    # V√©rification des agents de base
    for agent_key, filename in base_agents.items():
        filepath = agents_dir / filename
        available_agents["base"][agent_key] = {
            "filename": filename,
            "available": filepath.exists(),
            "path": str(filepath)
        }
    
    # V√©rification des agents √©tendus
    for agent_key, filename in extended_agents.items():
        filepath = agents_dir / filename
        available_agents["extended"][agent_key] = {
            "filename": filename,
            "available": filepath.exists(),
            "path": str(filepath)
        }
    
    return available_agents

def display_agent_status(availability):
    """Affiche le statut des agents disponibles."""
    print("\n" + "="*60)
    print("üîç √âTAT DE L'√âQUIPE DE MAINTENANCE")
    print("="*60)
    
    print("\nüìã AGENTS DE BASE (obligatoires):")
    all_base_ok = True
    for agent_key, info in availability["base"].items():
        status = "‚úÖ" if info["available"] else "‚ùå"
        print(f"  {status} {agent_key.replace('_', ' ').title()}")
        if not info["available"]:
            all_base_ok = False
    
    print(f"\n‚ö° AGENTS √âTENDUS (optionnels):")
    extended_count = 0
    for agent_key, info in availability["extended"].items():
        status = "‚úÖ" if info["available"] else "‚ùå"
        print(f"  {status} {agent_key.replace('_', ' ').title()}")
        if info["available"]:
            extended_count += 1
    
    print(f"\nüìä R√âSUM√â:")
    base_available = sum(1 for info in availability["base"].values() if info["available"])
    print(f"  ‚Ä¢ Agents de base : {base_available}/{len(availability['base'])}")
    print(f"  ‚Ä¢ Agents √©tendus : {extended_count}/{len(availability['extended'])}")
    
    if all_base_ok:
        print(f"  ‚Ä¢ üéâ √âquipe de base compl√®te et op√©rationnelle!")
        if extended_count > 0:
            print(f"  ‚Ä¢ ‚ö° Mode √©tendu disponible avec {extended_count} agent(s) suppl√©mentaire(s)")
    else:
        print(f"  ‚Ä¢ ‚ö†Ô∏è  Agents manquants - √©quipe incompl√®te")
    
    return all_base_ok, extended_count

def choose_mission_mode():
    """Permet √† l'utilisateur de choisir le mode de mission."""
    print("\n" + "="*60)
    print("üéØ CHOIX DU MODE DE MISSION")
    print("="*60)
    
    print("\n1. üìã Mode STANDARD")
    print("   ‚Ä¢ Utilise uniquement les agents de base")
    print("   ‚Ä¢ Rapide et efficace pour la maintenance courante")
    print("   ‚Ä¢ Pipeline : Analyse ‚Üí √âvaluation ‚Üí Adaptation ‚Üí Test ‚Üí Documentation ‚Üí Validation")
    
    print("\n2. ‚ö° Mode √âTENDU")
    print("   ‚Ä¢ Utilise tous les agents disponibles")
    print("   ‚Ä¢ Analyse approfondie avec optimisations")
    print("   ‚Ä¢ Pipeline : Analyse ‚Üí √âvaluation ‚Üí D√©pendances ‚Üí Adaptation ‚Üí Performance ‚Üí Test ‚Üí Documentation ‚Üí Validation")
    
    print("\n3. üéõÔ∏è  Mode PERSONNALIS√â")
    print("   ‚Ä¢ Choisir manuellement les agents √† utiliser")
    print("   ‚Ä¢ Contr√¥le fin du processus de maintenance")
    
    while True:
        choice = input("\n‚û§ Votre choix (1/2/3) : ").strip()
        if choice in ["1", "2", "3"]:
            return choice
        print("‚ùå Choix invalide. Veuillez entrer 1, 2 ou 3.")

def choose_target_directory():
    """Permet de choisir le r√©pertoire cible."""
    print("\n" + "="*60)
    print("üìÅ CHOIX DU R√âPERTOIRE CIBLE")
    print("="*60)
    
    default_dir = "agent_factory_implementation/agents"
    print(f"\nR√©pertoire par d√©faut : {default_dir}")
    
    if os.path.exists(default_dir):
        py_files = [f for f in os.listdir(default_dir) if f.endswith('.py')]
        print(f"üìä Fichiers Python trouv√©s : {len(py_files)}")
        if py_files:
            print("üìã Exemples de fichiers :")
            for f in sorted(py_files)[:5]:
                print(f"  ‚Ä¢ {f}")
            if len(py_files) > 5:
                print(f"  ... et {len(py_files) - 5} autres")
    else:
        print("‚ö†Ô∏è  R√©pertoire par d√©faut non trouv√©")
    
    while True:
        user_input = input(f"\n‚û§ R√©pertoire cible (Entr√©e pour '{default_dir}') : ").strip()
        
        target_dir = user_input if user_input else default_dir
        
        if os.path.exists(target_dir):
            return target_dir
        else:
            print(f"‚ùå Le r√©pertoire '{target_dir}' n'existe pas.")
            print("üí° Cr√©er le r√©pertoire? (y/n)")
            create = input("‚û§ ").strip().lower()
            if create in ['y', 'yes', 'o', 'oui']:
                try:
                    os.makedirs(target_dir, exist_ok=True)
                    print(f"‚úÖ R√©pertoire cr√©√© : {target_dir}")
                    return target_dir
                except Exception as e:
                    print(f"‚ùå Erreur lors de la cr√©ation : {e}")

async def run_maintenance_mission(mode, target_directory, availability):
    """Lance la mission de maintenance."""
    print("\n" + "="*60)
    print("üöÄ LANCEMENT DE LA MISSION")
    print("="*60)
    
    try:
        # Configuration du chemin d'importation
        project_root = Path(__file__).resolve().parents[0]
        if str(project_root) not in sys.path:
            sys.path.insert(0, str(project_root))

        # Import du syst√®me de logging
        try:
            from core import logging_manager
            print("‚úÖ Syst√®me de logging initialis√©")
        except ImportError as e:
            print(f"‚ö†Ô∏è  Logging non disponible : {e}")
            import logging
            logging.basicConfig(level=logging.INFO)

        # Import de l'architecture
        from agent_factory_implementation.core.agent_factory_architecture import Task, Result
        
        # Choix du chef d'√©quipe selon le mode
        if mode == "1":  # Standard
            from agent_factory_implementation.agents.agent_MAINTENANCE_00_chef_equipe_coordinateur import create_agent_MAINTENANCE_00_chef_equipe_coordinateur as create_chef
            print("üìã Mode standard s√©lectionn√©")
            chef_equipe = create_chef(target_path=target_directory, workspace_path=".")
            task_type = "maintenance_complete"
            
        elif mode == "2":  # √âtendu
            try:
                from agent_factory_implementation.agents.agent_MAINTENANCE_00_chef_equipe_coordinateur_extended import create_agent_MAINTENANCE_00_chef_equipe_coordinateur_extended as create_chef_extended
                print("‚ö° Mode √©tendu s√©lectionn√©")
                chef_equipe = create_chef_extended(target_path=target_directory, workspace_path=".", extended_mode=True)
                task_type = "maintenance_extended"
            except ImportError:
                print("‚ö†Ô∏è  Chef d'√©quipe √©tendu non disponible, basculement en mode standard")
                from agent_factory_implementation.agents.agent_MAINTENANCE_00_chef_equipe_coordinateur import create_agent_MAINTENANCE_00_chef_equipe_coordinateur as create_chef
                chef_equipe = create_chef(target_path=target_directory, workspace_path=".")
                task_type = "maintenance_complete"
        
        # Cr√©ation et ex√©cution de la t√¢che
        mission_task = Task(
            type=task_type,
            params={
                "description": f"Mission de maintenance en mode {['', 'standard', '√©tendu', 'personnalis√©'][int(mode)]}",
                "target_directory": target_directory,
                "report_filename": f"rapport_maintenance_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            }
        )
        
        print(f"üîÑ Ex√©cution en cours...")
        print(f"üìÅ R√©pertoire : {target_directory}")
        
        # Ex√©cution de la mission
        result = await chef_equipe.execute_task(mission_task)
        
        # Traitement du r√©sultat
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        if result.success:
            report_path = f"rapport_maintenance_SUCCESS_{timestamp}.json"
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(result.data, f, indent=4, ensure_ascii=False)
            
            print(f"\nüéâ MISSION R√âUSSIE!")
            print(f"üìÑ Rapport d√©taill√© : {report_path}")
            
            # Affichage du r√©sum√©
            if "summary" in result.data:
                summary = result.data["summary"]
                print(f"\nüìä R√âSUM√â DE LA MISSION:")
                print(f"  ‚Ä¢ Fichiers trait√©s : {summary.get('total_files_processed', 0)}")
                print(f"  ‚Ä¢ Succ√®s : {summary.get('successful_files', 0)}")
                print(f"  ‚Ä¢ √âchecs : {summary.get('failed_files', 0)}")
                print(f"  ‚Ä¢ Taux de r√©ussite : {summary.get('success_rate', 0):.1f}%")
                
                if "performance_metrics" in summary:
                    perf = summary["performance_metrics"]
                    print(f"  ‚Ä¢ Score performance moyen : {perf.get('average_score', 0):.1f}/100")
        
        else:
            report_path = f"rapport_maintenance_ECHEC_{timestamp}.json"
            error_data = {
                "error": result.error,
                "timestamp": timestamp,
                "mode": mode,
                "target_directory": target_directory
            }
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(error_data, f, indent=4, ensure_ascii=False)
            
            print(f"\n‚ùå MISSION √âCHOU√âE")
            print(f"üìÑ Rapport d'erreur : {report_path}")
            print(f"üîç Erreur : {result.error}")

    except Exception as e:
        print(f"\nüí• ERREUR CRITIQUE : {e}")
        import traceback
        traceback.print_exc()

def main():
    """Point d'entr√©e principal du configurateur."""
    print("üîß CONFIGURATEUR D'√âQUIPE DE MAINTENANCE")
    print("=" * 60)
    
    # V√©rification de la disponibilit√© des agents
    availability = check_agent_availability()
    all_base_ok, extended_count = display_agent_status(availability)
    
    if not all_base_ok:
        print("\n‚ùå Impossible de continuer : agents de base manquants.")
        print("üí° Assurez-vous que tous les fichiers d'agents sont pr√©sents.")
        return 1
    
    # Choix du mode
    mode = choose_mission_mode()
    
    # Choix du r√©pertoire
    target_directory = choose_target_directory()
    
    print(f"\nüéØ CONFIGURATION CHOISIE:")
    print(f"  ‚Ä¢ Mode : {['', 'Standard', '√âtendu', 'Personnalis√©'][int(mode)]}")
    print(f"  ‚Ä¢ R√©pertoire : {target_directory}")
    
    # Confirmation
    confirm = input("\n‚û§ Lancer la mission? (y/n) : ").strip().lower()
    if confirm not in ['y', 'yes', 'o', 'oui']:
        print("‚ùå Mission annul√©e.")
        return 0
    
    # Lancement de la mission
    try:
        asyncio.run(run_maintenance_mission(mode, target_directory, availability))
        return 0
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Mission interrompue par l'utilisateur.")
        return 1
    except Exception as e:
        print(f"\nüí• Erreur lors du lancement : {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
#!/usr/bin/env python3
"""
üîç DIAGNOSTIC AGENTS - AGENT FACTORY IMPLEMENTATION
Analyse compl√®te des agents pr√©sents dans C:\\Dev\\nextgeneration\\agent_factory_implementation
MODE DIAGNOSTIC UNIQUEMENT - AUCUNE MODIFICATION AUTORIS√âE

Utilise l'√©quipe de maintenance adapt√©e pour analyser la compatibilit√© TemplateManager
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
import json
import traceback
import importlib.util

# Ajouter le r√©pertoire des agents de maintenance au path
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Import des agents de maintenance adapt√©s
try:
    from agent_1_analyseur_structure import Agent1AnalyseurStructure
    from agent_2_evaluateur_utilite import Agent2EvaluateurUtilite
    from agent_3_adaptateur_code import Agent3AdaptateurCode
    from agent_4_testeur_integration import Agent4TesteurIntegration
    from agent_5_documenteur import Agent5Documenteur
    from agent_6_validateur_final import Agent6ValidateurFinal
    from agent_0_chef_equipe_coordinateur import Agent0ChefEquipeCoordinateur
    from chef_equipe_pattern_factory import ChefEquipePatternFactory
    from coordinateur_equipe_tools import CoordinateurEquipeTools
    print("‚úÖ √âquipe de maintenance charg√©e avec succ√®s")
except Exception as e:
    print(f"‚ùå Erreur chargement √©quipe maintenance: {e}")
    sys.exit(1)

class DiagnosticAgentFactory:
    """Diagnostic complet des agents dans agent_factory_implementation"""
    
    def __init__(self):
        self.target_dir = Path("../agent_factory_implementation")
        self.rapport_diagnostic = {
            "timestamp": datetime.now().isoformat(),
            "target_directory": str(self.target_dir.absolute()),
            "agents_detectes": [],
            "analyse_structure": {},
            "evaluation_utilite": {},
            "compatibilite_templatemanager": {},
            "recommandations": [],
            "statistiques": {}
        }
        
        # Initialisation √©quipe maintenance
        self.analyseur = Agent1AnalyseurStructure()
        self.evaluateur = Agent2EvaluateurUtilite()
        self.coordinateur = Agent0ChefEquipeCoordinateur()
        
    async def executer_diagnostic_complet(self):
        """Ex√©cute le diagnostic complet des agents"""
        print("üîç D√âBUT DIAGNOSTIC AGENT FACTORY IMPLEMENTATION")
        print("=" * 60)
        
        try:
            # 1. D√©couverte des agents
            await self._decouvrir_agents()
            
            # 2. Analyse structure de chaque agent
            await self._analyser_structure_agents()
            
            # 3. √âvaluation utilit√© et compatibilit√©
            await self._evaluer_agents()
            
            # 4. Test compatibilit√© TemplateManager
            await self._tester_compatibilite_templatemanager()
            
            # 5. G√©n√©ration recommandations
            await self._generer_recommandations()
            
            # 6. Sauvegarde rapport
            await self._sauvegarder_rapport()
            
            # 7. Affichage r√©sum√©
            self._afficher_resume()
            
        except Exception as e:
            print(f"‚ùå Erreur durant diagnostic: {e}")
            traceback.print_exc()
    
    async def _decouvrir_agents(self):
        """D√©couvre tous les agents dans le r√©pertoire cible"""
        print("üìÇ D√©couverte des agents...")
        
        agents_trouves = []
        
        # Parcours r√©cursif du r√©pertoire
        for py_file in self.target_dir.rglob("*.py"):
            if py_file.name.startswith("agent_") or "agent" in py_file.name.lower():
                try:
                    # Analyse basique du fichier
                    with open(py_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # D√©tection des classes d'agents
                    classes_detectees = []
                    for line in content.split('\n'):
                        if 'class ' in line and ('Agent' in line or 'agent' in line.lower()):
                            class_name = line.split('class ')[1].split('(')[0].split(':')[0].strip()
                            classes_detectees.append(class_name)
                    
                    if classes_detectees:
                        agent_info = {
                            "fichier": str(py_file.relative_to(self.target_dir.parent)),
                            "nom_fichier": py_file.name,
                            "taille": py_file.stat().st_size,
                            "lignes": len(content.split('\n')),
                            "classes_detectees": classes_detectees,
                            "derniere_modification": datetime.fromtimestamp(py_file.stat().st_mtime).isoformat(),
                            "analyse_preliminaire": {
                                "contient_async": "async " in content,
                                "contient_templatemanager": "TemplateManager" in content or "template_manager" in content,
                                "contient_factory": "Factory" in content or "factory" in content.lower(),
                                "contient_pattern": "Pattern" in content or "pattern" in content.lower(),
                                "imports_detectes": len([l for l in content.split('\n') if l.strip().startswith('import ') or l.strip().startswith('from ')])
                            }
                        }
                        agents_trouves.append(agent_info)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur analyse {py_file}: {e}")
        
        self.rapport_diagnostic["agents_detectes"] = agents_trouves
        print(f"‚úÖ {len(agents_trouves)} agents d√©tect√©s")
        
        for agent in agents_trouves:
            print(f"  üìÅ {agent['nom_fichier']} - {len(agent['classes_detectees'])} classes")
    
    async def _analyser_structure_agents(self):
        """Analyse la structure de chaque agent d√©tect√©"""
        print("\nüîç Analyse structure des agents...")
        
        analyses = {}
        
        for agent_info in self.rapport_diagnostic["agents_detectes"]:
            try:
                print(f"  üìä Analyse {agent_info['nom_fichier']}...")
                
                # Utilisation de l'Agent 1 pour analyser la structure
                fichier_path = Path(agent_info["fichier"])
                
                if fichier_path.exists():
                    analyse = await self.analyseur.analyser_structure_agent(str(fichier_path))
                    analyses[agent_info['nom_fichier']] = {
                        "analyse_reussie": True,
                        "resultats": analyse,
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    analyses[agent_info['nom_fichier']] = {
                        "analyse_reussie": False,
                        "erreur": "Fichier non trouv√©",
                        "timestamp": datetime.now().isoformat()
                    }
                    
            except Exception as e:
                analyses[agent_info['nom_fichier']] = {
                    "analyse_reussie": False,
                    "erreur": str(e),
                    "timestamp": datetime.now().isoformat()
                }
        
        self.rapport_diagnostic["analyse_structure"] = analyses
        print(f"‚úÖ Analyse structure compl√©t√©e pour {len(analyses)} agents")
    
    async def _evaluer_agents(self):
        """√âvalue l'utilit√© et la qualit√© des agents"""
        print("\nüìà √âvaluation utilit√© des agents...")
        
        evaluations = {}
        
        for agent_info in self.rapport_diagnostic["agents_detectes"]:
            try:
                print(f"  üéØ √âvaluation {agent_info['nom_fichier']}...")
                
                # Utilisation de l'Agent 2 pour √©valuer l'utilit√©
                structure_analyse = self.rapport_diagnostic["analyse_structure"].get(
                    agent_info['nom_fichier'], {}
                ).get("resultats", {})
                
                if structure_analyse:
                    evaluation = await self.evaluateur.evaluer_utilite_agent(
                        agent_info, structure_analyse
                    )
                    evaluations[agent_info['nom_fichier']] = {
                        "evaluation_reussie": True,
                        "resultats": evaluation,
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    evaluations[agent_info['nom_fichier']] = {
                        "evaluation_reussie": False,
                        "erreur": "Pas d'analyse structure disponible",
                        "timestamp": datetime.now().isoformat()
                    }
                    
            except Exception as e:
                evaluations[agent_info['nom_fichier']] = {
                    "evaluation_reussie": False,
                    "erreur": str(e),
                    "timestamp": datetime.now().isoformat()
                }
        
        self.rapport_diagnostic["evaluation_utilite"] = evaluations
        print(f"‚úÖ √âvaluation compl√©t√©e pour {len(evaluations)} agents")
    
    async def _tester_compatibilite_templatemanager(self):
        """Teste la compatibilit√© avec TemplateManager"""
        print("\nüîß Test compatibilit√© TemplateManager...")
        
        compatibilites = {}
        
        for agent_info in self.rapport_diagnostic["agents_detectes"]:
            try:
                print(f"  üß™ Test compatibilit√© {agent_info['nom_fichier']}...")
                
                fichier_path = Path(agent_info["fichier"])
                
                # Test de compatibilit√© basique
                compatibilite = {
                    "fichier_accessible": fichier_path.exists(),
                    "contient_interfaces_templatemanager": False,
                    "contient_factory_function": False,
                    "signature_compatible": False,
                    "methodes_requises": {
                        "startup": False,
                        "shutdown": False,
                        "health_check": False,
                        "execute_task": False
                    },
                    "score_compatibilite": 0
                }
                
                if fichier_path.exists():
                    with open(fichier_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # V√©rifications compatibilit√©
                    if "async def startup" in content:
                        compatibilite["methodes_requises"]["startup"] = True
                        compatibilite["score_compatibilite"] += 25
                    
                    if "async def shutdown" in content:
                        compatibilite["methodes_requises"]["shutdown"] = True
                        compatibilite["score_compatibilite"] += 25
                    
                    if "async def health_check" in content:
                        compatibilite["methodes_requises"]["health_check"] = True
                        compatibilite["score_compatibilite"] += 25
                    
                    if "async def execute_task" in content:
                        compatibilite["methodes_requises"]["execute_task"] = True
                        compatibilite["score_compatibilite"] += 25
                    
                    if "def create_" in content:
                        compatibilite["contient_factory_function"] = True
                    
                    if "agent_id" in content and "agent_type" in content:
                        compatibilite["signature_compatible"] = True
                    
                    if "TemplateManager" in content:
                        compatibilite["contient_interfaces_templatemanager"] = True
                
                compatibilites[agent_info['nom_fichier']] = {
                    "test_reussi": True,
                    "compatibilite": compatibilite,
                    "timestamp": datetime.now().isoformat()
                }
                
            except Exception as e:
                compatibilites[agent_info['nom_fichier']] = {
                    "test_reussi": False,
                    "erreur": str(e),
                    "timestamp": datetime.now().isoformat()
                }
        
        self.rapport_diagnostic["compatibilite_templatemanager"] = compatibilites
        print(f"‚úÖ Test compatibilit√© compl√©t√© pour {len(compatibilites)} agents")
    
    async def _generer_recommandations(self):
        """G√©n√®re des recommandations bas√©es sur l'analyse"""
        print("\nüí° G√©n√©ration recommandations...")
        
        recommandations = []
        stats = {
            "total_agents": len(self.rapport_diagnostic["agents_detectes"]),
            "agents_compatibles": 0,
            "agents_partiellement_compatibles": 0,
            "agents_incompatibles": 0,
            "score_moyen_compatibilite": 0
        }
        
        scores_compatibilite = []
        
        for agent_name, compat_info in self.rapport_diagnostic["compatibilite_templatemanager"].items():
            if compat_info.get("test_reussi", False):
                score = compat_info["compatibilite"]["score_compatibilite"]
                scores_compatibilite.append(score)
                
                if score >= 75:
                    stats["agents_compatibles"] += 1
                elif score >= 25:
                    stats["agents_partiellement_compatibles"] += 1
                else:
                    stats["agents_incompatibles"] += 1
                
                # Recommandations sp√©cifiques
                if score < 100:
                    manquantes = []
                    for methode, presente in compat_info["compatibilite"]["methodes_requises"].items():
                        if not presente:
                            manquantes.append(methode)
                    
                    if manquantes:
                        recommandations.append({
                            "agent": agent_name,
                            "type": "methodes_manquantes",
                            "priorite": "HAUTE" if score < 25 else "MOYENNE",
                            "description": f"M√©thodes TemplateManager manquantes: {', '.join(manquantes)}",
                            "action_recommandee": f"Impl√©menter les m√©thodes async: {', '.join(manquantes)}"
                        })
        
        if scores_compatibilite:
            stats["score_moyen_compatibilite"] = sum(scores_compatibilite) / len(scores_compatibilite)
        
        # Recommandations g√©n√©rales
        if stats["agents_incompatibles"] > 0:
            recommandations.append({
                "type": "adaptation_generale",
                "priorite": "CRITIQUE",
                "description": f"{stats['agents_incompatibles']} agents n√©cessitent une adaptation compl√®te",
                "action_recommandee": "Utiliser l'√©quipe de maintenance pour adapter ces agents au TemplateManager"
            })
        
        if stats["agents_partiellement_compatibles"] > 0:
            recommandations.append({
                "type": "amelioration_partielle",
                "priorite": "HAUTE",
                "description": f"{stats['agents_partiellement_compatibles']} agents n√©cessitent des am√©liorations",
                "action_recommandee": "Compl√©ter les interfaces TemplateManager manquantes"
            })
        
        self.rapport_diagnostic["recommandations"] = recommandations
        self.rapport_diagnostic["statistiques"] = stats
        print(f"‚úÖ {len(recommandations)} recommandations g√©n√©r√©es")
    
    async def _sauvegarder_rapport(self):
        """Sauvegarde le rapport de diagnostic"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        rapport_file = f"diagnostic_agent_factory_implementation_{timestamp}.json"
        
        try:
            with open(rapport_file, 'w', encoding='utf-8') as f:
                json.dump(self.rapport_diagnostic, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Rapport sauvegard√©: {rapport_file}")
            
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde rapport: {e}")
    
    def _afficher_resume(self):
        """Affiche le r√©sum√© du diagnostic"""
        print("\n" + "=" * 60)
        print("üìä R√âSUM√â DIAGNOSTIC AGENT FACTORY IMPLEMENTATION")
        print("=" * 60)
        
        stats = self.rapport_diagnostic["statistiques"]
        
        print(f"üìÅ R√©pertoire analys√©: {self.rapport_diagnostic['target_directory']}")
        print(f"üïí Timestamp: {self.rapport_diagnostic['timestamp']}")
        print()
        
        print("üìà STATISTIQUES AGENTS:")
        print(f"  ‚Ä¢ Total agents d√©tect√©s: {stats['total_agents']}")
        print(f"  ‚Ä¢ Agents compatibles (‚â•75%): {stats['agents_compatibles']}")
        print(f"  ‚Ä¢ Agents partiellement compatibles (25-74%): {stats['agents_partiellement_compatibles']}")
        print(f"  ‚Ä¢ Agents incompatibles (<25%): {stats['agents_incompatibles']}")
        print(f"  ‚Ä¢ Score moyen compatibilit√©: {stats['score_moyen_compatibilite']:.1f}%")
        print()
        
        print("üéØ AGENTS D√âTECT√âS:")
        for agent in self.rapport_diagnostic["agents_detectes"]:
            compat_info = self.rapport_diagnostic["compatibilite_templatemanager"].get(agent['nom_fichier'], {})
            if compat_info.get("test_reussi", False):
                score = compat_info["compatibilite"]["score_compatibilite"]
                status = "‚úÖ" if score >= 75 else "‚ö†Ô∏è" if score >= 25 else "‚ùå"
                print(f"  {status} {agent['nom_fichier']} - {score}% compatible")
                print(f"     Classes: {', '.join(agent['classes_detectees'])}")
                print(f"     Taille: {agent['taille']} bytes, {agent['lignes']} lignes")
            else:
                print(f"  ‚ùì {agent['nom_fichier']} - Erreur test compatibilit√©")
        print()
        
        print("üí° RECOMMANDATIONS PRINCIPALES:")
        for i, rec in enumerate(self.rapport_diagnostic["recommandations"][:5], 1):
            priorite_icon = "üî¥" if rec["priorite"] == "CRITIQUE" else "üü°" if rec["priorite"] == "HAUTE" else "üü¢"
            print(f"  {i}. {priorite_icon} {rec['description']}")
            print(f"     Action: {rec['action_recommandee']}")
        
        if len(self.rapport_diagnostic["recommandations"]) > 5:
            print(f"     ... et {len(self.rapport_diagnostic['recommandations']) - 5} autres recommandations")
        
        print("\n" + "=" * 60)
        print("üéØ DIAGNOSTIC TERMIN√â - MODE LECTURE SEULE RESPECT√â")
        print("=" * 60)

async def main():
    """Point d'entr√©e principal"""
    diagnostic = DiagnosticAgentFactory()
    await diagnostic.executer_diagnostic_complet()

if __name__ == "__main__":
    asyncio.run(main()) 
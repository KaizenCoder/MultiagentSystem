#!/usr/bin/env python3
"""
üö® MISSION CORRECTIVE CRITIQUE - ANALYSE CONFORMIT√â PATTERN FACTORY
================================================================
L'√©quipe NextGeneration a manqu√© l'essentiel : v√©rifier la conformit√© Pattern Factory !
Mission corrective : Analyser la vraie conformit√© architecturale des 34 agents de production
"""

import asyncio
import os
import json
from datetime import datetime
from pathlib import Path
from agent_factory_implementation.agents.agent_MAINTENANCE_00_chef_equipe_coordinateur import create_agent_0_chef_equipe_coordinateur

async def analyse_pattern_factory_critique():
    """Analyse critique de la conformit√© Pattern Factory des agents"""
    
    print("üö® MISSION CORRECTIVE CRITIQUE - CONFORMIT√â PATTERN FACTORY")
    print("=" * 80)
    print("‚ùå D√âFAILLANCE IDENTIFI√âE: L'√©quipe NextGeneration a manqu√© l'essentiel!")
    print("üéØ MISSION: Analyser la VRAIE conformit√© Pattern Factory")
    print("üìÅ Cible: 34 agents de production")
    print("üîç Focus: Architecture, h√©ritage, standards")
    print()
    
    # Pr√©paration dossier rapports correctifs
    reviews_dir = Path("C:/Dev/nextgeneration/agent_factory_implementation/agents/reviews")
    if not reviews_dir.exists():
        reviews_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        print("üéñÔ∏è INITIALISATION CHEF D'√âQUIPE - MISSION CORRECTIVE")
        print("-" * 60)
        
        # Cr√©ation Chef d'√âquipe
        chef_equipe = create_agent_0_chef_equipe_coordinateur(
            target_path="C:/Dev/nextgeneration/agent_factory_implementation/agents",
            workspace_path=".",
            safe_mode=True
        )
        print("‚úÖ Chef d'√âquipe cr√©√© - Mission corrective Pattern Factory")
        
        await chef_equipe.startup()
        print("‚úÖ Chef d'√âquipe d√©marr√©")
        
        health = await chef_equipe.health_check()
        status = health.get("status", "unknown")
        print(f"üè• Health: {status}")
        
        print()
        print("üîç ANALYSE CRITIQUE CONFORMIT√â PATTERN FACTORY")
        print("-" * 60)
        
        # R√©cup√©ration agents √† analyser
        agents_dir = Path("C:/Dev/nextgeneration/agent_factory_implementation/agents")
        agents_python = list(agents_dir.glob("**/*.py"))
        agents_python = [f for f in agents_python if not f.name.startswith("__")]
        
        print(f"üìä {len(agents_python)} agents √† analyser pour conformit√© Pattern Factory")
        
        # G√©n√©ration rapport critique
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        rapport_critique = {
            "mission_id": f"analyse_pattern_factory_critique_{timestamp}",
            "timestamp": datetime.now().isoformat(),
            "chef_equipe_id": getattr(chef_equipe, 'agent_id', 'chef_equipe_unknown'),
            "type_analyse": "CONFORMIT√â PATTERN FACTORY",
            "agents_analyses": [],
            "statistiques_critiques": {
                "total_agents": len(agents_python),
                "agents_conformes": 0,
                "agents_non_conformes": 0,
                "agents_partiellement_conformes": 0,
                "taux_conformite": 0.0
            },
            "problemes_identifies": [],
            "recommandations_critiques": []
        }
        
        print("üîç Analyse conformit√© en cours...")
        
        conformes = 0
        non_conformes = 0
        partiellement_conformes = 0
        
        # Analyse d√©taill√©e de chaque agent
        for i, agent_file in enumerate(agents_python, 1):
            try:
                print(f"   üìÑ {i}/{len(agents_python)}: {agent_file.name}")
                
                # Lecture du fichier
                with open(agent_file, 'r', encoding='utf-8') as f:
                    contenu = f.read()
                
                # Analyse conformit√© Pattern Factory
                analyse_conformite = {
                    "nom_fichier": agent_file.name,
                    "chemin_relatif": str(agent_file.relative_to(agents_dir)),
                    "taille": len(contenu),
                    "lignes": len(contenu.splitlines()),
                    "analyse_timestamp": datetime.now().isoformat(),
                    
                    # ANALYSE PATTERN FACTORY CRITIQUE
                    "imports_pattern_factory": False,
                    "heritage_agent_class": False,
                    "utilise_task_result": False,
                    "fonction_creation_standard": False,
                    "async_methods": False,
                    "pattern_factory_score": 0,
                    "conformite_status": "NON_CONFORME",
                    "problemes_identifies": [],
                    "recommandations": []
                }
                
                lignes = contenu.splitlines()
                
                # 1. V√©rifier imports Pattern Factory
                imports_pf = any(
                    "from agent_factory_implementation.core.agent_factory_architecture import" in line or
                    "from core.agent_factory_architecture import" in line
                    for line in lignes
                )
                analyse_conformite["imports_pattern_factory"] = imports_pf
                if imports_pf:
                    analyse_conformite["pattern_factory_score"] += 20
                else:
                    analyse_conformite["problemes_identifies"].append("CRITIQUE: Aucun import Pattern Factory d√©tect√©")
                
                # 2. V√©rifier h√©ritage classe Agent
                heritage_agent = any(
                    "class " in line and "(Agent)" in line
                    for line in lignes
                )
                analyse_conformite["heritage_agent_class"] = heritage_agent
                if heritage_agent:
                    analyse_conformite["pattern_factory_score"] += 30
                else:
                    analyse_conformite["problemes_identifies"].append("CRITIQUE: Classe n'h√©rite pas de Agent Pattern Factory")
                
                # 3. V√©rifier utilisation Task/Result
                utilise_task_result = any(
                    "Task(" in line or "Result(" in line or "task_id" in line
                    for line in lignes
                )
                analyse_conformite["utilise_task_result"] = utilise_task_result
                if utilise_task_result:
                    analyse_conformite["pattern_factory_score"] += 20
                else:
                    analyse_conformite["problemes_identifies"].append("Aucune utilisation Task/Result d√©tect√©e")
                
                # 4. V√©rifier fonction de cr√©ation standard
                fonction_creation = any(
                    "def create_agent_" in line or "def create_" in line
                    for line in lignes
                )
                analyse_conformite["fonction_creation_standard"] = fonction_creation
                if fonction_creation:
                    analyse_conformite["pattern_factory_score"] += 15
                else:
                    analyse_conformite["problemes_identifies"].append("Aucune fonction de cr√©ation standard")
                
                # 5. V√©rifier m√©thodes async
                async_methods = any(
                    "async def" in line
                    for line in lignes
                )
                analyse_conformite["async_methods"] = async_methods
                if async_methods:
                    analyse_conformite["pattern_factory_score"] += 15
                
                # D√©terminer statut conformit√©
                score = analyse_conformite["pattern_factory_score"]
                if score >= 80:
                    analyse_conformite["conformite_status"] = "CONFORME"
                    conformes += 1
                elif score >= 50:
                    analyse_conformite["conformite_status"] = "PARTIELLEMENT_CONFORME"
                    partiellement_conformes += 1
                    analyse_conformite["problemes_identifies"].append("Conformit√© partielle - N√©cessite ajustements")
                else:
                    analyse_conformite["conformite_status"] = "NON_CONFORME"
                    non_conformes += 1
                    analyse_conformite["problemes_identifies"].append("CRITIQUE: Non-conformit√© Pattern Factory majeure")
                
                # Recommandations sp√©cifiques
                if not imports_pf:
                    analyse_conformite["recommandations"].append("Ajouter: from core.agent_factory_architecture import Agent, Task, Result")
                if not heritage_agent:
                    analyse_conformite["recommandations"].append("Modifier class XxxAgent(Agent): pour h√©riter de Pattern Factory")
                if not utilise_task_result:
                    analyse_conformite["recommandations"].append("Utiliser Task/Result pour structurer les op√©rations")
                if not fonction_creation:
                    analyse_conformite["recommandations"].append("Ajouter fonction create_agent_xxx() standardis√©e")
                
                rapport_critique["agents_analyses"].append(analyse_conformite)
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur analyse {agent_file.name}: {e}")
                rapport_critique["agents_analyses"].append({
                    "nom_fichier": agent_file.name,
                    "erreur": str(e),
                    "conformite_status": "ERREUR_ANALYSE"
                })
        
        # Calcul statistiques finales
        total = len(agents_python)
        rapport_critique["statistiques_critiques"].update({
            "agents_conformes": conformes,
            "agents_non_conformes": non_conformes,
            "agents_partiellement_conformes": partiellement_conformes,
            "taux_conformite": (conformes / max(1, total)) * 100
        })
        
        # Probl√®mes globaux identifi√©s
        taux_conformite = rapport_critique["statistiques_critiques"]["taux_conformite"]
        if taux_conformite < 50:
            rapport_critique["problemes_identifies"].append("CRITIQUE: Moins de 50% des agents sont conformes Pattern Factory")
        if non_conformes > conformes:
            rapport_critique["problemes_identifies"].append("ALARMANT: Plus d'agents non-conformes que conformes")
        
        # Recommandations critiques
        rapport_critique["recommandations_critiques"] = [
            "URGENT: Refactorisation massive n√©cessaire pour conformit√© Pattern Factory",
            "Standardiser tous les agents avec h√©ritage de la classe Agent",
            "Impl√©menter les fonctions de cr√©ation standardis√©es",
            "Formation √©quipe sur l'architecture Pattern Factory",
            "Audit complet et plan de migration"
        ]
        
        print()
        print("üìä R√âSULTATS ANALYSE CRITIQUE")
        print("-" * 60)
        print(f"‚úÖ Agents conformes: {conformes}/{total} ({(conformes/max(1,total))*100:.1f}%)")
        print(f"‚ö†Ô∏è Partiellement conformes: {partiellement_conformes}/{total}")
        print(f"‚ùå Non-conformes: {non_conformes}/{total} ({(non_conformes/max(1,total))*100:.1f}%)")
        print(f"üéØ Taux conformit√© global: {taux_conformite:.1f}%")
        
        # G√©n√©ration rapports correctifs
        print()
        print("üìã G√âN√âRATION RAPPORTS CORRECTIFS")
        print("-" * 60)
        
        # Rapport JSON critique
        rapport_json_path = reviews_dir / f"CRITIQUE_conformite_pattern_factory_{timestamp}.json"
        with open(rapport_json_path, 'w', encoding='utf-8') as f:
            json.dump(rapport_critique, f, indent=2, ensure_ascii=False)
        print(f"üìÑ Rapport critique JSON: {rapport_json_path.name} ({rapport_json_path.stat().st_size} bytes)")
        
        # Rapport Markdown critique
        rapport_md_path = reviews_dir / f"CRITIQUE_conformite_pattern_factory_{timestamp}.md"
        with open(rapport_md_path, 'w', encoding='utf-8') as f:
            f.write("# üö® RAPPORT CRITIQUE - CONFORMIT√â PATTERN FACTORY\n\n")
            f.write(f"**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"**Mission ID:** {rapport_critique['mission_id']}\n")
            f.write(f"**Type:** ANALYSE CONFORMIT√â ARCHITECTURALE CRITIQUE\n")
            f.write(f"**Chef d'√âquipe:** {rapport_critique['chef_equipe_id']}\n\n")
            
            f.write("## ‚ùå D√âFAILLANCE √âQUIPE NEXTGENERATION\n\n")
            f.write("L'√©quipe NextGeneration a **MANQU√â L'ESSENTIEL** dans leur premi√®re analyse !\n")
            f.write("Ils ont fait des m√©triques superficielles mais ont ignor√© la conformit√© architecturale.\n\n")
            
            f.write("## üìä R√âSULTATS CRITIQUE CONFORMIT√â PATTERN FACTORY\n\n")
            stats = rapport_critique['statistiques_critiques']
            f.write(f"- **Total agents analys√©s:** {stats['total_agents']}\n")
            f.write(f"- **‚úÖ Agents conformes:** {stats['agents_conformes']} ({(stats['agents_conformes']/max(1,stats['total_agents']))*100:.1f}%)\n")
            f.write(f"- **‚ö†Ô∏è Partiellement conformes:** {stats['agents_partiellement_conformes']}\n")
            f.write(f"- **‚ùå Non-conformes:** {stats['agents_non_conformes']} ({(stats['agents_non_conformes']/max(1,stats['total_agents']))*100:.1f}%)\n")
            f.write(f"- **üéØ Taux conformit√©:** {stats['taux_conformite']:.1f}%\n\n")
            
            if stats['taux_conformite'] < 50:
                f.write("## üö® ALERTE CRITIQUE\n\n")
                f.write("**MOINS DE 50% DES AGENTS SONT CONFORMES PATTERN FACTORY !**\n\n")
                f.write("Ceci constitue une dette technique majeure n√©cessitant une action imm√©diate.\n\n")
            
            f.write("## üìã AGENTS NON-CONFORMES IDENTIFI√âS\n\n")
            for agent in rapport_critique['agents_analyses']:
                if agent.get('conformite_status') == 'NON_CONFORME':
                    f.write(f"### ‚ùå {agent['nom_fichier']}\n\n")
                    f.write(f"- **Score conformit√©:** {agent.get('pattern_factory_score', 0)}/100\n")
                    f.write(f"- **Probl√®mes:**\n")
                    for probleme in agent.get('problemes_identifies', []):
                        f.write(f"  - {probleme}\n")
                    f.write(f"- **Recommandations:**\n")
                    for rec in agent.get('recommandations', []):
                        f.write(f"  - {rec}\n")
                    f.write("\n")
            
            f.write("## üí° RECOMMANDATIONS CRITIQUES\n\n")
            for rec in rapport_critique['recommandations_critiques']:
                f.write(f"- {rec}\n")
            f.write("\n")
            
            f.write("## üèÜ CONCLUSION\n\n")
            f.write("üö® **MISSION CORRECTIVE VALID√âE**\n\n")
            f.write("Cette analyse r√©v√®le les vrais probl√®mes architecturaux que l'√©quipe ")
            f.write("NextGeneration aurait d√ª identifier en premi√®re instance. ")
            f.write("Une refactorisation massive est n√©cessaire pour la conformit√© Pattern Factory.\n")
        
        print(f"üìÑ Rapport critique MD: {rapport_md_path.name} ({rapport_md_path.stat().st_size} bytes)")
        
        await chef_equipe.shutdown()
        print("‚úÖ Chef d'√âquipe - Arr√™t propre")
        
        return {
            "status": "success",
            "mission_id": rapport_critique['mission_id'],
            "agents_analyses": total,
            "taux_conformite": taux_conformite,
            "agents_non_conformes": non_conformes,
            "rapports_generes": 2
        }
        
    except Exception as e:
        print(f"‚ùå Erreur mission critique: {e}")
        import traceback
        traceback.print_exc()
        return {"status": "error", "error": str(e)}

def main():
    """Fonction principale - Mission corrective critique"""
    
    print("üö® MISSION CORRECTIVE CRITIQUE - √âQUIPE NEXTGENERATION")
    print("‚ùå D√©faillance identifi√©e : Analyse superficielle sans conformit√© architecturale")
    print()
    
    # Lancement mission corrective
    resultat = asyncio.run(analyse_pattern_factory_critique())
    
    print()
    print("üèÜ √âVALUATION MISSION CORRECTIVE")
    print("=" * 80)
    
    status = resultat.get('status', 'unknown')
    
    if status == 'success':
        taux = resultat.get('taux_conformite', 0)
        non_conformes = resultat.get('agents_non_conformes', 0)
        
        print("‚úÖ MISSION CORRECTIVE R√âUSSIE!")
        print(f"üìä Taux conformit√© Pattern Factory: {taux:.1f}%")
        print(f"‚ùå Agents non-conformes identifi√©s: {non_conformes}")
        
        if taux < 50:
            print("üö® ALERTE: Conformit√© Pattern Factory insuffisante!")
            print("üìã Action corrective massive n√©cessaire")
        elif taux < 80:
            print("‚ö†Ô∏è Conformit√© partielle - Am√©liorations n√©cessaires")
        else:
            print("‚úÖ Conformit√© Pattern Factory satisfaisante")
            
        print("üìÑ Rapports correctifs g√©n√©r√©s dans reviews/")
    else:
        print("‚ùå Erreur mission corrective")
    
    print()
    print("üìä LE√áON APPRISE:")
    print("=" * 80)
    print("‚ùå L'√©quipe NextGeneration a fait une analyse SUPERFICIELLE")
    print("‚úÖ Cette mission corrective r√©v√®le les VRAIS probl√®mes")
    print("üéØ L'analyse architecturale est ESSENTIELLE")
    print("üìã Conformit√© Pattern Factory = Priorit√© critique")
    
    return resultat

if __name__ == "__main__":
    main() 




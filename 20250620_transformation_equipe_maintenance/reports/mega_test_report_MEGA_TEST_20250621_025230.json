{
  "test_id": "MEGA_TEST_20250621_025230",
  "agent_tested": "../agent_factory_implementation/agents/agent_11_auditeur_qualite.py",
  "execution_time": 0.0161590576171875,
  "tests_results": {
    "syntax_structure": {
      "status": "SUCCESS",
      "syntax_valid": true,
      "structure_score": 3,
      "duration_ms": 0.5109310150146484
    },
    "security_audit": {
      "status": "SUCCESS",
      "findings_count": 0,
      "critical_count": 0,
      "security_score": 10.0,
      "findings": []
    },
    "performance_audit": {
      "status": "SUCCESS",
      "issues_count": 0,
      "high_issues": 0,
      "performance_score": 10.0,
      "issues": []
    },
    "conformity_audit": {
      "status": "SUCCESS",
      "issues_count": 45,
      "medium_issues": 0,
      "conformity_score": 5.5,
      "issues": [
        {
          "issue_id": "PEP8_TRAIL_9",
          "standard_type": "PEP8",
          "severity": "LOW",
          "title": "Espaces superflus",
          "description": "Ligne 9 contient des espaces en fin",
          "location": "../agent_factory_implementation/agents/agent_11_auditeur_qualite.py:9",
          "remediation": "Supprimer espaces superflus"
        },
        {
          "issue_id": "PEP8_LINE_28",
          "standard_type": "PEP8",
          "severity": "LOW",
          "title": "Ligne trop longue",
          "description": "Ligne 28 : 96 caract√®res (max 79)",
          "location": "../agent_factory_implementation/agents/agent_11_auditeur_qualite.py:28",
          "remediation": "Diviser la ligne"
        },
        {
          "issue_id": "PEP8_LINE_43",
          "standard_type": "PEP8",
          "severity": "LOW",
          "title": "Ligne trop longue",
          "description": "Ligne 43 : 90 caract√®res (max 79)",
          "location": "../agent_factory_implementation/agents/agent_11_auditeur_qualite.py:43",
          "remediation": "Diviser la ligne"
        },
        {
          "issue_id": "PEP8_TRAIL_44",
          "standard_type": "PEP8",
          "severity": "LOW",
          "title": "Espaces superflus",
          "description": "Ligne 44 contient des espaces en fin",
          "location": "../agent_factory_implementation/agents/agent_11_auditeur_qualite.py:44",
          "remediation": "Supprimer espaces superflus"
        },
        {
          "issue_id": "PEP8_TRAIL_49",
          "standard_type": "PEP8",
          "severity": "LOW",
          "title": "Espaces superflus",
          "description": "Ligne 49 contient des espaces en fin",
          "location": "../agent_factory_implementation/agents/agent_11_auditeur_qualite.py:49",
          "remediation": "Supprimer espaces superflus"
        }
      ]
    },
    "utilisation_reelle": {
      "status": "SUCCESS",
      "tests_executed": 2,
      "tests_passed": 1,
      "details": {
        "import": {
          "status": "SUCCESS",
          "module": {
            "__name__": "agent_11_auditeur_qualite",
            "__doc__": "\nü§ñ AGENT11AUDITEURQUALITE - PATTERN FACTORY NEXTGENERATION\n========================================================\n\nMission: [Mission extraite de l'agent original]\n\nArchitecture Pattern Factory:\n- H√©rite de Agent de base  \n- Impl√©mente m√©thodes abstraites obligatoires\n- Configuration NextGeneration int√©gr√©e\n- Logging Pattern Factory standardis√©\n\nTransform√© automatiquement par Agent 03 Adaptateur Code Upgraded\nDate: 2025-06-21 02:36:28\n",
            "__package__": "",
            "__loader__": {
              "name": "agent_11_auditeur_qualite",
              "path": "C:\\Dev\\nextgeneration\\20250620_transformation_equipe_maintenance\\../agent_factory_implementation/agents/agent_11_auditeur_qualite.py"
            },
            "__spec__": {
              "name": "agent_11_auditeur_qualite",
              "loader": {
                "name": "agent_11_auditeur_qualite",
                "path": "C:\\Dev\\nextgeneration\\20250620_transformation_equipe_maintenance\\../agent_factory_implementation/agents/agent_11_auditeur_qualite.py"
              },
              "origin": "C:\\Dev\\nextgeneration\\20250620_transformation_equipe_maintenance\\../agent_factory_implementation/agents/agent_11_auditeur_qualite.py",
              "loader_state": null,
              "submodule_search_locations": null,
              "_uninitialized_submodules": [],
              "_set_fileattr": true,
              "_cached": "C:\\Dev\\nextgeneration\\20250620_transformation_equipe_maintenance\\../agent_factory_implementation/agents\\__pycache__\\agent_11_auditeur_qualite.cpython-312.pyc"
            },
            "__file__": "C:\\Dev\\nextgeneration\\20250620_transformation_equipe_maintenance\\../agent_factory_implementation/agents/agent_11_auditeur_qualite.py",
            "__cached__": "C:\\Dev\\nextgeneration\\20250620_transformation_equipe_maintenance\\../agent_factory_implementation/agents\\__pycache__\\agent_11_auditeur_qualite.cpython-312.pyc",
            "__builtins__": {
              "__name__": "builtins",
              "__doc__": "Built-in functions, types, exceptions, and other objects.\n\nThis module provides direct access to all 'built-in'\nidentifiers of Python; for example, builtins.len is\nthe full name for the built-in function len().\n\nThis module is not normally accessed explicitly by most\napplications, but can be useful in modules that provide\nobjects with the same name as a built-in value, but in\nwhich the built-in of that name is also needed.",
              "__package__": "",
              "__loader__": "{'__module__': '_frozen_importlib', '__doc__': 'Meta path import for built-in modules.\\n\\n    All methods are either class or static methods to avoid the need to\\n    instantiate the class.\\n\\n    ', '_ORIGIN': 'built-in', 'find_spec': <classmethod(<function BuiltinImporter.find_spec at 0x0000021CF1F62F20>)>, 'create_module': <staticmethod(<function BuiltinImporter.create_module at 0x0000021CF1F62FC0>)>, 'exec_module': <staticmethod(<function BuiltinImporter.exec_module at 0x0000021CF1F63060>)>, 'get_code': <classmethod(<function BuiltinImporter.get_code at 0x0000021CF1F631A0>)>, 'get_source': <classmethod(<function BuiltinImporter.get_source at 0x0000021CF1F632E0>)>, 'is_package': <classmethod(<function BuiltinImporter.is_package at 0x0000021CF1F63420>)>, 'load_module': <classmethod(<function _load_module_shim at 0x0000021CF1F622A0>)>, '__dict__': <attribute '__dict__' of 'BuiltinImporter' objects>, '__weakref__': <attribute '__weakref__' of 'BuiltinImporter' objects>}",
              "__spec__": {
                "name": "builtins",
                "loader": "{'__module__': '_frozen_importlib', '__doc__': 'Meta path import for built-in modules.\\n\\n    All methods are either class or static methods to avoid the need to\\n    instantiate the class.\\n\\n    ', '_ORIGIN': 'built-in', 'find_spec': <classmethod(<function BuiltinImporter.find_spec at 0x0000021CF1F62F20>)>, 'create_module': <staticmethod(<function BuiltinImporter.create_module at 0x0000021CF1F62FC0>)>, 'exec_module': <staticmethod(<function BuiltinImporter.exec_module at 0x0000021CF1F63060>)>, 'get_code': <classmethod(<function BuiltinImporter.get_code at 0x0000021CF1F631A0>)>, 'get_source': <classmethod(<function BuiltinImporter.get_source at 0x0000021CF1F632E0>)>, 'is_package': <classmethod(<function BuiltinImporter.is_package at 0x0000021CF1F63420>)>, 'load_module': <classmethod(<function _load_module_shim at 0x0000021CF1F622A0>)>, '__dict__': <attribute '__dict__' of 'BuiltinImporter' objects>, '__weakref__': <attribute '__weakref__' of 'BuiltinImporter' objects>}",
                "origin": "built-in",
                "loader_state": null,
                "submodule_search_locations": null,
                "_uninitialized_submodules": [],
                "_set_fileattr": false,
                "_cached": null
              },
              "__build_class__": "<built-in function __build_class__>",
              "__import__": "<built-in function __import__>",
              "abs": "<built-in function abs>",
              "all": "<built-in function all>",
              "any": "<built-in function any>",
              "ascii": "<built-in function ascii>",
              "bin": "<built-in function bin>",
              "breakpoint": "<built-in function breakpoint>",
              "callable": "<built-in function callable>",
              "chr": "<built-in function chr>",
              "compile": "<built-in function compile>",
              "delattr": "<built-in function delattr>",
              "dir": "<built-in function dir>",
              "divmod": "<built-in function divmod>",
              "eval": "<built-in function eval>",
              "exec": "<built-in function exec>",
              "format": "<built-in function format>",
              "getattr": "<built-in function getattr>",
              "globals": "<built-in function globals>",
              "hasattr": "<built-in function hasattr>",
              "hash": "<built-in function hash>",
              "hex": "<built-in function hex>",
              "id": "<built-in function id>",
              "input": "<built-in function input>",
              "isinstance": "<built-in function isinstance>",
              "issubclass": "<built-in function issubclass>",
              "iter": "<built-in function iter>",
              "aiter": "<built-in function aiter>",
              "len": "<built-in function len>",
              "locals": "<built-in function locals>",
              "max": "<built-in function max>",
              "min": "<built-in function min>",
              "next": "<built-in function next>",
              "anext": "<built-in function anext>",
              "oct": "<built-in function oct>",
              "ord": "<built-in function ord>",
              "pow": "<built-in function pow>",
              "print": "<built-in function print>",
              "repr": "<built-in function repr>",
              "round": "<built-in function round>",
              "setattr": "<built-in function setattr>",
              "sorted": "<built-in function sorted>",
              "sum": "<built-in function sum>",
              "vars": "<built-in function vars>",
              "None": null,
              "Ellipsis": "Ellipsis",
              "NotImplemented": "NotImplemented",
              "False": false,
              "True": true,
              "bool": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFA370>, '__repr__': <slot wrapper '__repr__' of 'bool' objects>, '__invert__': <slot wrapper '__invert__' of 'bool' objects>, '__and__': <slot wrapper '__and__' of 'bool' objects>, '__rand__': <slot wrapper '__rand__' of 'bool' objects>, '__xor__': <slot wrapper '__xor__' of 'bool' objects>, '__rxor__': <slot wrapper '__rxor__' of 'bool' objects>, '__or__': <slot wrapper '__or__' of 'bool' objects>, '__ror__': <slot wrapper '__ror__' of 'bool' objects>, '__doc__': 'bool(x) -> bool\\n\\nReturns True when the argument x is true, False otherwise.\\nThe builtins True and False are the only two instances of the class bool.\\nThe class bool is a subclass of the class int, and cannot be subclassed.'}",
              "memoryview": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D06B50>, '__repr__': <slot wrapper '__repr__' of 'memoryview' objects>, '__hash__': <slot wrapper '__hash__' of 'memoryview' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'memoryview' objects>, '__lt__': <slot wrapper '__lt__' of 'memoryview' objects>, '__le__': <slot wrapper '__le__' of 'memoryview' objects>, '__eq__': <slot wrapper '__eq__' of 'memoryview' objects>, '__ne__': <slot wrapper '__ne__' of 'memoryview' objects>, '__gt__': <slot wrapper '__gt__' of 'memoryview' objects>, '__ge__': <slot wrapper '__ge__' of 'memoryview' objects>, '__iter__': <slot wrapper '__iter__' of 'memoryview' objects>, '__buffer__': <slot wrapper '__buffer__' of 'memoryview' objects>, '__release_buffer__': <slot wrapper '__release_buffer__' of 'memoryview' objects>, '__len__': <slot wrapper '__len__' of 'memoryview' objects>, '__getitem__': <slot wrapper '__getitem__' of 'memoryview' objects>, '__setitem__': <slot wrapper '__setitem__' of 'memoryview' objects>, '__delitem__': <slot wrapper '__delitem__' of 'memoryview' objects>, 'release': <method 'release' of 'memoryview' objects>, 'tobytes': <method 'tobytes' of 'memoryview' objects>, 'hex': <method 'hex' of 'memoryview' objects>, 'tolist': <method 'tolist' of 'memoryview' objects>, 'cast': <method 'cast' of 'memoryview' objects>, 'toreadonly': <method 'toreadonly' of 'memoryview' objects>, '_from_flags': <method '_from_flags' of 'memoryview' objects>, '__enter__': <method '__enter__' of 'memoryview' objects>, '__exit__': <method '__exit__' of 'memoryview' objects>, 'obj': <attribute 'obj' of 'memoryview' objects>, 'nbytes': <attribute 'nbytes' of 'memoryview' objects>, 'readonly': <attribute 'readonly' of 'memoryview' objects>, 'itemsize': <attribute 'itemsize' of 'memoryview' objects>, 'format': <attribute 'format' of 'memoryview' objects>, 'ndim': <attribute 'ndim' of 'memoryview' objects>, 'shape': <attribute 'shape' of 'memoryview' objects>, 'strides': <attribute 'strides' of 'memoryview' objects>, 'suboffsets': <attribute 'suboffsets' of 'memoryview' objects>, 'c_contiguous': <attribute 'c_contiguous' of 'memoryview' objects>, 'f_contiguous': <attribute 'f_contiguous' of 'memoryview' objects>, 'contiguous': <attribute 'contiguous' of 'memoryview' objects>, '__doc__': 'Create a new memoryview object which references the given object.'}",
              "bytearray": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFA6B0>, '__repr__': <slot wrapper '__repr__' of 'bytearray' objects>, '__str__': <slot wrapper '__str__' of 'bytearray' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'bytearray' objects>, '__lt__': <slot wrapper '__lt__' of 'bytearray' objects>, '__le__': <slot wrapper '__le__' of 'bytearray' objects>, '__eq__': <slot wrapper '__eq__' of 'bytearray' objects>, '__ne__': <slot wrapper '__ne__' of 'bytearray' objects>, '__gt__': <slot wrapper '__gt__' of 'bytearray' objects>, '__ge__': <slot wrapper '__ge__' of 'bytearray' objects>, '__iter__': <slot wrapper '__iter__' of 'bytearray' objects>, '__init__': <slot wrapper '__init__' of 'bytearray' objects>, '__buffer__': <slot wrapper '__buffer__' of 'bytearray' objects>, '__release_buffer__': <slot wrapper '__release_buffer__' of 'bytearray' objects>, '__mod__': <slot wrapper '__mod__' of 'bytearray' objects>, '__rmod__': <slot wrapper '__rmod__' of 'bytearray' objects>, '__len__': <slot wrapper '__len__' of 'bytearray' objects>, '__getitem__': <slot wrapper '__getitem__' of 'bytearray' objects>, '__setitem__': <slot wrapper '__setitem__' of 'bytearray' objects>, '__delitem__': <slot wrapper '__delitem__' of 'bytearray' objects>, '__add__': <slot wrapper '__add__' of 'bytearray' objects>, '__mul__': <slot wrapper '__mul__' of 'bytearray' objects>, '__rmul__': <slot wrapper '__rmul__' of 'bytearray' objects>, '__contains__': <slot wrapper '__contains__' of 'bytearray' objects>, '__iadd__': <slot wrapper '__iadd__' of 'bytearray' objects>, '__imul__': <slot wrapper '__imul__' of 'bytearray' objects>, '__alloc__': <method '__alloc__' of 'bytearray' objects>, '__reduce__': <method '__reduce__' of 'bytearray' objects>, '__reduce_ex__': <method '__reduce_ex__' of 'bytearray' objects>, '__sizeof__': <method '__sizeof__' of 'bytearray' objects>, 'append': <method 'append' of 'bytearray' objects>, 'capitalize': <method 'capitalize' of 'bytearray' objects>, 'center': <method 'center' of 'bytearray' objects>, 'clear': <method 'clear' of 'bytearray' objects>, 'copy': <method 'copy' of 'bytearray' objects>, 'count': <method 'count' of 'bytearray' objects>, 'decode': <method 'decode' of 'bytearray' objects>, 'endswith': <method 'endswith' of 'bytearray' objects>, 'expandtabs': <method 'expandtabs' of 'bytearray' objects>, 'extend': <method 'extend' of 'bytearray' objects>, 'find': <method 'find' of 'bytearray' objects>, 'fromhex': <method 'fromhex' of 'bytearray' objects>, 'hex': <method 'hex' of 'bytearray' objects>, 'index': <method 'index' of 'bytearray' objects>, 'insert': <method 'insert' of 'bytearray' objects>, 'isalnum': <method 'isalnum' of 'bytearray' objects>, 'isalpha': <method 'isalpha' of 'bytearray' objects>, 'isascii': <method 'isascii' of 'bytearray' objects>, 'isdigit': <method 'isdigit' of 'bytearray' objects>, 'islower': <method 'islower' of 'bytearray' objects>, 'isspace': <method 'isspace' of 'bytearray' objects>, 'istitle': <method 'istitle' of 'bytearray' objects>, 'isupper': <method 'isupper' of 'bytearray' objects>, 'join': <method 'join' of 'bytearray' objects>, 'ljust': <method 'ljust' of 'bytearray' objects>, 'lower': <method 'lower' of 'bytearray' objects>, 'lstrip': <method 'lstrip' of 'bytearray' objects>, 'maketrans': <staticmethod(<built-in method maketrans of type object at 0x00007FF997CFA6B0>)>, 'partition': <method 'partition' of 'bytearray' objects>, 'pop': <method 'pop' of 'bytearray' objects>, 'remove': <method 'remove' of 'bytearray' objects>, 'replace': <method 'replace' of 'bytearray' objects>, 'removeprefix': <method 'removeprefix' of 'bytearray' objects>, 'removesuffix': <method 'removesuffix' of 'bytearray' objects>, 'reverse': <method 'reverse' of 'bytearray' objects>, 'rfind': <method 'rfind' of 'bytearray' objects>, 'rindex': <method 'rindex' of 'bytearray' objects>, 'rjust': <method 'rjust' of 'bytearray' objects>, 'rpartition': <method 'rpartition' of 'bytearray' objects>, 'rsplit': <method 'rsplit' of 'bytearray' objects>, 'rstrip': <method 'rstrip' of 'bytearray' objects>, 'split': <method 'split' of 'bytearray' objects>, 'splitlines': <method 'splitlines' of 'bytearray' objects>, 'startswith': <method 'startswith' of 'bytearray' objects>, 'strip': <method 'strip' of 'bytearray' objects>, 'swapcase': <method 'swapcase' of 'bytearray' objects>, 'title': <method 'title' of 'bytearray' objects>, 'translate': <method 'translate' of 'bytearray' objects>, 'upper': <method 'upper' of 'bytearray' objects>, 'zfill': <method 'zfill' of 'bytearray' objects>, '__doc__': 'bytearray(iterable_of_ints) -> bytearray\\nbytearray(string, encoding[, errors]) -> bytearray\\nbytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer\\nbytearray(int) -> bytes array of size given by the parameter initialized with null bytes\\nbytearray() -> empty bytes array\\n\\nConstruct a mutable bytearray object from:\\n  - an iterable yielding integers in range(256)\\n  - a text string encoded using the specified encoding\\n  - a bytes or a buffer object\\n  - any object implementing the buffer API.\\n  - an integer', '__hash__': None}",
              "bytes": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFA9F0>, '__repr__': <slot wrapper '__repr__' of 'bytes' objects>, '__hash__': <slot wrapper '__hash__' of 'bytes' objects>, '__str__': <slot wrapper '__str__' of 'bytes' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'bytes' objects>, '__lt__': <slot wrapper '__lt__' of 'bytes' objects>, '__le__': <slot wrapper '__le__' of 'bytes' objects>, '__eq__': <slot wrapper '__eq__' of 'bytes' objects>, '__ne__': <slot wrapper '__ne__' of 'bytes' objects>, '__gt__': <slot wrapper '__gt__' of 'bytes' objects>, '__ge__': <slot wrapper '__ge__' of 'bytes' objects>, '__iter__': <slot wrapper '__iter__' of 'bytes' objects>, '__buffer__': <slot wrapper '__buffer__' of 'bytes' objects>, '__mod__': <slot wrapper '__mod__' of 'bytes' objects>, '__rmod__': <slot wrapper '__rmod__' of 'bytes' objects>, '__len__': <slot wrapper '__len__' of 'bytes' objects>, '__getitem__': <slot wrapper '__getitem__' of 'bytes' objects>, '__add__': <slot wrapper '__add__' of 'bytes' objects>, '__mul__': <slot wrapper '__mul__' of 'bytes' objects>, '__rmul__': <slot wrapper '__rmul__' of 'bytes' objects>, '__contains__': <slot wrapper '__contains__' of 'bytes' objects>, '__getnewargs__': <method '__getnewargs__' of 'bytes' objects>, '__bytes__': <method '__bytes__' of 'bytes' objects>, 'capitalize': <method 'capitalize' of 'bytes' objects>, 'center': <method 'center' of 'bytes' objects>, 'count': <method 'count' of 'bytes' objects>, 'decode': <method 'decode' of 'bytes' objects>, 'endswith': <method 'endswith' of 'bytes' objects>, 'expandtabs': <method 'expandtabs' of 'bytes' objects>, 'find': <method 'find' of 'bytes' objects>, 'fromhex': <method 'fromhex' of 'bytes' objects>, 'hex': <method 'hex' of 'bytes' objects>, 'index': <method 'index' of 'bytes' objects>, 'isalnum': <method 'isalnum' of 'bytes' objects>, 'isalpha': <method 'isalpha' of 'bytes' objects>, 'isascii': <method 'isascii' of 'bytes' objects>, 'isdigit': <method 'isdigit' of 'bytes' objects>, 'islower': <method 'islower' of 'bytes' objects>, 'isspace': <method 'isspace' of 'bytes' objects>, 'istitle': <method 'istitle' of 'bytes' objects>, 'isupper': <method 'isupper' of 'bytes' objects>, 'join': <method 'join' of 'bytes' objects>, 'ljust': <method 'ljust' of 'bytes' objects>, 'lower': <method 'lower' of 'bytes' objects>, 'lstrip': <method 'lstrip' of 'bytes' objects>, 'maketrans': <staticmethod(<built-in method maketrans of type object at 0x00007FF997CFA9F0>)>, 'partition': <method 'partition' of 'bytes' objects>, 'replace': <method 'replace' of 'bytes' objects>, 'removeprefix': <method 'removeprefix' of 'bytes' objects>, 'removesuffix': <method 'removesuffix' of 'bytes' objects>, 'rfind': <method 'rfind' of 'bytes' objects>, 'rindex': <method 'rindex' of 'bytes' objects>, 'rjust': <method 'rjust' of 'bytes' objects>, 'rpartition': <method 'rpartition' of 'bytes' objects>, 'rsplit': <method 'rsplit' of 'bytes' objects>, 'rstrip': <method 'rstrip' of 'bytes' objects>, 'split': <method 'split' of 'bytes' objects>, 'splitlines': <method 'splitlines' of 'bytes' objects>, 'startswith': <method 'startswith' of 'bytes' objects>, 'strip': <method 'strip' of 'bytes' objects>, 'swapcase': <method 'swapcase' of 'bytes' objects>, 'title': <method 'title' of 'bytes' objects>, 'translate': <method 'translate' of 'bytes' objects>, 'upper': <method 'upper' of 'bytes' objects>, 'zfill': <method 'zfill' of 'bytes' objects>, '__doc__': 'bytes(iterable_of_ints) -> bytes\\nbytes(string, encoding[, errors]) -> bytes\\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\\nbytes() -> empty bytes object\\n\\nConstruct an immutable array of bytes from:\\n  - an iterable yielding integers in range(256)\\n  - a text string encoded using the specified encoding\\n  - any object implementing the buffer API.\\n  - an integer'}",
              "classmethod": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D04930>, '__repr__': <slot wrapper '__repr__' of 'classmethod' objects>, '__get__': <slot wrapper '__get__' of 'classmethod' objects>, '__init__': <slot wrapper '__init__' of 'classmethod' objects>, '__func__': <member '__func__' of 'classmethod' objects>, '__wrapped__': <member '__wrapped__' of 'classmethod' objects>, '__isabstractmethod__': <attribute '__isabstractmethod__' of 'classmethod' objects>, '__dict__': <attribute '__dict__' of 'classmethod' objects>, '__doc__': 'classmethod(function) -> method\\n\\nConvert a function to be a class method.\\n\\nA class method receives the class as implicit first argument,\\njust like an instance method receives the instance.\\nTo declare a class method, use this idiom:\\n\\n  class C:\\n      @classmethod\\n      def f(cls, arg1, arg2, argN):\\n          ...\\n\\nIt can be called either on the class (e.g. C.f()) or on an instance\\n(e.g. C().f()).  The instance is ignored except for its class.\\nIf a class method is called for a derived class, the derived class\\nobject is passed as the implied first argument.\\n\\nClass methods are different than C++ or Java static methods.\\nIf you want those, see the staticmethod builtin.'}",
              "complex": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFB6F0>, '__repr__': <slot wrapper '__repr__' of 'complex' objects>, '__hash__': <slot wrapper '__hash__' of 'complex' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'complex' objects>, '__lt__': <slot wrapper '__lt__' of 'complex' objects>, '__le__': <slot wrapper '__le__' of 'complex' objects>, '__eq__': <slot wrapper '__eq__' of 'complex' objects>, '__ne__': <slot wrapper '__ne__' of 'complex' objects>, '__gt__': <slot wrapper '__gt__' of 'complex' objects>, '__ge__': <slot wrapper '__ge__' of 'complex' objects>, '__add__': <slot wrapper '__add__' of 'complex' objects>, '__radd__': <slot wrapper '__radd__' of 'complex' objects>, '__sub__': <slot wrapper '__sub__' of 'complex' objects>, '__rsub__': <slot wrapper '__rsub__' of 'complex' objects>, '__mul__': <slot wrapper '__mul__' of 'complex' objects>, '__rmul__': <slot wrapper '__rmul__' of 'complex' objects>, '__pow__': <slot wrapper '__pow__' of 'complex' objects>, '__rpow__': <slot wrapper '__rpow__' of 'complex' objects>, '__neg__': <slot wrapper '__neg__' of 'complex' objects>, '__pos__': <slot wrapper '__pos__' of 'complex' objects>, '__abs__': <slot wrapper '__abs__' of 'complex' objects>, '__bool__': <slot wrapper '__bool__' of 'complex' objects>, '__truediv__': <slot wrapper '__truediv__' of 'complex' objects>, '__rtruediv__': <slot wrapper '__rtruediv__' of 'complex' objects>, 'conjugate': <method 'conjugate' of 'complex' objects>, '__complex__': <method '__complex__' of 'complex' objects>, '__getnewargs__': <method '__getnewargs__' of 'complex' objects>, '__format__': <method '__format__' of 'complex' objects>, 'real': <member 'real' of 'complex' objects>, 'imag': <member 'imag' of 'complex' objects>, '__doc__': \"Create a complex number from a string or numbers.\\n\\nIf a string is given, parse it as a complex number.\\nIf a single number is given, convert it to a complex number.\\nIf the 'real' or 'imag' arguments are given, create a complex number\\nwith the specified real and imaginary components.\"}",
              "dict": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFD430>, '__repr__': <slot wrapper '__repr__' of 'dict' objects>, '__hash__': None, '__getattribute__': <slot wrapper '__getattribute__' of 'dict' objects>, '__lt__': <slot wrapper '__lt__' of 'dict' objects>, '__le__': <slot wrapper '__le__' of 'dict' objects>, '__eq__': <slot wrapper '__eq__' of 'dict' objects>, '__ne__': <slot wrapper '__ne__' of 'dict' objects>, '__gt__': <slot wrapper '__gt__' of 'dict' objects>, '__ge__': <slot wrapper '__ge__' of 'dict' objects>, '__iter__': <slot wrapper '__iter__' of 'dict' objects>, '__init__': <slot wrapper '__init__' of 'dict' objects>, '__or__': <slot wrapper '__or__' of 'dict' objects>, '__ror__': <slot wrapper '__ror__' of 'dict' objects>, '__ior__': <slot wrapper '__ior__' of 'dict' objects>, '__len__': <slot wrapper '__len__' of 'dict' objects>, '__getitem__': <method '__getitem__' of 'dict' objects>, '__setitem__': <slot wrapper '__setitem__' of 'dict' objects>, '__delitem__': <slot wrapper '__delitem__' of 'dict' objects>, '__contains__': <method '__contains__' of 'dict' objects>, '__sizeof__': <method '__sizeof__' of 'dict' objects>, 'get': <method 'get' of 'dict' objects>, 'setdefault': <method 'setdefault' of 'dict' objects>, 'pop': <method 'pop' of 'dict' objects>, 'popitem': <method 'popitem' of 'dict' objects>, 'keys': <method 'keys' of 'dict' objects>, 'items': <method 'items' of 'dict' objects>, 'values': <method 'values' of 'dict' objects>, 'update': <method 'update' of 'dict' objects>, 'fromkeys': <method 'fromkeys' of 'dict' objects>, 'clear': <method 'clear' of 'dict' objects>, 'copy': <method 'copy' of 'dict' objects>, '__reversed__': <method '__reversed__' of 'dict' objects>, '__class_getitem__': <method '__class_getitem__' of 'dict' objects>, '__doc__': \"dict() -> new empty dictionary\\ndict(mapping) -> new dictionary initialized from a mapping object's\\n    (key, value) pairs\\ndict(iterable) -> new dictionary initialized as if via:\\n    d = {}\\n    for k, v in iterable:\\n        d[k] = v\\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\\n    in the keyword argument list.  For example:  dict(one=1, two=2)\"}",
              "enumerate": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFD770>, '__getattribute__': <slot wrapper '__getattribute__' of 'enumerate' objects>, '__iter__': <slot wrapper '__iter__' of 'enumerate' objects>, '__next__': <slot wrapper '__next__' of 'enumerate' objects>, '__reduce__': <method '__reduce__' of 'enumerate' objects>, '__class_getitem__': <method '__class_getitem__' of 'enumerate' objects>, '__doc__': 'Return an enumerate object.\\n\\n  iterable\\n    an object supporting iteration\\n\\nThe enumerate object yields pairs containing a count (from start, which\\ndefaults to zero) and a value yielded by the iterable argument.\\n\\nenumerate is useful for obtaining an indexed list:\\n    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...'}",
              "filter": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D0A930>, '__getattribute__': <slot wrapper '__getattribute__' of 'filter' objects>, '__iter__': <slot wrapper '__iter__' of 'filter' objects>, '__next__': <slot wrapper '__next__' of 'filter' objects>, '__reduce__': <method '__reduce__' of 'filter' objects>, '__doc__': 'filter(function or None, iterable) --> filter object\\n\\nReturn an iterator yielding those items of iterable for which function(item)\\nis true. If function is None, return the items that are true.'}",
              "float": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D045F0>, '__repr__': <slot wrapper '__repr__' of 'float' objects>, '__hash__': <slot wrapper '__hash__' of 'float' objects>, '__lt__': <slot wrapper '__lt__' of 'float' objects>, '__le__': <slot wrapper '__le__' of 'float' objects>, '__eq__': <slot wrapper '__eq__' of 'float' objects>, '__ne__': <slot wrapper '__ne__' of 'float' objects>, '__gt__': <slot wrapper '__gt__' of 'float' objects>, '__ge__': <slot wrapper '__ge__' of 'float' objects>, '__add__': <slot wrapper '__add__' of 'float' objects>, '__radd__': <slot wrapper '__radd__' of 'float' objects>, '__sub__': <slot wrapper '__sub__' of 'float' objects>, '__rsub__': <slot wrapper '__rsub__' of 'float' objects>, '__mul__': <slot wrapper '__mul__' of 'float' objects>, '__rmul__': <slot wrapper '__rmul__' of 'float' objects>, '__mod__': <slot wrapper '__mod__' of 'float' objects>, '__rmod__': <slot wrapper '__rmod__' of 'float' objects>, '__divmod__': <slot wrapper '__divmod__' of 'float' objects>, '__rdivmod__': <slot wrapper '__rdivmod__' of 'float' objects>, '__pow__': <slot wrapper '__pow__' of 'float' objects>, '__rpow__': <slot wrapper '__rpow__' of 'float' objects>, '__neg__': <slot wrapper '__neg__' of 'float' objects>, '__pos__': <slot wrapper '__pos__' of 'float' objects>, '__abs__': <slot wrapper '__abs__' of 'float' objects>, '__bool__': <slot wrapper '__bool__' of 'float' objects>, '__int__': <slot wrapper '__int__' of 'float' objects>, '__float__': <slot wrapper '__float__' of 'float' objects>, '__floordiv__': <slot wrapper '__floordiv__' of 'float' objects>, '__rfloordiv__': <slot wrapper '__rfloordiv__' of 'float' objects>, '__truediv__': <slot wrapper '__truediv__' of 'float' objects>, '__rtruediv__': <slot wrapper '__rtruediv__' of 'float' objects>, 'conjugate': <method 'conjugate' of 'float' objects>, '__trunc__': <method '__trunc__' of 'float' objects>, '__floor__': <method '__floor__' of 'float' objects>, '__ceil__': <method '__ceil__' of 'float' objects>, '__round__': <method '__round__' of 'float' objects>, 'as_integer_ratio': <method 'as_integer_ratio' of 'float' objects>, 'fromhex': <method 'fromhex' of 'float' objects>, 'hex': <method 'hex' of 'float' objects>, 'is_integer': <method 'is_integer' of 'float' objects>, '__getnewargs__': <method '__getnewargs__' of 'float' objects>, '__getformat__': <method '__getformat__' of 'float' objects>, '__format__': <method '__format__' of 'float' objects>, 'real': <attribute 'real' of 'float' objects>, 'imag': <attribute 'imag' of 'float' objects>, '__doc__': 'Convert a string or number to a floating-point number, if possible.'}",
              "frozenset": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D08BF0>, '__repr__': <slot wrapper '__repr__' of 'frozenset' objects>, '__hash__': <slot wrapper '__hash__' of 'frozenset' objects>, '__lt__': <slot wrapper '__lt__' of 'frozenset' objects>, '__le__': <slot wrapper '__le__' of 'frozenset' objects>, '__eq__': <slot wrapper '__eq__' of 'frozenset' objects>, '__ne__': <slot wrapper '__ne__' of 'frozenset' objects>, '__gt__': <slot wrapper '__gt__' of 'frozenset' objects>, '__ge__': <slot wrapper '__ge__' of 'frozenset' objects>, '__iter__': <slot wrapper '__iter__' of 'frozenset' objects>, '__sub__': <slot wrapper '__sub__' of 'frozenset' objects>, '__rsub__': <slot wrapper '__rsub__' of 'frozenset' objects>, '__and__': <slot wrapper '__and__' of 'frozenset' objects>, '__rand__': <slot wrapper '__rand__' of 'frozenset' objects>, '__xor__': <slot wrapper '__xor__' of 'frozenset' objects>, '__rxor__': <slot wrapper '__rxor__' of 'frozenset' objects>, '__or__': <slot wrapper '__or__' of 'frozenset' objects>, '__ror__': <slot wrapper '__ror__' of 'frozenset' objects>, '__len__': <slot wrapper '__len__' of 'frozenset' objects>, '__contains__': <method '__contains__' of 'frozenset' objects>, 'copy': <method 'copy' of 'frozenset' objects>, 'difference': <method 'difference' of 'frozenset' objects>, 'intersection': <method 'intersection' of 'frozenset' objects>, 'isdisjoint': <method 'isdisjoint' of 'frozenset' objects>, 'issubset': <method 'issubset' of 'frozenset' objects>, 'issuperset': <method 'issuperset' of 'frozenset' objects>, '__reduce__': <method '__reduce__' of 'frozenset' objects>, '__sizeof__': <method '__sizeof__' of 'frozenset' objects>, 'symmetric_difference': <method 'symmetric_difference' of 'frozenset' objects>, 'union': <method 'union' of 'frozenset' objects>, '__class_getitem__': <method '__class_getitem__' of 'frozenset' objects>, '__doc__': 'frozenset() -> empty frozenset object\\nfrozenset(iterable) -> frozenset object\\n\\nBuild an immutable unordered collection of unique elements.'}",
              "property": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFB890>, '__getattribute__': <slot wrapper '__getattribute__' of 'property' objects>, '__get__': <slot wrapper '__get__' of 'property' objects>, '__set__': <slot wrapper '__set__' of 'property' objects>, '__delete__': <slot wrapper '__delete__' of 'property' objects>, '__init__': <slot wrapper '__init__' of 'property' objects>, 'getter': <method 'getter' of 'property' objects>, 'setter': <method 'setter' of 'property' objects>, 'deleter': <method 'deleter' of 'property' objects>, '__set_name__': <method '__set_name__' of 'property' objects>, 'fget': <member 'fget' of 'property' objects>, 'fset': <member 'fset' of 'property' objects>, 'fdel': <member 'fdel' of 'property' objects>, '__doc__': <member '__doc__' of 'property' objects>, '__isabstractmethod__': <attribute '__isabstractmethod__' of 'property' objects>}",
              "int": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D06810>, '__repr__': <slot wrapper '__repr__' of 'int' objects>, '__hash__': <slot wrapper '__hash__' of 'int' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'int' objects>, '__lt__': <slot wrapper '__lt__' of 'int' objects>, '__le__': <slot wrapper '__le__' of 'int' objects>, '__eq__': <slot wrapper '__eq__' of 'int' objects>, '__ne__': <slot wrapper '__ne__' of 'int' objects>, '__gt__': <slot wrapper '__gt__' of 'int' objects>, '__ge__': <slot wrapper '__ge__' of 'int' objects>, '__add__': <slot wrapper '__add__' of 'int' objects>, '__radd__': <slot wrapper '__radd__' of 'int' objects>, '__sub__': <slot wrapper '__sub__' of 'int' objects>, '__rsub__': <slot wrapper '__rsub__' of 'int' objects>, '__mul__': <slot wrapper '__mul__' of 'int' objects>, '__rmul__': <slot wrapper '__rmul__' of 'int' objects>, '__mod__': <slot wrapper '__mod__' of 'int' objects>, '__rmod__': <slot wrapper '__rmod__' of 'int' objects>, '__divmod__': <slot wrapper '__divmod__' of 'int' objects>, '__rdivmod__': <slot wrapper '__rdivmod__' of 'int' objects>, '__pow__': <slot wrapper '__pow__' of 'int' objects>, '__rpow__': <slot wrapper '__rpow__' of 'int' objects>, '__neg__': <slot wrapper '__neg__' of 'int' objects>, '__pos__': <slot wrapper '__pos__' of 'int' objects>, '__abs__': <slot wrapper '__abs__' of 'int' objects>, '__bool__': <slot wrapper '__bool__' of 'int' objects>, '__invert__': <slot wrapper '__invert__' of 'int' objects>, '__lshift__': <slot wrapper '__lshift__' of 'int' objects>, '__rlshift__': <slot wrapper '__rlshift__' of 'int' objects>, '__rshift__': <slot wrapper '__rshift__' of 'int' objects>, '__rrshift__': <slot wrapper '__rrshift__' of 'int' objects>, '__and__': <slot wrapper '__and__' of 'int' objects>, '__rand__': <slot wrapper '__rand__' of 'int' objects>, '__xor__': <slot wrapper '__xor__' of 'int' objects>, '__rxor__': <slot wrapper '__rxor__' of 'int' objects>, '__or__': <slot wrapper '__or__' of 'int' objects>, '__ror__': <slot wrapper '__ror__' of 'int' objects>, '__int__': <slot wrapper '__int__' of 'int' objects>, '__float__': <slot wrapper '__float__' of 'int' objects>, '__floordiv__': <slot wrapper '__floordiv__' of 'int' objects>, '__rfloordiv__': <slot wrapper '__rfloordiv__' of 'int' objects>, '__truediv__': <slot wrapper '__truediv__' of 'int' objects>, '__rtruediv__': <slot wrapper '__rtruediv__' of 'int' objects>, '__index__': <slot wrapper '__index__' of 'int' objects>, 'conjugate': <method 'conjugate' of 'int' objects>, 'bit_length': <method 'bit_length' of 'int' objects>, 'bit_count': <method 'bit_count' of 'int' objects>, 'to_bytes': <method 'to_bytes' of 'int' objects>, 'from_bytes': <method 'from_bytes' of 'int' objects>, 'as_integer_ratio': <method 'as_integer_ratio' of 'int' objects>, '__trunc__': <method '__trunc__' of 'int' objects>, '__floor__': <method '__floor__' of 'int' objects>, '__ceil__': <method '__ceil__' of 'int' objects>, '__round__': <method '__round__' of 'int' objects>, '__getnewargs__': <method '__getnewargs__' of 'int' objects>, '__format__': <method '__format__' of 'int' objects>, '__sizeof__': <method '__sizeof__' of 'int' objects>, 'is_integer': <method 'is_integer' of 'int' objects>, 'real': <attribute 'real' of 'int' objects>, 'imag': <attribute 'imag' of 'int' objects>, 'numerator': <attribute 'numerator' of 'int' objects>, 'denominator': <attribute 'denominator' of 'int' objects>, '__doc__': \"int([x]) -> integer\\nint(x, base=10) -> integer\\n\\nConvert a number or string to an integer, or return 0 if no arguments\\nare given.  If x is a number, return x.__int__().  For floating-point\\nnumbers, this truncates towards zero.\\n\\nIf x is not a number or if base is given, then x must be a string,\\nbytes, or bytearray instance representing an integer literal in the\\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\\nBase 0 means to interpret the base from the string as an integer literal.\\n>>> int('0b100', base=0)\\n4\"}",
              "list": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D06670>, '__repr__': <slot wrapper '__repr__' of 'list' objects>, '__hash__': None, '__getattribute__': <slot wrapper '__getattribute__' of 'list' objects>, '__lt__': <slot wrapper '__lt__' of 'list' objects>, '__le__': <slot wrapper '__le__' of 'list' objects>, '__eq__': <slot wrapper '__eq__' of 'list' objects>, '__ne__': <slot wrapper '__ne__' of 'list' objects>, '__gt__': <slot wrapper '__gt__' of 'list' objects>, '__ge__': <slot wrapper '__ge__' of 'list' objects>, '__iter__': <slot wrapper '__iter__' of 'list' objects>, '__init__': <slot wrapper '__init__' of 'list' objects>, '__len__': <slot wrapper '__len__' of 'list' objects>, '__getitem__': <method '__getitem__' of 'list' objects>, '__setitem__': <slot wrapper '__setitem__' of 'list' objects>, '__delitem__': <slot wrapper '__delitem__' of 'list' objects>, '__add__': <slot wrapper '__add__' of 'list' objects>, '__mul__': <slot wrapper '__mul__' of 'list' objects>, '__rmul__': <slot wrapper '__rmul__' of 'list' objects>, '__contains__': <slot wrapper '__contains__' of 'list' objects>, '__iadd__': <slot wrapper '__iadd__' of 'list' objects>, '__imul__': <slot wrapper '__imul__' of 'list' objects>, '__reversed__': <method '__reversed__' of 'list' objects>, '__sizeof__': <method '__sizeof__' of 'list' objects>, 'clear': <method 'clear' of 'list' objects>, 'copy': <method 'copy' of 'list' objects>, 'append': <method 'append' of 'list' objects>, 'insert': <method 'insert' of 'list' objects>, 'extend': <method 'extend' of 'list' objects>, 'pop': <method 'pop' of 'list' objects>, 'remove': <method 'remove' of 'list' objects>, 'index': <method 'index' of 'list' objects>, 'count': <method 'count' of 'list' objects>, 'reverse': <method 'reverse' of 'list' objects>, 'sort': <method 'sort' of 'list' objects>, '__class_getitem__': <method '__class_getitem__' of 'list' objects>, '__doc__': 'Built-in mutable sequence.\\n\\nIf no argument is given, the constructor creates a new empty list.\\nThe argument must be an iterable if specified.'}",
              "map": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D0AAD0>, '__getattribute__': <slot wrapper '__getattribute__' of 'map' objects>, '__iter__': <slot wrapper '__iter__' of 'map' objects>, '__next__': <slot wrapper '__next__' of 'map' objects>, '__reduce__': <method '__reduce__' of 'map' objects>, '__doc__': 'map(func, *iterables) --> map object\\n\\nMake an iterator that computes the function using arguments from\\neach of the iterables.  Stops when the shortest iterable is exhausted.'}",
              "object": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D09750>, '__repr__': <slot wrapper '__repr__' of 'object' objects>, '__hash__': <slot wrapper '__hash__' of 'object' objects>, '__str__': <slot wrapper '__str__' of 'object' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'object' objects>, '__setattr__': <slot wrapper '__setattr__' of 'object' objects>, '__delattr__': <slot wrapper '__delattr__' of 'object' objects>, '__lt__': <slot wrapper '__lt__' of 'object' objects>, '__le__': <slot wrapper '__le__' of 'object' objects>, '__eq__': <slot wrapper '__eq__' of 'object' objects>, '__ne__': <slot wrapper '__ne__' of 'object' objects>, '__gt__': <slot wrapper '__gt__' of 'object' objects>, '__ge__': <slot wrapper '__ge__' of 'object' objects>, '__init__': <slot wrapper '__init__' of 'object' objects>, '__reduce_ex__': <method '__reduce_ex__' of 'object' objects>, '__reduce__': <method '__reduce__' of 'object' objects>, '__getstate__': <method '__getstate__' of 'object' objects>, '__subclasshook__': <method '__subclasshook__' of 'object' objects>, '__init_subclass__': <method '__init_subclass__' of 'object' objects>, '__format__': <method '__format__' of 'object' objects>, '__sizeof__': <method '__sizeof__' of 'object' objects>, '__dir__': <method '__dir__' of 'object' objects>, '__class__': <attribute '__class__' of 'object' objects>, '__doc__': 'The base class of the class hierarchy.\\n\\nWhen called, it accepts no arguments and returns a new featureless\\ninstance that has no instance attributes and cannot be given any.\\n'}",
              "range": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D083D0>, '__repr__': <slot wrapper '__repr__' of 'range' objects>, '__hash__': <slot wrapper '__hash__' of 'range' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'range' objects>, '__lt__': <slot wrapper '__lt__' of 'range' objects>, '__le__': <slot wrapper '__le__' of 'range' objects>, '__eq__': <slot wrapper '__eq__' of 'range' objects>, '__ne__': <slot wrapper '__ne__' of 'range' objects>, '__gt__': <slot wrapper '__gt__' of 'range' objects>, '__ge__': <slot wrapper '__ge__' of 'range' objects>, '__iter__': <slot wrapper '__iter__' of 'range' objects>, '__bool__': <slot wrapper '__bool__' of 'range' objects>, '__len__': <slot wrapper '__len__' of 'range' objects>, '__getitem__': <slot wrapper '__getitem__' of 'range' objects>, '__contains__': <slot wrapper '__contains__' of 'range' objects>, '__reversed__': <method '__reversed__' of 'range' objects>, '__reduce__': <method '__reduce__' of 'range' objects>, 'count': <method 'count' of 'range' objects>, 'index': <method 'index' of 'range' objects>, 'start': <member 'start' of 'range' objects>, 'stop': <member 'stop' of 'range' objects>, 'step': <member 'step' of 'range' objects>, '__doc__': 'range(stop) -> range object\\nrange(start, stop[, step]) -> range object\\n\\nReturn an object that produces a sequence of integers from start (inclusive)\\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\\nThese are exactly the valid indices for a list of 4 elements.\\nWhen step is given, it specifies the increment (or decrement).'}",
              "reversed": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFD5D0>, '__getattribute__': <slot wrapper '__getattribute__' of 'reversed' objects>, '__iter__': <slot wrapper '__iter__' of 'reversed' objects>, '__next__': <slot wrapper '__next__' of 'reversed' objects>, '__length_hint__': <method '__length_hint__' of 'reversed' objects>, '__reduce__': <method '__reduce__' of 'reversed' objects>, '__setstate__': <method '__setstate__' of 'reversed' objects>, '__doc__': 'Return a reverse iterator over the values of the given sequence.'}",
              "set": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D08A50>, '__repr__': <slot wrapper '__repr__' of 'set' objects>, '__hash__': None, '__getattribute__': <slot wrapper '__getattribute__' of 'set' objects>, '__lt__': <slot wrapper '__lt__' of 'set' objects>, '__le__': <slot wrapper '__le__' of 'set' objects>, '__eq__': <slot wrapper '__eq__' of 'set' objects>, '__ne__': <slot wrapper '__ne__' of 'set' objects>, '__gt__': <slot wrapper '__gt__' of 'set' objects>, '__ge__': <slot wrapper '__ge__' of 'set' objects>, '__iter__': <slot wrapper '__iter__' of 'set' objects>, '__init__': <slot wrapper '__init__' of 'set' objects>, '__sub__': <slot wrapper '__sub__' of 'set' objects>, '__rsub__': <slot wrapper '__rsub__' of 'set' objects>, '__and__': <slot wrapper '__and__' of 'set' objects>, '__rand__': <slot wrapper '__rand__' of 'set' objects>, '__xor__': <slot wrapper '__xor__' of 'set' objects>, '__rxor__': <slot wrapper '__rxor__' of 'set' objects>, '__or__': <slot wrapper '__or__' of 'set' objects>, '__ror__': <slot wrapper '__ror__' of 'set' objects>, '__isub__': <slot wrapper '__isub__' of 'set' objects>, '__iand__': <slot wrapper '__iand__' of 'set' objects>, '__ixor__': <slot wrapper '__ixor__' of 'set' objects>, '__ior__': <slot wrapper '__ior__' of 'set' objects>, '__len__': <slot wrapper '__len__' of 'set' objects>, '__contains__': <method '__contains__' of 'set' objects>, 'add': <method 'add' of 'set' objects>, 'clear': <method 'clear' of 'set' objects>, 'copy': <method 'copy' of 'set' objects>, 'discard': <method 'discard' of 'set' objects>, 'difference': <method 'difference' of 'set' objects>, 'difference_update': <method 'difference_update' of 'set' objects>, 'intersection': <method 'intersection' of 'set' objects>, 'intersection_update': <method 'intersection_update' of 'set' objects>, 'isdisjoint': <method 'isdisjoint' of 'set' objects>, 'issubset': <method 'issubset' of 'set' objects>, 'issuperset': <method 'issuperset' of 'set' objects>, 'pop': <method 'pop' of 'set' objects>, '__reduce__': <method '__reduce__' of 'set' objects>, 'remove': <method 'remove' of 'set' objects>, '__sizeof__': <method '__sizeof__' of 'set' objects>, 'symmetric_difference': <method 'symmetric_difference' of 'set' objects>, 'symmetric_difference_update': <method 'symmetric_difference_update' of 'set' objects>, 'union': <method 'union' of 'set' objects>, 'update': <method 'update' of 'set' objects>, '__class_getitem__': <method '__class_getitem__' of 'set' objects>, '__doc__': 'set() -> new empty set object\\nset(iterable) -> new set object\\n\\nBuild an unordered collection of unique elements.'}",
              "slice": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D08F30>, '__repr__': <slot wrapper '__repr__' of 'slice' objects>, '__hash__': <slot wrapper '__hash__' of 'slice' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'slice' objects>, '__lt__': <slot wrapper '__lt__' of 'slice' objects>, '__le__': <slot wrapper '__le__' of 'slice' objects>, '__eq__': <slot wrapper '__eq__' of 'slice' objects>, '__ne__': <slot wrapper '__ne__' of 'slice' objects>, '__gt__': <slot wrapper '__gt__' of 'slice' objects>, '__ge__': <slot wrapper '__ge__' of 'slice' objects>, 'indices': <method 'indices' of 'slice' objects>, '__reduce__': <method '__reduce__' of 'slice' objects>, 'start': <member 'start' of 'slice' objects>, 'stop': <member 'stop' of 'slice' objects>, 'step': <member 'step' of 'slice' objects>, '__doc__': 'slice(stop)\\nslice(start, stop[, step])\\n\\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).'}",
              "staticmethod": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D04AD0>, '__repr__': <slot wrapper '__repr__' of 'staticmethod' objects>, '__call__': <slot wrapper '__call__' of 'staticmethod' objects>, '__get__': <slot wrapper '__get__' of 'staticmethod' objects>, '__init__': <slot wrapper '__init__' of 'staticmethod' objects>, '__func__': <member '__func__' of 'staticmethod' objects>, '__wrapped__': <member '__wrapped__' of 'staticmethod' objects>, '__isabstractmethod__': <attribute '__isabstractmethod__' of 'staticmethod' objects>, '__dict__': <attribute '__dict__' of 'staticmethod' objects>, '__doc__': 'staticmethod(function) -> method\\n\\nConvert a function to be a static method.\\n\\nA static method does not receive an implicit first argument.\\nTo declare a static method, use this idiom:\\n\\n     class C:\\n         @staticmethod\\n         def f(arg1, arg2, argN):\\n             ...\\n\\nIt can be called either on the class (e.g. C.f()) or on an instance\\n(e.g. C().f()). Both the class and the instance are ignored, and\\nneither is passed implicitly as the first argument to the method.\\n\\nStatic methods in Python are similar to those found in Java or C++.\\nFor a more advanced concept, see the classmethod builtin.'}",
              "str": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D09F70>, '__repr__': <slot wrapper '__repr__' of 'str' objects>, '__hash__': <slot wrapper '__hash__' of 'str' objects>, '__str__': <slot wrapper '__str__' of 'str' objects>, '__lt__': <slot wrapper '__lt__' of 'str' objects>, '__le__': <slot wrapper '__le__' of 'str' objects>, '__eq__': <slot wrapper '__eq__' of 'str' objects>, '__ne__': <slot wrapper '__ne__' of 'str' objects>, '__gt__': <slot wrapper '__gt__' of 'str' objects>, '__ge__': <slot wrapper '__ge__' of 'str' objects>, '__iter__': <slot wrapper '__iter__' of 'str' objects>, '__mod__': <slot wrapper '__mod__' of 'str' objects>, '__rmod__': <slot wrapper '__rmod__' of 'str' objects>, '__len__': <slot wrapper '__len__' of 'str' objects>, '__getitem__': <slot wrapper '__getitem__' of 'str' objects>, '__add__': <slot wrapper '__add__' of 'str' objects>, '__mul__': <slot wrapper '__mul__' of 'str' objects>, '__rmul__': <slot wrapper '__rmul__' of 'str' objects>, '__contains__': <slot wrapper '__contains__' of 'str' objects>, 'encode': <method 'encode' of 'str' objects>, 'replace': <method 'replace' of 'str' objects>, 'split': <method 'split' of 'str' objects>, 'rsplit': <method 'rsplit' of 'str' objects>, 'join': <method 'join' of 'str' objects>, 'capitalize': <method 'capitalize' of 'str' objects>, 'casefold': <method 'casefold' of 'str' objects>, 'title': <method 'title' of 'str' objects>, 'center': <method 'center' of 'str' objects>, 'count': <method 'count' of 'str' objects>, 'expandtabs': <method 'expandtabs' of 'str' objects>, 'find': <method 'find' of 'str' objects>, 'partition': <method 'partition' of 'str' objects>, 'index': <method 'index' of 'str' objects>, 'ljust': <method 'ljust' of 'str' objects>, 'lower': <method 'lower' of 'str' objects>, 'lstrip': <method 'lstrip' of 'str' objects>, 'rfind': <method 'rfind' of 'str' objects>, 'rindex': <method 'rindex' of 'str' objects>, 'rjust': <method 'rjust' of 'str' objects>, 'rstrip': <method 'rstrip' of 'str' objects>, 'rpartition': <method 'rpartition' of 'str' objects>, 'splitlines': <method 'splitlines' of 'str' objects>, 'strip': <method 'strip' of 'str' objects>, 'swapcase': <method 'swapcase' of 'str' objects>, 'translate': <method 'translate' of 'str' objects>, 'upper': <method 'upper' of 'str' objects>, 'startswith': <method 'startswith' of 'str' objects>, 'endswith': <method 'endswith' of 'str' objects>, 'removeprefix': <method 'removeprefix' of 'str' objects>, 'removesuffix': <method 'removesuffix' of 'str' objects>, 'isascii': <method 'isascii' of 'str' objects>, 'islower': <method 'islower' of 'str' objects>, 'isupper': <method 'isupper' of 'str' objects>, 'istitle': <method 'istitle' of 'str' objects>, 'isspace': <method 'isspace' of 'str' objects>, 'isdecimal': <method 'isdecimal' of 'str' objects>, 'isdigit': <method 'isdigit' of 'str' objects>, 'isnumeric': <method 'isnumeric' of 'str' objects>, 'isalpha': <method 'isalpha' of 'str' objects>, 'isalnum': <method 'isalnum' of 'str' objects>, 'isidentifier': <method 'isidentifier' of 'str' objects>, 'isprintable': <method 'isprintable' of 'str' objects>, 'zfill': <method 'zfill' of 'str' objects>, 'format': <method 'format' of 'str' objects>, 'format_map': <method 'format_map' of 'str' objects>, '__format__': <method '__format__' of 'str' objects>, 'maketrans': <staticmethod(<built-in method maketrans of type object at 0x00007FF997D09F70>)>, '__sizeof__': <method '__sizeof__' of 'str' objects>, '__getnewargs__': <method '__getnewargs__' of 'str' objects>, '__doc__': \"str(object='') -> str\\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\\n\\nCreate a new string object from the given object. If encoding or\\nerrors is specified, then the object must expose a data buffer\\nthat will be decoded using the given encoding and error handler.\\nOtherwise, returns the result of object.__str__() (if defined)\\nor repr(object).\\nencoding defaults to sys.getdefaultencoding().\\nerrors defaults to 'strict'.\"}",
              "super": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D095B0>, '__repr__': <slot wrapper '__repr__' of 'super' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'super' objects>, '__get__': <slot wrapper '__get__' of 'super' objects>, '__init__': <slot wrapper '__init__' of 'super' objects>, '__thisclass__': <member '__thisclass__' of 'super' objects>, '__self__': <member '__self__' of 'super' objects>, '__self_class__': <member '__self_class__' of 'super' objects>, '__doc__': 'super() -> same as super(__class__, <first argument>)\\nsuper(type) -> unbound super object\\nsuper(type, obj) -> bound super object; requires isinstance(obj, type)\\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\\nTypical use to call a cooperative superclass method:\\nclass C(B):\\n    def meth(self, arg):\\n        super().meth(arg)\\nThis works for class methods too:\\nclass C(B):\\n    @classmethod\\n    def cmeth(cls, arg):\\n        super().cmeth(arg)\\n'}",
              "tuple": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D09270>, '__repr__': <slot wrapper '__repr__' of 'tuple' objects>, '__hash__': <slot wrapper '__hash__' of 'tuple' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'tuple' objects>, '__lt__': <slot wrapper '__lt__' of 'tuple' objects>, '__le__': <slot wrapper '__le__' of 'tuple' objects>, '__eq__': <slot wrapper '__eq__' of 'tuple' objects>, '__ne__': <slot wrapper '__ne__' of 'tuple' objects>, '__gt__': <slot wrapper '__gt__' of 'tuple' objects>, '__ge__': <slot wrapper '__ge__' of 'tuple' objects>, '__iter__': <slot wrapper '__iter__' of 'tuple' objects>, '__len__': <slot wrapper '__len__' of 'tuple' objects>, '__getitem__': <slot wrapper '__getitem__' of 'tuple' objects>, '__add__': <slot wrapper '__add__' of 'tuple' objects>, '__mul__': <slot wrapper '__mul__' of 'tuple' objects>, '__rmul__': <slot wrapper '__rmul__' of 'tuple' objects>, '__contains__': <slot wrapper '__contains__' of 'tuple' objects>, '__getnewargs__': <method '__getnewargs__' of 'tuple' objects>, 'index': <method 'index' of 'tuple' objects>, 'count': <method 'count' of 'tuple' objects>, '__class_getitem__': <method '__class_getitem__' of 'tuple' objects>, '__doc__': \"Built-in immutable sequence.\\n\\nIf no argument is given, the constructor returns an empty tuple.\\nIf iterable is specified the tuple is initialized from iterable's items.\\n\\nIf the argument is a tuple, the return value is the same object.\"}",
              "type": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D098F0>, '__repr__': <slot wrapper '__repr__' of 'type' objects>, '__call__': <slot wrapper '__call__' of 'type' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'type' objects>, '__setattr__': <slot wrapper '__setattr__' of 'type' objects>, '__delattr__': <slot wrapper '__delattr__' of 'type' objects>, '__init__': <slot wrapper '__init__' of 'type' objects>, '__or__': <slot wrapper '__or__' of 'type' objects>, '__ror__': <slot wrapper '__ror__' of 'type' objects>, 'mro': <method 'mro' of 'type' objects>, '__subclasses__': <method '__subclasses__' of 'type' objects>, '__prepare__': <method '__prepare__' of 'type' objects>, '__instancecheck__': <method '__instancecheck__' of 'type' objects>, '__subclasscheck__': <method '__subclasscheck__' of 'type' objects>, '__dir__': <method '__dir__' of 'type' objects>, '__sizeof__': <method '__sizeof__' of 'type' objects>, '__basicsize__': <member '__basicsize__' of 'type' objects>, '__itemsize__': <member '__itemsize__' of 'type' objects>, '__flags__': <member '__flags__' of 'type' objects>, '__weakrefoffset__': <member '__weakrefoffset__' of 'type' objects>, '__base__': <member '__base__' of 'type' objects>, '__dictoffset__': <member '__dictoffset__' of 'type' objects>, '__name__': <attribute '__name__' of 'type' objects>, '__qualname__': <attribute '__qualname__' of 'type' objects>, '__bases__': <attribute '__bases__' of 'type' objects>, '__mro__': <attribute '__mro__' of 'type' objects>, '__module__': <attribute '__module__' of 'type' objects>, '__abstractmethods__': <attribute '__abstractmethods__' of 'type' objects>, '__dict__': <attribute '__dict__' of 'type' objects>, '__doc__': <attribute '__doc__' of 'type' objects>, '__text_signature__': <attribute '__text_signature__' of 'type' objects>, '__annotations__': <attribute '__annotations__' of 'type' objects>, '__type_params__': <attribute '__type_params__' of 'type' objects>}",
              "zip": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D0A790>, '__getattribute__': <slot wrapper '__getattribute__' of 'zip' objects>, '__iter__': <slot wrapper '__iter__' of 'zip' objects>, '__next__': <slot wrapper '__next__' of 'zip' objects>, '__reduce__': <method '__reduce__' of 'zip' objects>, '__setstate__': <method '__setstate__' of 'zip' objects>, '__doc__': \"zip(*iterables, strict=False) --> Yield tuples until an input is exhausted.\\n\\n   >>> list(zip('abcdefg', range(3), range(4)))\\n   [('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]\\n\\nThe zip object yields n-length tuples, where n is the number of iterables\\npassed as positional arguments to zip().  The i-th element in every tuple\\ncomes from the i-th iterable argument to zip().  This continues until the\\nshortest argument is exhausted.\\n\\nIf strict is true and one of the arguments is exhausted before the others,\\nraise a ValueError.\"}",
              "__debug__": true,
              "BaseException": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02090>, '__repr__': <slot wrapper '__repr__' of 'BaseException' objects>, '__str__': <slot wrapper '__str__' of 'BaseException' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'BaseException' objects>, '__init__': <slot wrapper '__init__' of 'BaseException' objects>, '__reduce__': <method '__reduce__' of 'BaseException' objects>, '__setstate__': <method '__setstate__' of 'BaseException' objects>, 'with_traceback': <method 'with_traceback' of 'BaseException' objects>, 'add_note': <method 'add_note' of 'BaseException' objects>, '__suppress_context__': <member '__suppress_context__' of 'BaseException' objects>, '__dict__': <attribute '__dict__' of 'BaseException' objects>, 'args': <attribute 'args' of 'BaseException' objects>, '__traceback__': <attribute '__traceback__' of 'BaseException' objects>, '__context__': <attribute '__context__' of 'BaseException' objects>, '__cause__': <attribute '__cause__' of 'BaseException' objects>, '__doc__': 'Common base class for all exceptions'}",
              "BaseExceptionGroup": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00B70>, '__str__': <slot wrapper '__str__' of 'BaseExceptionGroup' objects>, '__init__': <slot wrapper '__init__' of 'BaseExceptionGroup' objects>, '__class_getitem__': <method '__class_getitem__' of 'BaseExceptionGroup' objects>, 'derive': <method 'derive' of 'BaseExceptionGroup' objects>, 'split': <method 'split' of 'BaseExceptionGroup' objects>, 'subgroup': <method 'subgroup' of 'BaseExceptionGroup' objects>, 'message': <member 'message' of 'BaseExceptionGroup' objects>, 'exceptions': <member 'exceptions' of 'BaseExceptionGroup' objects>, '__doc__': 'A combination of multiple unrelated exceptions.'}",
              "Exception": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D01D50>, '__init__': <slot wrapper '__init__' of 'Exception' objects>, '__doc__': 'Common base class for all non-exit exceptions.'}",
              "GeneratorExit": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D023D0>, '__init__': <slot wrapper '__init__' of 'GeneratorExit' objects>, '__doc__': 'Request that a generator exit.'}",
              "KeyboardInterrupt": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFE950>, '__init__': <slot wrapper '__init__' of 'KeyboardInterrupt' objects>, '__doc__': 'Program interrupted by user.'}",
              "SystemExit": "{'__init__': <slot wrapper '__init__' of 'SystemExit' objects>, 'code': <member 'code' of 'SystemExit' objects>, '__doc__': 'Request to exit from the interpreter.'}",
              "ArithmeticError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFF170>, '__init__': <slot wrapper '__init__' of 'ArithmeticError' objects>, '__doc__': 'Base class for arithmetic errors.'}",
              "AssertionError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00690>, '__init__': <slot wrapper '__init__' of 'AssertionError' objects>, '__doc__': 'Assertion failed.'}",
              "AttributeError": "{'__str__': <slot wrapper '__str__' of 'AttributeError' objects>, '__init__': <slot wrapper '__init__' of 'AttributeError' objects>, '__getstate__': <method '__getstate__' of 'AttributeError' objects>, '__reduce__': <method '__reduce__' of 'AttributeError' objects>, 'name': <member 'name' of 'AttributeError' objects>, 'obj': <member 'obj' of 'AttributeError' objects>, '__doc__': 'Attribute not found.'}",
              "BufferError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFE610>, '__init__': <slot wrapper '__init__' of 'BufferError' objects>, '__doc__': 'Buffer error.'}",
              "EOFError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFDDF0>, '__init__': <slot wrapper '__init__' of 'EOFError' objects>, '__doc__': 'Read beyond end of file.'}",
              "ImportError": "{'__str__': <slot wrapper '__str__' of 'ImportError' objects>, '__init__': <slot wrapper '__init__' of 'ImportError' objects>, '__reduce__': <method '__reduce__' of 'ImportError' objects>, 'msg': <member 'msg' of 'ImportError' objects>, 'name': <member 'name' of 'ImportError' objects>, 'path': <member 'path' of 'ImportError' objects>, 'name_from': <member 'name_from' of 'ImportError' objects>, '__doc__': \"Import can't find module, or can't find name in module.\"}",
              "LookupError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFFCD0>, '__init__': <slot wrapper '__init__' of 'LookupError' objects>, '__doc__': 'Base class for lookup errors.'}",
              "MemoryError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFEE30>, '__init__': <slot wrapper '__init__' of 'MemoryError' objects>, '__doc__': 'Out of memory.'}",
              "NameError": "{'__str__': <slot wrapper '__str__' of 'NameError' objects>, '__init__': <slot wrapper '__init__' of 'NameError' objects>, 'name': <member 'name' of 'NameError' objects>, '__doc__': 'Name not found globally.'}",
              "OSError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D042B0>, '__str__': <slot wrapper '__str__' of 'OSError' objects>, '__init__': <slot wrapper '__init__' of 'OSError' objects>, '__reduce__': <method '__reduce__' of 'OSError' objects>, 'errno': <member 'errno' of 'OSError' objects>, 'strerror': <member 'strerror' of 'OSError' objects>, 'filename': <member 'filename' of 'OSError' objects>, 'filename2': <member 'filename2' of 'OSError' objects>, 'winerror': <member 'winerror' of 'OSError' objects>, 'characters_written': <attribute 'characters_written' of 'OSError' objects>, '__doc__': 'Base class for I/O related errors.'}",
              "ReferenceError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFF4B0>, '__init__': <slot wrapper '__init__' of 'ReferenceError' objects>, '__doc__': 'Weak ref proxy used after referent went away.'}",
              "RuntimeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02D90>, '__init__': <slot wrapper '__init__' of 'RuntimeError' objects>, '__doc__': 'Unspecified run-time error.'}",
              "StopAsyncIteration": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00350>, '__init__': <slot wrapper '__init__' of 'StopAsyncIteration' objects>, '__doc__': 'Signal the end from iterator.__anext__().'}",
              "StopIteration": "{'__init__': <slot wrapper '__init__' of 'StopIteration' objects>, 'value': <member 'value' of 'StopIteration' objects>, '__doc__': 'Signal the end from iterator.__next__().'}",
              "SyntaxError": "{'__str__': <slot wrapper '__str__' of 'SyntaxError' objects>, '__init__': <slot wrapper '__init__' of 'SyntaxError' objects>, 'msg': <member 'msg' of 'SyntaxError' objects>, 'filename': <member 'filename' of 'SyntaxError' objects>, 'lineno': <member 'lineno' of 'SyntaxError' objects>, 'offset': <member 'offset' of 'SyntaxError' objects>, 'text': <member 'text' of 'SyntaxError' objects>, 'end_lineno': <member 'end_lineno' of 'SyntaxError' objects>, 'end_offset': <member 'end_offset' of 'SyntaxError' objects>, 'print_file_and_line': <member 'print_file_and_line' of 'SyntaxError' objects>, '__doc__': 'Invalid syntax.'}",
              "SystemError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFF7F0>, '__init__': <slot wrapper '__init__' of 'SystemError' objects>, '__doc__': 'Internal error in the Python interpreter.\\n\\nPlease report this to the Python maintainer, along with the traceback,\\nthe Python version, and the hardware/OS platform and version.'}",
              "TypeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFE470>, '__init__': <slot wrapper '__init__' of 'TypeError' objects>, '__doc__': 'Inappropriate argument type.'}",
              "ValueError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D011F0>, '__init__': <slot wrapper '__init__' of 'ValueError' objects>, '__doc__': 'Inappropriate argument value (of correct type).'}",
              "Warning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFDC50>, '__init__': <slot wrapper '__init__' of 'Warning' objects>, '__doc__': 'Base class for warning categories.'}",
              "FloatingPointError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFF990>, '__init__': <slot wrapper '__init__' of 'FloatingPointError' objects>, '__doc__': 'Floating-point operation failed.'}",
              "OverflowError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFDF90>, '__init__': <slot wrapper '__init__' of 'OverflowError' objects>, '__doc__': 'Result too large to be represented.'}",
              "ZeroDivisionError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00830>, '__init__': <slot wrapper '__init__' of 'ZeroDivisionError' objects>, '__doc__': 'Second argument to a division or modulo operation was zero.'}",
              "BytesWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02230>, '__init__': <slot wrapper '__init__' of 'BytesWarning' objects>, '__doc__': 'Base class for warnings about bytes and buffer related problems, mostly\\nrelated to conversion from str or comparing to str.'}",
              "DeprecationWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D009D0>, '__init__': <slot wrapper '__init__' of 'DeprecationWarning' objects>, '__doc__': 'Base class for warnings about deprecated features.'}",
              "EncodingWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00EB0>, '__init__': <slot wrapper '__init__' of 'EncodingWarning' objects>, '__doc__': 'Base class for warnings about encodings.'}",
              "FutureWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D035B0>, '__init__': <slot wrapper '__init__' of 'FutureWarning' objects>, '__doc__': 'Base class for warnings about constructs that will change semantically\\nin the future.'}",
              "ImportWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D028B0>, '__init__': <slot wrapper '__init__' of 'ImportWarning' objects>, '__doc__': 'Base class for warnings about probable mistakes in module imports'}",
              "PendingDeprecationWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFFB30>, '__init__': <slot wrapper '__init__' of 'PendingDeprecationWarning' objects>, '__doc__': 'Base class for warnings about features which will be deprecated\\nin the future.'}",
              "ResourceWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02710>, '__init__': <slot wrapper '__init__' of 'ResourceWarning' objects>, '__doc__': 'Base class for warnings about resource usage.'}",
              "RuntimeWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02F30>, '__init__': <slot wrapper '__init__' of 'RuntimeWarning' objects>, '__doc__': 'Base class for warnings about dubious runtime behavior.'}",
              "SyntaxWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFFE70>, '__init__': <slot wrapper '__init__' of 'SyntaxWarning' objects>, '__doc__': 'Base class for warnings about dubious syntax.'}",
              "UnicodeWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D04110>, '__init__': <slot wrapper '__init__' of 'UnicodeWarning' objects>, '__doc__': 'Base class for warnings about Unicode related problems, mostly\\nrelated to conversion problems.'}",
              "UserWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D03A90>, '__init__': <slot wrapper '__init__' of 'UserWarning' objects>, '__doc__': 'Base class for warnings generated by user code.'}",
              "BlockingIOError": "{'__init__': <slot wrapper '__init__' of 'BlockingIOError' objects>, '__doc__': 'I/O operation would block.'}",
              "ChildProcessError": "{'__init__': <slot wrapper '__init__' of 'ChildProcessError' objects>, '__doc__': 'Child process error.'}",
              "ConnectionError": "{'__init__': <slot wrapper '__init__' of 'ConnectionError' objects>, '__doc__': 'Connection error.'}",
              "FileExistsError": "{'__init__': <slot wrapper '__init__' of 'FileExistsError' objects>, '__doc__': 'File already exists.'}",
              "FileNotFoundError": "{'__init__': <slot wrapper '__init__' of 'FileNotFoundError' objects>, '__doc__': 'File not found.'}",
              "InterruptedError": "{'__init__': <slot wrapper '__init__' of 'InterruptedError' objects>, '__doc__': 'Interrupted by signal.'}",
              "IsADirectoryError": "{'__init__': <slot wrapper '__init__' of 'IsADirectoryError' objects>, '__doc__': \"Operation doesn't work on directories.\"}",
              "NotADirectoryError": "{'__init__': <slot wrapper '__init__' of 'NotADirectoryError' objects>, '__doc__': 'Operation only works on directories.'}",
              "PermissionError": "{'__init__': <slot wrapper '__init__' of 'PermissionError' objects>, '__doc__': 'Not enough permissions.'}",
              "ProcessLookupError": "{'__init__': <slot wrapper '__init__' of 'ProcessLookupError' objects>, '__doc__': 'Process not found.'}",
              "TimeoutError": "{'__init__': <slot wrapper '__init__' of 'TimeoutError' objects>, '__doc__': 'Timeout expired.'}",
              "IndentationError": "{'__init__': <slot wrapper '__init__' of 'IndentationError' objects>, '__doc__': 'Improper indentation.'}",
              "IndexError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D01390>, '__init__': <slot wrapper '__init__' of 'IndexError' objects>, '__doc__': 'Sequence index out of range.'}",
              "KeyError": "{'__str__': <slot wrapper '__str__' of 'KeyError' objects>, '__init__': <slot wrapper '__init__' of 'KeyError' objects>, '__doc__': 'Mapping key not found.'}",
              "ModuleNotFoundError": "{'__init__': <slot wrapper '__init__' of 'ModuleNotFoundError' objects>, '__doc__': 'Module not found.'}",
              "NotImplementedError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFDAB0>, '__init__': <slot wrapper '__init__' of 'NotImplementedError' objects>, '__doc__': \"Method or function hasn't been implemented yet.\"}",
              "RecursionError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D030D0>, '__init__': <slot wrapper '__init__' of 'RecursionError' objects>, '__doc__': 'Recursion limit exceeded.'}",
              "UnboundLocalError": "{'__init__': <slot wrapper '__init__' of 'UnboundLocalError' objects>, '__doc__': 'Local name referenced but not bound to a value.'}",
              "UnicodeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D03410>, '__init__': <slot wrapper '__init__' of 'UnicodeError' objects>, '__doc__': 'Unicode related error.'}",
              "BrokenPipeError": "{'__init__': <slot wrapper '__init__' of 'BrokenPipeError' objects>, '__doc__': 'Broken pipe.'}",
              "ConnectionAbortedError": "{'__init__': <slot wrapper '__init__' of 'ConnectionAbortedError' objects>, '__doc__': 'Connection aborted.'}",
              "ConnectionRefusedError": "{'__init__': <slot wrapper '__init__' of 'ConnectionRefusedError' objects>, '__doc__': 'Connection refused.'}",
              "ConnectionResetError": "{'__init__': <slot wrapper '__init__' of 'ConnectionResetError' objects>, '__doc__': 'Connection reset.'}",
              "TabError": "{'__init__': <slot wrapper '__init__' of 'TabError' objects>, '__doc__': 'Improper mixture of spaces and tabs.'}",
              "UnicodeDecodeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D01870>, '__str__': <slot wrapper '__str__' of 'UnicodeDecodeError' objects>, '__init__': <slot wrapper '__init__' of 'UnicodeDecodeError' objects>, 'encoding': <member 'encoding' of 'UnicodeDecodeError' objects>, 'object': <member 'object' of 'UnicodeDecodeError' objects>, 'start': <member 'start' of 'UnicodeDecodeError' objects>, 'end': <member 'end' of 'UnicodeDecodeError' objects>, 'reason': <member 'reason' of 'UnicodeDecodeError' objects>, '__doc__': 'Unicode decoding error.'}",
              "UnicodeEncodeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02BF0>, '__str__': <slot wrapper '__str__' of 'UnicodeEncodeError' objects>, '__init__': <slot wrapper '__init__' of 'UnicodeEncodeError' objects>, 'encoding': <member 'encoding' of 'UnicodeEncodeError' objects>, 'object': <member 'object' of 'UnicodeEncodeError' objects>, 'start': <member 'start' of 'UnicodeEncodeError' objects>, 'end': <member 'end' of 'UnicodeEncodeError' objects>, 'reason': <member 'reason' of 'UnicodeEncodeError' objects>, '__doc__': 'Unicode encoding error.'}",
              "UnicodeTranslateError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D03F70>, '__str__': <slot wrapper '__str__' of 'UnicodeTranslateError' objects>, '__init__': <slot wrapper '__init__' of 'UnicodeTranslateError' objects>, 'encoding': <member 'encoding' of 'UnicodeTranslateError' objects>, 'object': <member 'object' of 'UnicodeTranslateError' objects>, 'start': <member 'start' of 'UnicodeTranslateError' objects>, 'end': <member 'end' of 'UnicodeTranslateError' objects>, 'reason': <member 'reason' of 'UnicodeTranslateError' objects>, '__doc__': 'Unicode translation error.'}",
              "ExceptionGroup": "{'__module__': 'builtins', '__weakref__': <attribute '__weakref__' of 'ExceptionGroup' objects>, '__doc__': None}",
              "EnvironmentError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D042B0>, '__str__': <slot wrapper '__str__' of 'OSError' objects>, '__init__': <slot wrapper '__init__' of 'OSError' objects>, '__reduce__': <method '__reduce__' of 'OSError' objects>, 'errno': <member 'errno' of 'OSError' objects>, 'strerror': <member 'strerror' of 'OSError' objects>, 'filename': <member 'filename' of 'OSError' objects>, 'filename2': <member 'filename2' of 'OSError' objects>, 'winerror': <member 'winerror' of 'OSError' objects>, 'characters_written': <attribute 'characters_written' of 'OSError' objects>, '__doc__': 'Base class for I/O related errors.'}",
              "IOError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D042B0>, '__str__': <slot wrapper '__str__' of 'OSError' objects>, '__init__': <slot wrapper '__init__' of 'OSError' objects>, '__reduce__': <method '__reduce__' of 'OSError' objects>, 'errno': <member 'errno' of 'OSError' objects>, 'strerror': <member 'strerror' of 'OSError' objects>, 'filename': <member 'filename' of 'OSError' objects>, 'filename2': <member 'filename2' of 'OSError' objects>, 'winerror': <member 'winerror' of 'OSError' objects>, 'characters_written': <attribute 'characters_written' of 'OSError' objects>, '__doc__': 'Base class for I/O related errors.'}",
              "WindowsError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D042B0>, '__str__': <slot wrapper '__str__' of 'OSError' objects>, '__init__': <slot wrapper '__init__' of 'OSError' objects>, '__reduce__': <method '__reduce__' of 'OSError' objects>, 'errno': <member 'errno' of 'OSError' objects>, 'strerror': <member 'strerror' of 'OSError' objects>, 'filename': <member 'filename' of 'OSError' objects>, 'filename2': <member 'filename2' of 'OSError' objects>, 'winerror': <member 'winerror' of 'OSError' objects>, 'characters_written': <attribute 'characters_written' of 'OSError' objects>, '__doc__': 'Base class for I/O related errors.'}",
              "open": "<built-in function open>",
              "quit": {
                "name": "quit",
                "eof": "Ctrl-Z plus Return"
              },
              "exit": {
                "name": "exit",
                "eof": "Ctrl-Z plus Return"
              },
              "copyright": {
                "_Printer__name": "copyright",
                "_Printer__data": "Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved.",
                "_Printer__lines": null,
                "_Printer__filenames": []
              },
              "credits": {
                "_Printer__name": "credits",
                "_Printer__data": "    Thanks to CWI, CNRI, BeOpen, Zope Corporation, the Python Software\n    Foundation, and a cast of thousands for supporting Python\n    development.  See www.python.org for more information.",
                "_Printer__lines": null,
                "_Printer__filenames": []
              },
              "license": {
                "_Printer__name": "license",
                "_Printer__data": "See https://www.python.org/psf/license/",
                "_Printer__lines": null,
                "_Printer__filenames": [
                  "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\..\\LICENSE.txt",
                  "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\..\\LICENSE",
                  "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\LICENSE.txt",
                  "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\LICENSE",
                  ".\\LICENSE.txt",
                  ".\\LICENSE"
                ]
              },
              "help": {}
            },
            "asyncio": {
              "__name__": "asyncio",
              "__doc__": "The asyncio package, tracking PEP 3156.",
              "__package__": "asyncio",
              "__loader__": {
                "name": "asyncio",
                "path": "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\asyncio\\__init__.py"
              },
              "__spec__": {
                "name": "asyncio",
                "loader": {
                  "name": "asyncio",
                  "path": "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\asyncio\\__init__.py"
                },
                "origin": "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\asyncio\\__init__.py",
                "loader_state": null,
                "submodule_search_locations": [
                  "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\asyncio"
                ],
                "_uninitialized_submodules": [],
                "_set_fileattr": true,
                "_cached": "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\asyncio\\__pycache__\\__init__.cpython-312.pyc",
                "_initializing": false
              },
              "__path__": [
                "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\asyncio"
              ],
              "__file__": "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\asyncio\\__init__.py",
              "__cached__": "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\asyncio\\__pycache__\\__init__.cpython-312.pyc",
              "__builtins__": {
                "__name__": "builtins",
                "__doc__": "Built-in functions, types, exceptions, and other objects.\n\nThis module provides direct access to all 'built-in'\nidentifiers of Python; for example, builtins.len is\nthe full name for the built-in function len().\n\nThis module is not normally accessed explicitly by most\napplications, but can be useful in modules that provide\nobjects with the same name as a built-in value, but in\nwhich the built-in of that name is also needed.",
                "__package__": "",
                "__loader__": "{'__module__': '_frozen_importlib', '__doc__': 'Meta path import for built-in modules.\\n\\n    All methods are either class or static methods to avoid the need to\\n    instantiate the class.\\n\\n    ', '_ORIGIN': 'built-in', 'find_spec': <classmethod(<function BuiltinImporter.find_spec at 0x0000021CF1F62F20>)>, 'create_module': <staticmethod(<function BuiltinImporter.create_module at 0x0000021CF1F62FC0>)>, 'exec_module': <staticmethod(<function BuiltinImporter.exec_module at 0x0000021CF1F63060>)>, 'get_code': <classmethod(<function BuiltinImporter.get_code at 0x0000021CF1F631A0>)>, 'get_source': <classmethod(<function BuiltinImporter.get_source at 0x0000021CF1F632E0>)>, 'is_package': <classmethod(<function BuiltinImporter.is_package at 0x0000021CF1F63420>)>, 'load_module': <classmethod(<function _load_module_shim at 0x0000021CF1F622A0>)>, '__dict__': <attribute '__dict__' of 'BuiltinImporter' objects>, '__weakref__': <attribute '__weakref__' of 'BuiltinImporter' objects>}",
                "__spec__": {
                  "name": "builtins",
                  "loader": "{'__module__': '_frozen_importlib', '__doc__': 'Meta path import for built-in modules.\\n\\n    All methods are either class or static methods to avoid the need to\\n    instantiate the class.\\n\\n    ', '_ORIGIN': 'built-in', 'find_spec': <classmethod(<function BuiltinImporter.find_spec at 0x0000021CF1F62F20>)>, 'create_module': <staticmethod(<function BuiltinImporter.create_module at 0x0000021CF1F62FC0>)>, 'exec_module': <staticmethod(<function BuiltinImporter.exec_module at 0x0000021CF1F63060>)>, 'get_code': <classmethod(<function BuiltinImporter.get_code at 0x0000021CF1F631A0>)>, 'get_source': <classmethod(<function BuiltinImporter.get_source at 0x0000021CF1F632E0>)>, 'is_package': <classmethod(<function BuiltinImporter.is_package at 0x0000021CF1F63420>)>, 'load_module': <classmethod(<function _load_module_shim at 0x0000021CF1F622A0>)>, '__dict__': <attribute '__dict__' of 'BuiltinImporter' objects>, '__weakref__': <attribute '__weakref__' of 'BuiltinImporter' objects>}",
                  "origin": "built-in",
                  "loader_state": null,
                  "submodule_search_locations": null,
                  "_uninitialized_submodules": [],
                  "_set_fileattr": false,
                  "_cached": null
                },
                "__build_class__": "<built-in function __build_class__>",
                "__import__": "<built-in function __import__>",
                "abs": "<built-in function abs>",
                "all": "<built-in function all>",
                "any": "<built-in function any>",
                "ascii": "<built-in function ascii>",
                "bin": "<built-in function bin>",
                "breakpoint": "<built-in function breakpoint>",
                "callable": "<built-in function callable>",
                "chr": "<built-in function chr>",
                "compile": "<built-in function compile>",
                "delattr": "<built-in function delattr>",
                "dir": "<built-in function dir>",
                "divmod": "<built-in function divmod>",
                "eval": "<built-in function eval>",
                "exec": "<built-in function exec>",
                "format": "<built-in function format>",
                "getattr": "<built-in function getattr>",
                "globals": "<built-in function globals>",
                "hasattr": "<built-in function hasattr>",
                "hash": "<built-in function hash>",
                "hex": "<built-in function hex>",
                "id": "<built-in function id>",
                "input": "<built-in function input>",
                "isinstance": "<built-in function isinstance>",
                "issubclass": "<built-in function issubclass>",
                "iter": "<built-in function iter>",
                "aiter": "<built-in function aiter>",
                "len": "<built-in function len>",
                "locals": "<built-in function locals>",
                "max": "<built-in function max>",
                "min": "<built-in function min>",
                "next": "<built-in function next>",
                "anext": "<built-in function anext>",
                "oct": "<built-in function oct>",
                "ord": "<built-in function ord>",
                "pow": "<built-in function pow>",
                "print": "<built-in function print>",
                "repr": "<built-in function repr>",
                "round": "<built-in function round>",
                "setattr": "<built-in function setattr>",
                "sorted": "<built-in function sorted>",
                "sum": "<built-in function sum>",
                "vars": "<built-in function vars>",
                "None": null,
                "Ellipsis": "Ellipsis",
                "NotImplemented": "NotImplemented",
                "False": false,
                "True": true,
                "bool": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFA370>, '__repr__': <slot wrapper '__repr__' of 'bool' objects>, '__invert__': <slot wrapper '__invert__' of 'bool' objects>, '__and__': <slot wrapper '__and__' of 'bool' objects>, '__rand__': <slot wrapper '__rand__' of 'bool' objects>, '__xor__': <slot wrapper '__xor__' of 'bool' objects>, '__rxor__': <slot wrapper '__rxor__' of 'bool' objects>, '__or__': <slot wrapper '__or__' of 'bool' objects>, '__ror__': <slot wrapper '__ror__' of 'bool' objects>, '__doc__': 'bool(x) -> bool\\n\\nReturns True when the argument x is true, False otherwise.\\nThe builtins True and False are the only two instances of the class bool.\\nThe class bool is a subclass of the class int, and cannot be subclassed.'}",
                "memoryview": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D06B50>, '__repr__': <slot wrapper '__repr__' of 'memoryview' objects>, '__hash__': <slot wrapper '__hash__' of 'memoryview' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'memoryview' objects>, '__lt__': <slot wrapper '__lt__' of 'memoryview' objects>, '__le__': <slot wrapper '__le__' of 'memoryview' objects>, '__eq__': <slot wrapper '__eq__' of 'memoryview' objects>, '__ne__': <slot wrapper '__ne__' of 'memoryview' objects>, '__gt__': <slot wrapper '__gt__' of 'memoryview' objects>, '__ge__': <slot wrapper '__ge__' of 'memoryview' objects>, '__iter__': <slot wrapper '__iter__' of 'memoryview' objects>, '__buffer__': <slot wrapper '__buffer__' of 'memoryview' objects>, '__release_buffer__': <slot wrapper '__release_buffer__' of 'memoryview' objects>, '__len__': <slot wrapper '__len__' of 'memoryview' objects>, '__getitem__': <slot wrapper '__getitem__' of 'memoryview' objects>, '__setitem__': <slot wrapper '__setitem__' of 'memoryview' objects>, '__delitem__': <slot wrapper '__delitem__' of 'memoryview' objects>, 'release': <method 'release' of 'memoryview' objects>, 'tobytes': <method 'tobytes' of 'memoryview' objects>, 'hex': <method 'hex' of 'memoryview' objects>, 'tolist': <method 'tolist' of 'memoryview' objects>, 'cast': <method 'cast' of 'memoryview' objects>, 'toreadonly': <method 'toreadonly' of 'memoryview' objects>, '_from_flags': <method '_from_flags' of 'memoryview' objects>, '__enter__': <method '__enter__' of 'memoryview' objects>, '__exit__': <method '__exit__' of 'memoryview' objects>, 'obj': <attribute 'obj' of 'memoryview' objects>, 'nbytes': <attribute 'nbytes' of 'memoryview' objects>, 'readonly': <attribute 'readonly' of 'memoryview' objects>, 'itemsize': <attribute 'itemsize' of 'memoryview' objects>, 'format': <attribute 'format' of 'memoryview' objects>, 'ndim': <attribute 'ndim' of 'memoryview' objects>, 'shape': <attribute 'shape' of 'memoryview' objects>, 'strides': <attribute 'strides' of 'memoryview' objects>, 'suboffsets': <attribute 'suboffsets' of 'memoryview' objects>, 'c_contiguous': <attribute 'c_contiguous' of 'memoryview' objects>, 'f_contiguous': <attribute 'f_contiguous' of 'memoryview' objects>, 'contiguous': <attribute 'contiguous' of 'memoryview' objects>, '__doc__': 'Create a new memoryview object which references the given object.'}",
                "bytearray": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFA6B0>, '__repr__': <slot wrapper '__repr__' of 'bytearray' objects>, '__str__': <slot wrapper '__str__' of 'bytearray' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'bytearray' objects>, '__lt__': <slot wrapper '__lt__' of 'bytearray' objects>, '__le__': <slot wrapper '__le__' of 'bytearray' objects>, '__eq__': <slot wrapper '__eq__' of 'bytearray' objects>, '__ne__': <slot wrapper '__ne__' of 'bytearray' objects>, '__gt__': <slot wrapper '__gt__' of 'bytearray' objects>, '__ge__': <slot wrapper '__ge__' of 'bytearray' objects>, '__iter__': <slot wrapper '__iter__' of 'bytearray' objects>, '__init__': <slot wrapper '__init__' of 'bytearray' objects>, '__buffer__': <slot wrapper '__buffer__' of 'bytearray' objects>, '__release_buffer__': <slot wrapper '__release_buffer__' of 'bytearray' objects>, '__mod__': <slot wrapper '__mod__' of 'bytearray' objects>, '__rmod__': <slot wrapper '__rmod__' of 'bytearray' objects>, '__len__': <slot wrapper '__len__' of 'bytearray' objects>, '__getitem__': <slot wrapper '__getitem__' of 'bytearray' objects>, '__setitem__': <slot wrapper '__setitem__' of 'bytearray' objects>, '__delitem__': <slot wrapper '__delitem__' of 'bytearray' objects>, '__add__': <slot wrapper '__add__' of 'bytearray' objects>, '__mul__': <slot wrapper '__mul__' of 'bytearray' objects>, '__rmul__': <slot wrapper '__rmul__' of 'bytearray' objects>, '__contains__': <slot wrapper '__contains__' of 'bytearray' objects>, '__iadd__': <slot wrapper '__iadd__' of 'bytearray' objects>, '__imul__': <slot wrapper '__imul__' of 'bytearray' objects>, '__alloc__': <method '__alloc__' of 'bytearray' objects>, '__reduce__': <method '__reduce__' of 'bytearray' objects>, '__reduce_ex__': <method '__reduce_ex__' of 'bytearray' objects>, '__sizeof__': <method '__sizeof__' of 'bytearray' objects>, 'append': <method 'append' of 'bytearray' objects>, 'capitalize': <method 'capitalize' of 'bytearray' objects>, 'center': <method 'center' of 'bytearray' objects>, 'clear': <method 'clear' of 'bytearray' objects>, 'copy': <method 'copy' of 'bytearray' objects>, 'count': <method 'count' of 'bytearray' objects>, 'decode': <method 'decode' of 'bytearray' objects>, 'endswith': <method 'endswith' of 'bytearray' objects>, 'expandtabs': <method 'expandtabs' of 'bytearray' objects>, 'extend': <method 'extend' of 'bytearray' objects>, 'find': <method 'find' of 'bytearray' objects>, 'fromhex': <method 'fromhex' of 'bytearray' objects>, 'hex': <method 'hex' of 'bytearray' objects>, 'index': <method 'index' of 'bytearray' objects>, 'insert': <method 'insert' of 'bytearray' objects>, 'isalnum': <method 'isalnum' of 'bytearray' objects>, 'isalpha': <method 'isalpha' of 'bytearray' objects>, 'isascii': <method 'isascii' of 'bytearray' objects>, 'isdigit': <method 'isdigit' of 'bytearray' objects>, 'islower': <method 'islower' of 'bytearray' objects>, 'isspace': <method 'isspace' of 'bytearray' objects>, 'istitle': <method 'istitle' of 'bytearray' objects>, 'isupper': <method 'isupper' of 'bytearray' objects>, 'join': <method 'join' of 'bytearray' objects>, 'ljust': <method 'ljust' of 'bytearray' objects>, 'lower': <method 'lower' of 'bytearray' objects>, 'lstrip': <method 'lstrip' of 'bytearray' objects>, 'maketrans': <staticmethod(<built-in method maketrans of type object at 0x00007FF997CFA6B0>)>, 'partition': <method 'partition' of 'bytearray' objects>, 'pop': <method 'pop' of 'bytearray' objects>, 'remove': <method 'remove' of 'bytearray' objects>, 'replace': <method 'replace' of 'bytearray' objects>, 'removeprefix': <method 'removeprefix' of 'bytearray' objects>, 'removesuffix': <method 'removesuffix' of 'bytearray' objects>, 'reverse': <method 'reverse' of 'bytearray' objects>, 'rfind': <method 'rfind' of 'bytearray' objects>, 'rindex': <method 'rindex' of 'bytearray' objects>, 'rjust': <method 'rjust' of 'bytearray' objects>, 'rpartition': <method 'rpartition' of 'bytearray' objects>, 'rsplit': <method 'rsplit' of 'bytearray' objects>, 'rstrip': <method 'rstrip' of 'bytearray' objects>, 'split': <method 'split' of 'bytearray' objects>, 'splitlines': <method 'splitlines' of 'bytearray' objects>, 'startswith': <method 'startswith' of 'bytearray' objects>, 'strip': <method 'strip' of 'bytearray' objects>, 'swapcase': <method 'swapcase' of 'bytearray' objects>, 'title': <method 'title' of 'bytearray' objects>, 'translate': <method 'translate' of 'bytearray' objects>, 'upper': <method 'upper' of 'bytearray' objects>, 'zfill': <method 'zfill' of 'bytearray' objects>, '__doc__': 'bytearray(iterable_of_ints) -> bytearray\\nbytearray(string, encoding[, errors]) -> bytearray\\nbytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer\\nbytearray(int) -> bytes array of size given by the parameter initialized with null bytes\\nbytearray() -> empty bytes array\\n\\nConstruct a mutable bytearray object from:\\n  - an iterable yielding integers in range(256)\\n  - a text string encoded using the specified encoding\\n  - a bytes or a buffer object\\n  - any object implementing the buffer API.\\n  - an integer', '__hash__': None}",
                "bytes": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFA9F0>, '__repr__': <slot wrapper '__repr__' of 'bytes' objects>, '__hash__': <slot wrapper '__hash__' of 'bytes' objects>, '__str__': <slot wrapper '__str__' of 'bytes' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'bytes' objects>, '__lt__': <slot wrapper '__lt__' of 'bytes' objects>, '__le__': <slot wrapper '__le__' of 'bytes' objects>, '__eq__': <slot wrapper '__eq__' of 'bytes' objects>, '__ne__': <slot wrapper '__ne__' of 'bytes' objects>, '__gt__': <slot wrapper '__gt__' of 'bytes' objects>, '__ge__': <slot wrapper '__ge__' of 'bytes' objects>, '__iter__': <slot wrapper '__iter__' of 'bytes' objects>, '__buffer__': <slot wrapper '__buffer__' of 'bytes' objects>, '__mod__': <slot wrapper '__mod__' of 'bytes' objects>, '__rmod__': <slot wrapper '__rmod__' of 'bytes' objects>, '__len__': <slot wrapper '__len__' of 'bytes' objects>, '__getitem__': <slot wrapper '__getitem__' of 'bytes' objects>, '__add__': <slot wrapper '__add__' of 'bytes' objects>, '__mul__': <slot wrapper '__mul__' of 'bytes' objects>, '__rmul__': <slot wrapper '__rmul__' of 'bytes' objects>, '__contains__': <slot wrapper '__contains__' of 'bytes' objects>, '__getnewargs__': <method '__getnewargs__' of 'bytes' objects>, '__bytes__': <method '__bytes__' of 'bytes' objects>, 'capitalize': <method 'capitalize' of 'bytes' objects>, 'center': <method 'center' of 'bytes' objects>, 'count': <method 'count' of 'bytes' objects>, 'decode': <method 'decode' of 'bytes' objects>, 'endswith': <method 'endswith' of 'bytes' objects>, 'expandtabs': <method 'expandtabs' of 'bytes' objects>, 'find': <method 'find' of 'bytes' objects>, 'fromhex': <method 'fromhex' of 'bytes' objects>, 'hex': <method 'hex' of 'bytes' objects>, 'index': <method 'index' of 'bytes' objects>, 'isalnum': <method 'isalnum' of 'bytes' objects>, 'isalpha': <method 'isalpha' of 'bytes' objects>, 'isascii': <method 'isascii' of 'bytes' objects>, 'isdigit': <method 'isdigit' of 'bytes' objects>, 'islower': <method 'islower' of 'bytes' objects>, 'isspace': <method 'isspace' of 'bytes' objects>, 'istitle': <method 'istitle' of 'bytes' objects>, 'isupper': <method 'isupper' of 'bytes' objects>, 'join': <method 'join' of 'bytes' objects>, 'ljust': <method 'ljust' of 'bytes' objects>, 'lower': <method 'lower' of 'bytes' objects>, 'lstrip': <method 'lstrip' of 'bytes' objects>, 'maketrans': <staticmethod(<built-in method maketrans of type object at 0x00007FF997CFA9F0>)>, 'partition': <method 'partition' of 'bytes' objects>, 'replace': <method 'replace' of 'bytes' objects>, 'removeprefix': <method 'removeprefix' of 'bytes' objects>, 'removesuffix': <method 'removesuffix' of 'bytes' objects>, 'rfind': <method 'rfind' of 'bytes' objects>, 'rindex': <method 'rindex' of 'bytes' objects>, 'rjust': <method 'rjust' of 'bytes' objects>, 'rpartition': <method 'rpartition' of 'bytes' objects>, 'rsplit': <method 'rsplit' of 'bytes' objects>, 'rstrip': <method 'rstrip' of 'bytes' objects>, 'split': <method 'split' of 'bytes' objects>, 'splitlines': <method 'splitlines' of 'bytes' objects>, 'startswith': <method 'startswith' of 'bytes' objects>, 'strip': <method 'strip' of 'bytes' objects>, 'swapcase': <method 'swapcase' of 'bytes' objects>, 'title': <method 'title' of 'bytes' objects>, 'translate': <method 'translate' of 'bytes' objects>, 'upper': <method 'upper' of 'bytes' objects>, 'zfill': <method 'zfill' of 'bytes' objects>, '__doc__': 'bytes(iterable_of_ints) -> bytes\\nbytes(string, encoding[, errors]) -> bytes\\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\\nbytes() -> empty bytes object\\n\\nConstruct an immutable array of bytes from:\\n  - an iterable yielding integers in range(256)\\n  - a text string encoded using the specified encoding\\n  - any object implementing the buffer API.\\n  - an integer'}",
                "classmethod": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D04930>, '__repr__': <slot wrapper '__repr__' of 'classmethod' objects>, '__get__': <slot wrapper '__get__' of 'classmethod' objects>, '__init__': <slot wrapper '__init__' of 'classmethod' objects>, '__func__': <member '__func__' of 'classmethod' objects>, '__wrapped__': <member '__wrapped__' of 'classmethod' objects>, '__isabstractmethod__': <attribute '__isabstractmethod__' of 'classmethod' objects>, '__dict__': <attribute '__dict__' of 'classmethod' objects>, '__doc__': 'classmethod(function) -> method\\n\\nConvert a function to be a class method.\\n\\nA class method receives the class as implicit first argument,\\njust like an instance method receives the instance.\\nTo declare a class method, use this idiom:\\n\\n  class C:\\n      @classmethod\\n      def f(cls, arg1, arg2, argN):\\n          ...\\n\\nIt can be called either on the class (e.g. C.f()) or on an instance\\n(e.g. C().f()).  The instance is ignored except for its class.\\nIf a class method is called for a derived class, the derived class\\nobject is passed as the implied first argument.\\n\\nClass methods are different than C++ or Java static methods.\\nIf you want those, see the staticmethod builtin.'}",
                "complex": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFB6F0>, '__repr__': <slot wrapper '__repr__' of 'complex' objects>, '__hash__': <slot wrapper '__hash__' of 'complex' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'complex' objects>, '__lt__': <slot wrapper '__lt__' of 'complex' objects>, '__le__': <slot wrapper '__le__' of 'complex' objects>, '__eq__': <slot wrapper '__eq__' of 'complex' objects>, '__ne__': <slot wrapper '__ne__' of 'complex' objects>, '__gt__': <slot wrapper '__gt__' of 'complex' objects>, '__ge__': <slot wrapper '__ge__' of 'complex' objects>, '__add__': <slot wrapper '__add__' of 'complex' objects>, '__radd__': <slot wrapper '__radd__' of 'complex' objects>, '__sub__': <slot wrapper '__sub__' of 'complex' objects>, '__rsub__': <slot wrapper '__rsub__' of 'complex' objects>, '__mul__': <slot wrapper '__mul__' of 'complex' objects>, '__rmul__': <slot wrapper '__rmul__' of 'complex' objects>, '__pow__': <slot wrapper '__pow__' of 'complex' objects>, '__rpow__': <slot wrapper '__rpow__' of 'complex' objects>, '__neg__': <slot wrapper '__neg__' of 'complex' objects>, '__pos__': <slot wrapper '__pos__' of 'complex' objects>, '__abs__': <slot wrapper '__abs__' of 'complex' objects>, '__bool__': <slot wrapper '__bool__' of 'complex' objects>, '__truediv__': <slot wrapper '__truediv__' of 'complex' objects>, '__rtruediv__': <slot wrapper '__rtruediv__' of 'complex' objects>, 'conjugate': <method 'conjugate' of 'complex' objects>, '__complex__': <method '__complex__' of 'complex' objects>, '__getnewargs__': <method '__getnewargs__' of 'complex' objects>, '__format__': <method '__format__' of 'complex' objects>, 'real': <member 'real' of 'complex' objects>, 'imag': <member 'imag' of 'complex' objects>, '__doc__': \"Create a complex number from a string or numbers.\\n\\nIf a string is given, parse it as a complex number.\\nIf a single number is given, convert it to a complex number.\\nIf the 'real' or 'imag' arguments are given, create a complex number\\nwith the specified real and imaginary components.\"}",
                "dict": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFD430>, '__repr__': <slot wrapper '__repr__' of 'dict' objects>, '__hash__': None, '__getattribute__': <slot wrapper '__getattribute__' of 'dict' objects>, '__lt__': <slot wrapper '__lt__' of 'dict' objects>, '__le__': <slot wrapper '__le__' of 'dict' objects>, '__eq__': <slot wrapper '__eq__' of 'dict' objects>, '__ne__': <slot wrapper '__ne__' of 'dict' objects>, '__gt__': <slot wrapper '__gt__' of 'dict' objects>, '__ge__': <slot wrapper '__ge__' of 'dict' objects>, '__iter__': <slot wrapper '__iter__' of 'dict' objects>, '__init__': <slot wrapper '__init__' of 'dict' objects>, '__or__': <slot wrapper '__or__' of 'dict' objects>, '__ror__': <slot wrapper '__ror__' of 'dict' objects>, '__ior__': <slot wrapper '__ior__' of 'dict' objects>, '__len__': <slot wrapper '__len__' of 'dict' objects>, '__getitem__': <method '__getitem__' of 'dict' objects>, '__setitem__': <slot wrapper '__setitem__' of 'dict' objects>, '__delitem__': <slot wrapper '__delitem__' of 'dict' objects>, '__contains__': <method '__contains__' of 'dict' objects>, '__sizeof__': <method '__sizeof__' of 'dict' objects>, 'get': <method 'get' of 'dict' objects>, 'setdefault': <method 'setdefault' of 'dict' objects>, 'pop': <method 'pop' of 'dict' objects>, 'popitem': <method 'popitem' of 'dict' objects>, 'keys': <method 'keys' of 'dict' objects>, 'items': <method 'items' of 'dict' objects>, 'values': <method 'values' of 'dict' objects>, 'update': <method 'update' of 'dict' objects>, 'fromkeys': <method 'fromkeys' of 'dict' objects>, 'clear': <method 'clear' of 'dict' objects>, 'copy': <method 'copy' of 'dict' objects>, '__reversed__': <method '__reversed__' of 'dict' objects>, '__class_getitem__': <method '__class_getitem__' of 'dict' objects>, '__doc__': \"dict() -> new empty dictionary\\ndict(mapping) -> new dictionary initialized from a mapping object's\\n    (key, value) pairs\\ndict(iterable) -> new dictionary initialized as if via:\\n    d = {}\\n    for k, v in iterable:\\n        d[k] = v\\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\\n    in the keyword argument list.  For example:  dict(one=1, two=2)\"}",
                "enumerate": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFD770>, '__getattribute__': <slot wrapper '__getattribute__' of 'enumerate' objects>, '__iter__': <slot wrapper '__iter__' of 'enumerate' objects>, '__next__': <slot wrapper '__next__' of 'enumerate' objects>, '__reduce__': <method '__reduce__' of 'enumerate' objects>, '__class_getitem__': <method '__class_getitem__' of 'enumerate' objects>, '__doc__': 'Return an enumerate object.\\n\\n  iterable\\n    an object supporting iteration\\n\\nThe enumerate object yields pairs containing a count (from start, which\\ndefaults to zero) and a value yielded by the iterable argument.\\n\\nenumerate is useful for obtaining an indexed list:\\n    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...'}",
                "filter": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D0A930>, '__getattribute__': <slot wrapper '__getattribute__' of 'filter' objects>, '__iter__': <slot wrapper '__iter__' of 'filter' objects>, '__next__': <slot wrapper '__next__' of 'filter' objects>, '__reduce__': <method '__reduce__' of 'filter' objects>, '__doc__': 'filter(function or None, iterable) --> filter object\\n\\nReturn an iterator yielding those items of iterable for which function(item)\\nis true. If function is None, return the items that are true.'}",
                "float": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D045F0>, '__repr__': <slot wrapper '__repr__' of 'float' objects>, '__hash__': <slot wrapper '__hash__' of 'float' objects>, '__lt__': <slot wrapper '__lt__' of 'float' objects>, '__le__': <slot wrapper '__le__' of 'float' objects>, '__eq__': <slot wrapper '__eq__' of 'float' objects>, '__ne__': <slot wrapper '__ne__' of 'float' objects>, '__gt__': <slot wrapper '__gt__' of 'float' objects>, '__ge__': <slot wrapper '__ge__' of 'float' objects>, '__add__': <slot wrapper '__add__' of 'float' objects>, '__radd__': <slot wrapper '__radd__' of 'float' objects>, '__sub__': <slot wrapper '__sub__' of 'float' objects>, '__rsub__': <slot wrapper '__rsub__' of 'float' objects>, '__mul__': <slot wrapper '__mul__' of 'float' objects>, '__rmul__': <slot wrapper '__rmul__' of 'float' objects>, '__mod__': <slot wrapper '__mod__' of 'float' objects>, '__rmod__': <slot wrapper '__rmod__' of 'float' objects>, '__divmod__': <slot wrapper '__divmod__' of 'float' objects>, '__rdivmod__': <slot wrapper '__rdivmod__' of 'float' objects>, '__pow__': <slot wrapper '__pow__' of 'float' objects>, '__rpow__': <slot wrapper '__rpow__' of 'float' objects>, '__neg__': <slot wrapper '__neg__' of 'float' objects>, '__pos__': <slot wrapper '__pos__' of 'float' objects>, '__abs__': <slot wrapper '__abs__' of 'float' objects>, '__bool__': <slot wrapper '__bool__' of 'float' objects>, '__int__': <slot wrapper '__int__' of 'float' objects>, '__float__': <slot wrapper '__float__' of 'float' objects>, '__floordiv__': <slot wrapper '__floordiv__' of 'float' objects>, '__rfloordiv__': <slot wrapper '__rfloordiv__' of 'float' objects>, '__truediv__': <slot wrapper '__truediv__' of 'float' objects>, '__rtruediv__': <slot wrapper '__rtruediv__' of 'float' objects>, 'conjugate': <method 'conjugate' of 'float' objects>, '__trunc__': <method '__trunc__' of 'float' objects>, '__floor__': <method '__floor__' of 'float' objects>, '__ceil__': <method '__ceil__' of 'float' objects>, '__round__': <method '__round__' of 'float' objects>, 'as_integer_ratio': <method 'as_integer_ratio' of 'float' objects>, 'fromhex': <method 'fromhex' of 'float' objects>, 'hex': <method 'hex' of 'float' objects>, 'is_integer': <method 'is_integer' of 'float' objects>, '__getnewargs__': <method '__getnewargs__' of 'float' objects>, '__getformat__': <method '__getformat__' of 'float' objects>, '__format__': <method '__format__' of 'float' objects>, 'real': <attribute 'real' of 'float' objects>, 'imag': <attribute 'imag' of 'float' objects>, '__doc__': 'Convert a string or number to a floating-point number, if possible.'}",
                "frozenset": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D08BF0>, '__repr__': <slot wrapper '__repr__' of 'frozenset' objects>, '__hash__': <slot wrapper '__hash__' of 'frozenset' objects>, '__lt__': <slot wrapper '__lt__' of 'frozenset' objects>, '__le__': <slot wrapper '__le__' of 'frozenset' objects>, '__eq__': <slot wrapper '__eq__' of 'frozenset' objects>, '__ne__': <slot wrapper '__ne__' of 'frozenset' objects>, '__gt__': <slot wrapper '__gt__' of 'frozenset' objects>, '__ge__': <slot wrapper '__ge__' of 'frozenset' objects>, '__iter__': <slot wrapper '__iter__' of 'frozenset' objects>, '__sub__': <slot wrapper '__sub__' of 'frozenset' objects>, '__rsub__': <slot wrapper '__rsub__' of 'frozenset' objects>, '__and__': <slot wrapper '__and__' of 'frozenset' objects>, '__rand__': <slot wrapper '__rand__' of 'frozenset' objects>, '__xor__': <slot wrapper '__xor__' of 'frozenset' objects>, '__rxor__': <slot wrapper '__rxor__' of 'frozenset' objects>, '__or__': <slot wrapper '__or__' of 'frozenset' objects>, '__ror__': <slot wrapper '__ror__' of 'frozenset' objects>, '__len__': <slot wrapper '__len__' of 'frozenset' objects>, '__contains__': <method '__contains__' of 'frozenset' objects>, 'copy': <method 'copy' of 'frozenset' objects>, 'difference': <method 'difference' of 'frozenset' objects>, 'intersection': <method 'intersection' of 'frozenset' objects>, 'isdisjoint': <method 'isdisjoint' of 'frozenset' objects>, 'issubset': <method 'issubset' of 'frozenset' objects>, 'issuperset': <method 'issuperset' of 'frozenset' objects>, '__reduce__': <method '__reduce__' of 'frozenset' objects>, '__sizeof__': <method '__sizeof__' of 'frozenset' objects>, 'symmetric_difference': <method 'symmetric_difference' of 'frozenset' objects>, 'union': <method 'union' of 'frozenset' objects>, '__class_getitem__': <method '__class_getitem__' of 'frozenset' objects>, '__doc__': 'frozenset() -> empty frozenset object\\nfrozenset(iterable) -> frozenset object\\n\\nBuild an immutable unordered collection of unique elements.'}",
                "property": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFB890>, '__getattribute__': <slot wrapper '__getattribute__' of 'property' objects>, '__get__': <slot wrapper '__get__' of 'property' objects>, '__set__': <slot wrapper '__set__' of 'property' objects>, '__delete__': <slot wrapper '__delete__' of 'property' objects>, '__init__': <slot wrapper '__init__' of 'property' objects>, 'getter': <method 'getter' of 'property' objects>, 'setter': <method 'setter' of 'property' objects>, 'deleter': <method 'deleter' of 'property' objects>, '__set_name__': <method '__set_name__' of 'property' objects>, 'fget': <member 'fget' of 'property' objects>, 'fset': <member 'fset' of 'property' objects>, 'fdel': <member 'fdel' of 'property' objects>, '__doc__': <member '__doc__' of 'property' objects>, '__isabstractmethod__': <attribute '__isabstractmethod__' of 'property' objects>}",
                "int": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D06810>, '__repr__': <slot wrapper '__repr__' of 'int' objects>, '__hash__': <slot wrapper '__hash__' of 'int' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'int' objects>, '__lt__': <slot wrapper '__lt__' of 'int' objects>, '__le__': <slot wrapper '__le__' of 'int' objects>, '__eq__': <slot wrapper '__eq__' of 'int' objects>, '__ne__': <slot wrapper '__ne__' of 'int' objects>, '__gt__': <slot wrapper '__gt__' of 'int' objects>, '__ge__': <slot wrapper '__ge__' of 'int' objects>, '__add__': <slot wrapper '__add__' of 'int' objects>, '__radd__': <slot wrapper '__radd__' of 'int' objects>, '__sub__': <slot wrapper '__sub__' of 'int' objects>, '__rsub__': <slot wrapper '__rsub__' of 'int' objects>, '__mul__': <slot wrapper '__mul__' of 'int' objects>, '__rmul__': <slot wrapper '__rmul__' of 'int' objects>, '__mod__': <slot wrapper '__mod__' of 'int' objects>, '__rmod__': <slot wrapper '__rmod__' of 'int' objects>, '__divmod__': <slot wrapper '__divmod__' of 'int' objects>, '__rdivmod__': <slot wrapper '__rdivmod__' of 'int' objects>, '__pow__': <slot wrapper '__pow__' of 'int' objects>, '__rpow__': <slot wrapper '__rpow__' of 'int' objects>, '__neg__': <slot wrapper '__neg__' of 'int' objects>, '__pos__': <slot wrapper '__pos__' of 'int' objects>, '__abs__': <slot wrapper '__abs__' of 'int' objects>, '__bool__': <slot wrapper '__bool__' of 'int' objects>, '__invert__': <slot wrapper '__invert__' of 'int' objects>, '__lshift__': <slot wrapper '__lshift__' of 'int' objects>, '__rlshift__': <slot wrapper '__rlshift__' of 'int' objects>, '__rshift__': <slot wrapper '__rshift__' of 'int' objects>, '__rrshift__': <slot wrapper '__rrshift__' of 'int' objects>, '__and__': <slot wrapper '__and__' of 'int' objects>, '__rand__': <slot wrapper '__rand__' of 'int' objects>, '__xor__': <slot wrapper '__xor__' of 'int' objects>, '__rxor__': <slot wrapper '__rxor__' of 'int' objects>, '__or__': <slot wrapper '__or__' of 'int' objects>, '__ror__': <slot wrapper '__ror__' of 'int' objects>, '__int__': <slot wrapper '__int__' of 'int' objects>, '__float__': <slot wrapper '__float__' of 'int' objects>, '__floordiv__': <slot wrapper '__floordiv__' of 'int' objects>, '__rfloordiv__': <slot wrapper '__rfloordiv__' of 'int' objects>, '__truediv__': <slot wrapper '__truediv__' of 'int' objects>, '__rtruediv__': <slot wrapper '__rtruediv__' of 'int' objects>, '__index__': <slot wrapper '__index__' of 'int' objects>, 'conjugate': <method 'conjugate' of 'int' objects>, 'bit_length': <method 'bit_length' of 'int' objects>, 'bit_count': <method 'bit_count' of 'int' objects>, 'to_bytes': <method 'to_bytes' of 'int' objects>, 'from_bytes': <method 'from_bytes' of 'int' objects>, 'as_integer_ratio': <method 'as_integer_ratio' of 'int' objects>, '__trunc__': <method '__trunc__' of 'int' objects>, '__floor__': <method '__floor__' of 'int' objects>, '__ceil__': <method '__ceil__' of 'int' objects>, '__round__': <method '__round__' of 'int' objects>, '__getnewargs__': <method '__getnewargs__' of 'int' objects>, '__format__': <method '__format__' of 'int' objects>, '__sizeof__': <method '__sizeof__' of 'int' objects>, 'is_integer': <method 'is_integer' of 'int' objects>, 'real': <attribute 'real' of 'int' objects>, 'imag': <attribute 'imag' of 'int' objects>, 'numerator': <attribute 'numerator' of 'int' objects>, 'denominator': <attribute 'denominator' of 'int' objects>, '__doc__': \"int([x]) -> integer\\nint(x, base=10) -> integer\\n\\nConvert a number or string to an integer, or return 0 if no arguments\\nare given.  If x is a number, return x.__int__().  For floating-point\\nnumbers, this truncates towards zero.\\n\\nIf x is not a number or if base is given, then x must be a string,\\nbytes, or bytearray instance representing an integer literal in the\\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\\nBase 0 means to interpret the base from the string as an integer literal.\\n>>> int('0b100', base=0)\\n4\"}",
                "list": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D06670>, '__repr__': <slot wrapper '__repr__' of 'list' objects>, '__hash__': None, '__getattribute__': <slot wrapper '__getattribute__' of 'list' objects>, '__lt__': <slot wrapper '__lt__' of 'list' objects>, '__le__': <slot wrapper '__le__' of 'list' objects>, '__eq__': <slot wrapper '__eq__' of 'list' objects>, '__ne__': <slot wrapper '__ne__' of 'list' objects>, '__gt__': <slot wrapper '__gt__' of 'list' objects>, '__ge__': <slot wrapper '__ge__' of 'list' objects>, '__iter__': <slot wrapper '__iter__' of 'list' objects>, '__init__': <slot wrapper '__init__' of 'list' objects>, '__len__': <slot wrapper '__len__' of 'list' objects>, '__getitem__': <method '__getitem__' of 'list' objects>, '__setitem__': <slot wrapper '__setitem__' of 'list' objects>, '__delitem__': <slot wrapper '__delitem__' of 'list' objects>, '__add__': <slot wrapper '__add__' of 'list' objects>, '__mul__': <slot wrapper '__mul__' of 'list' objects>, '__rmul__': <slot wrapper '__rmul__' of 'list' objects>, '__contains__': <slot wrapper '__contains__' of 'list' objects>, '__iadd__': <slot wrapper '__iadd__' of 'list' objects>, '__imul__': <slot wrapper '__imul__' of 'list' objects>, '__reversed__': <method '__reversed__' of 'list' objects>, '__sizeof__': <method '__sizeof__' of 'list' objects>, 'clear': <method 'clear' of 'list' objects>, 'copy': <method 'copy' of 'list' objects>, 'append': <method 'append' of 'list' objects>, 'insert': <method 'insert' of 'list' objects>, 'extend': <method 'extend' of 'list' objects>, 'pop': <method 'pop' of 'list' objects>, 'remove': <method 'remove' of 'list' objects>, 'index': <method 'index' of 'list' objects>, 'count': <method 'count' of 'list' objects>, 'reverse': <method 'reverse' of 'list' objects>, 'sort': <method 'sort' of 'list' objects>, '__class_getitem__': <method '__class_getitem__' of 'list' objects>, '__doc__': 'Built-in mutable sequence.\\n\\nIf no argument is given, the constructor creates a new empty list.\\nThe argument must be an iterable if specified.'}",
                "map": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D0AAD0>, '__getattribute__': <slot wrapper '__getattribute__' of 'map' objects>, '__iter__': <slot wrapper '__iter__' of 'map' objects>, '__next__': <slot wrapper '__next__' of 'map' objects>, '__reduce__': <method '__reduce__' of 'map' objects>, '__doc__': 'map(func, *iterables) --> map object\\n\\nMake an iterator that computes the function using arguments from\\neach of the iterables.  Stops when the shortest iterable is exhausted.'}",
                "object": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D09750>, '__repr__': <slot wrapper '__repr__' of 'object' objects>, '__hash__': <slot wrapper '__hash__' of 'object' objects>, '__str__': <slot wrapper '__str__' of 'object' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'object' objects>, '__setattr__': <slot wrapper '__setattr__' of 'object' objects>, '__delattr__': <slot wrapper '__delattr__' of 'object' objects>, '__lt__': <slot wrapper '__lt__' of 'object' objects>, '__le__': <slot wrapper '__le__' of 'object' objects>, '__eq__': <slot wrapper '__eq__' of 'object' objects>, '__ne__': <slot wrapper '__ne__' of 'object' objects>, '__gt__': <slot wrapper '__gt__' of 'object' objects>, '__ge__': <slot wrapper '__ge__' of 'object' objects>, '__init__': <slot wrapper '__init__' of 'object' objects>, '__reduce_ex__': <method '__reduce_ex__' of 'object' objects>, '__reduce__': <method '__reduce__' of 'object' objects>, '__getstate__': <method '__getstate__' of 'object' objects>, '__subclasshook__': <method '__subclasshook__' of 'object' objects>, '__init_subclass__': <method '__init_subclass__' of 'object' objects>, '__format__': <method '__format__' of 'object' objects>, '__sizeof__': <method '__sizeof__' of 'object' objects>, '__dir__': <method '__dir__' of 'object' objects>, '__class__': <attribute '__class__' of 'object' objects>, '__doc__': 'The base class of the class hierarchy.\\n\\nWhen called, it accepts no arguments and returns a new featureless\\ninstance that has no instance attributes and cannot be given any.\\n'}",
                "range": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D083D0>, '__repr__': <slot wrapper '__repr__' of 'range' objects>, '__hash__': <slot wrapper '__hash__' of 'range' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'range' objects>, '__lt__': <slot wrapper '__lt__' of 'range' objects>, '__le__': <slot wrapper '__le__' of 'range' objects>, '__eq__': <slot wrapper '__eq__' of 'range' objects>, '__ne__': <slot wrapper '__ne__' of 'range' objects>, '__gt__': <slot wrapper '__gt__' of 'range' objects>, '__ge__': <slot wrapper '__ge__' of 'range' objects>, '__iter__': <slot wrapper '__iter__' of 'range' objects>, '__bool__': <slot wrapper '__bool__' of 'range' objects>, '__len__': <slot wrapper '__len__' of 'range' objects>, '__getitem__': <slot wrapper '__getitem__' of 'range' objects>, '__contains__': <slot wrapper '__contains__' of 'range' objects>, '__reversed__': <method '__reversed__' of 'range' objects>, '__reduce__': <method '__reduce__' of 'range' objects>, 'count': <method 'count' of 'range' objects>, 'index': <method 'index' of 'range' objects>, 'start': <member 'start' of 'range' objects>, 'stop': <member 'stop' of 'range' objects>, 'step': <member 'step' of 'range' objects>, '__doc__': 'range(stop) -> range object\\nrange(start, stop[, step]) -> range object\\n\\nReturn an object that produces a sequence of integers from start (inclusive)\\nto stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\\nstart defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\\nThese are exactly the valid indices for a list of 4 elements.\\nWhen step is given, it specifies the increment (or decrement).'}",
                "reversed": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFD5D0>, '__getattribute__': <slot wrapper '__getattribute__' of 'reversed' objects>, '__iter__': <slot wrapper '__iter__' of 'reversed' objects>, '__next__': <slot wrapper '__next__' of 'reversed' objects>, '__length_hint__': <method '__length_hint__' of 'reversed' objects>, '__reduce__': <method '__reduce__' of 'reversed' objects>, '__setstate__': <method '__setstate__' of 'reversed' objects>, '__doc__': 'Return a reverse iterator over the values of the given sequence.'}",
                "set": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D08A50>, '__repr__': <slot wrapper '__repr__' of 'set' objects>, '__hash__': None, '__getattribute__': <slot wrapper '__getattribute__' of 'set' objects>, '__lt__': <slot wrapper '__lt__' of 'set' objects>, '__le__': <slot wrapper '__le__' of 'set' objects>, '__eq__': <slot wrapper '__eq__' of 'set' objects>, '__ne__': <slot wrapper '__ne__' of 'set' objects>, '__gt__': <slot wrapper '__gt__' of 'set' objects>, '__ge__': <slot wrapper '__ge__' of 'set' objects>, '__iter__': <slot wrapper '__iter__' of 'set' objects>, '__init__': <slot wrapper '__init__' of 'set' objects>, '__sub__': <slot wrapper '__sub__' of 'set' objects>, '__rsub__': <slot wrapper '__rsub__' of 'set' objects>, '__and__': <slot wrapper '__and__' of 'set' objects>, '__rand__': <slot wrapper '__rand__' of 'set' objects>, '__xor__': <slot wrapper '__xor__' of 'set' objects>, '__rxor__': <slot wrapper '__rxor__' of 'set' objects>, '__or__': <slot wrapper '__or__' of 'set' objects>, '__ror__': <slot wrapper '__ror__' of 'set' objects>, '__isub__': <slot wrapper '__isub__' of 'set' objects>, '__iand__': <slot wrapper '__iand__' of 'set' objects>, '__ixor__': <slot wrapper '__ixor__' of 'set' objects>, '__ior__': <slot wrapper '__ior__' of 'set' objects>, '__len__': <slot wrapper '__len__' of 'set' objects>, '__contains__': <method '__contains__' of 'set' objects>, 'add': <method 'add' of 'set' objects>, 'clear': <method 'clear' of 'set' objects>, 'copy': <method 'copy' of 'set' objects>, 'discard': <method 'discard' of 'set' objects>, 'difference': <method 'difference' of 'set' objects>, 'difference_update': <method 'difference_update' of 'set' objects>, 'intersection': <method 'intersection' of 'set' objects>, 'intersection_update': <method 'intersection_update' of 'set' objects>, 'isdisjoint': <method 'isdisjoint' of 'set' objects>, 'issubset': <method 'issubset' of 'set' objects>, 'issuperset': <method 'issuperset' of 'set' objects>, 'pop': <method 'pop' of 'set' objects>, '__reduce__': <method '__reduce__' of 'set' objects>, 'remove': <method 'remove' of 'set' objects>, '__sizeof__': <method '__sizeof__' of 'set' objects>, 'symmetric_difference': <method 'symmetric_difference' of 'set' objects>, 'symmetric_difference_update': <method 'symmetric_difference_update' of 'set' objects>, 'union': <method 'union' of 'set' objects>, 'update': <method 'update' of 'set' objects>, '__class_getitem__': <method '__class_getitem__' of 'set' objects>, '__doc__': 'set() -> new empty set object\\nset(iterable) -> new set object\\n\\nBuild an unordered collection of unique elements.'}",
                "slice": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D08F30>, '__repr__': <slot wrapper '__repr__' of 'slice' objects>, '__hash__': <slot wrapper '__hash__' of 'slice' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'slice' objects>, '__lt__': <slot wrapper '__lt__' of 'slice' objects>, '__le__': <slot wrapper '__le__' of 'slice' objects>, '__eq__': <slot wrapper '__eq__' of 'slice' objects>, '__ne__': <slot wrapper '__ne__' of 'slice' objects>, '__gt__': <slot wrapper '__gt__' of 'slice' objects>, '__ge__': <slot wrapper '__ge__' of 'slice' objects>, 'indices': <method 'indices' of 'slice' objects>, '__reduce__': <method '__reduce__' of 'slice' objects>, 'start': <member 'start' of 'slice' objects>, 'stop': <member 'stop' of 'slice' objects>, 'step': <member 'step' of 'slice' objects>, '__doc__': 'slice(stop)\\nslice(start, stop[, step])\\n\\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).'}",
                "staticmethod": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D04AD0>, '__repr__': <slot wrapper '__repr__' of 'staticmethod' objects>, '__call__': <slot wrapper '__call__' of 'staticmethod' objects>, '__get__': <slot wrapper '__get__' of 'staticmethod' objects>, '__init__': <slot wrapper '__init__' of 'staticmethod' objects>, '__func__': <member '__func__' of 'staticmethod' objects>, '__wrapped__': <member '__wrapped__' of 'staticmethod' objects>, '__isabstractmethod__': <attribute '__isabstractmethod__' of 'staticmethod' objects>, '__dict__': <attribute '__dict__' of 'staticmethod' objects>, '__doc__': 'staticmethod(function) -> method\\n\\nConvert a function to be a static method.\\n\\nA static method does not receive an implicit first argument.\\nTo declare a static method, use this idiom:\\n\\n     class C:\\n         @staticmethod\\n         def f(arg1, arg2, argN):\\n             ...\\n\\nIt can be called either on the class (e.g. C.f()) or on an instance\\n(e.g. C().f()). Both the class and the instance are ignored, and\\nneither is passed implicitly as the first argument to the method.\\n\\nStatic methods in Python are similar to those found in Java or C++.\\nFor a more advanced concept, see the classmethod builtin.'}",
                "str": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D09F70>, '__repr__': <slot wrapper '__repr__' of 'str' objects>, '__hash__': <slot wrapper '__hash__' of 'str' objects>, '__str__': <slot wrapper '__str__' of 'str' objects>, '__lt__': <slot wrapper '__lt__' of 'str' objects>, '__le__': <slot wrapper '__le__' of 'str' objects>, '__eq__': <slot wrapper '__eq__' of 'str' objects>, '__ne__': <slot wrapper '__ne__' of 'str' objects>, '__gt__': <slot wrapper '__gt__' of 'str' objects>, '__ge__': <slot wrapper '__ge__' of 'str' objects>, '__iter__': <slot wrapper '__iter__' of 'str' objects>, '__mod__': <slot wrapper '__mod__' of 'str' objects>, '__rmod__': <slot wrapper '__rmod__' of 'str' objects>, '__len__': <slot wrapper '__len__' of 'str' objects>, '__getitem__': <slot wrapper '__getitem__' of 'str' objects>, '__add__': <slot wrapper '__add__' of 'str' objects>, '__mul__': <slot wrapper '__mul__' of 'str' objects>, '__rmul__': <slot wrapper '__rmul__' of 'str' objects>, '__contains__': <slot wrapper '__contains__' of 'str' objects>, 'encode': <method 'encode' of 'str' objects>, 'replace': <method 'replace' of 'str' objects>, 'split': <method 'split' of 'str' objects>, 'rsplit': <method 'rsplit' of 'str' objects>, 'join': <method 'join' of 'str' objects>, 'capitalize': <method 'capitalize' of 'str' objects>, 'casefold': <method 'casefold' of 'str' objects>, 'title': <method 'title' of 'str' objects>, 'center': <method 'center' of 'str' objects>, 'count': <method 'count' of 'str' objects>, 'expandtabs': <method 'expandtabs' of 'str' objects>, 'find': <method 'find' of 'str' objects>, 'partition': <method 'partition' of 'str' objects>, 'index': <method 'index' of 'str' objects>, 'ljust': <method 'ljust' of 'str' objects>, 'lower': <method 'lower' of 'str' objects>, 'lstrip': <method 'lstrip' of 'str' objects>, 'rfind': <method 'rfind' of 'str' objects>, 'rindex': <method 'rindex' of 'str' objects>, 'rjust': <method 'rjust' of 'str' objects>, 'rstrip': <method 'rstrip' of 'str' objects>, 'rpartition': <method 'rpartition' of 'str' objects>, 'splitlines': <method 'splitlines' of 'str' objects>, 'strip': <method 'strip' of 'str' objects>, 'swapcase': <method 'swapcase' of 'str' objects>, 'translate': <method 'translate' of 'str' objects>, 'upper': <method 'upper' of 'str' objects>, 'startswith': <method 'startswith' of 'str' objects>, 'endswith': <method 'endswith' of 'str' objects>, 'removeprefix': <method 'removeprefix' of 'str' objects>, 'removesuffix': <method 'removesuffix' of 'str' objects>, 'isascii': <method 'isascii' of 'str' objects>, 'islower': <method 'islower' of 'str' objects>, 'isupper': <method 'isupper' of 'str' objects>, 'istitle': <method 'istitle' of 'str' objects>, 'isspace': <method 'isspace' of 'str' objects>, 'isdecimal': <method 'isdecimal' of 'str' objects>, 'isdigit': <method 'isdigit' of 'str' objects>, 'isnumeric': <method 'isnumeric' of 'str' objects>, 'isalpha': <method 'isalpha' of 'str' objects>, 'isalnum': <method 'isalnum' of 'str' objects>, 'isidentifier': <method 'isidentifier' of 'str' objects>, 'isprintable': <method 'isprintable' of 'str' objects>, 'zfill': <method 'zfill' of 'str' objects>, 'format': <method 'format' of 'str' objects>, 'format_map': <method 'format_map' of 'str' objects>, '__format__': <method '__format__' of 'str' objects>, 'maketrans': <staticmethod(<built-in method maketrans of type object at 0x00007FF997D09F70>)>, '__sizeof__': <method '__sizeof__' of 'str' objects>, '__getnewargs__': <method '__getnewargs__' of 'str' objects>, '__doc__': \"str(object='') -> str\\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\\n\\nCreate a new string object from the given object. If encoding or\\nerrors is specified, then the object must expose a data buffer\\nthat will be decoded using the given encoding and error handler.\\nOtherwise, returns the result of object.__str__() (if defined)\\nor repr(object).\\nencoding defaults to sys.getdefaultencoding().\\nerrors defaults to 'strict'.\"}",
                "super": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D095B0>, '__repr__': <slot wrapper '__repr__' of 'super' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'super' objects>, '__get__': <slot wrapper '__get__' of 'super' objects>, '__init__': <slot wrapper '__init__' of 'super' objects>, '__thisclass__': <member '__thisclass__' of 'super' objects>, '__self__': <member '__self__' of 'super' objects>, '__self_class__': <member '__self_class__' of 'super' objects>, '__doc__': 'super() -> same as super(__class__, <first argument>)\\nsuper(type) -> unbound super object\\nsuper(type, obj) -> bound super object; requires isinstance(obj, type)\\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\\nTypical use to call a cooperative superclass method:\\nclass C(B):\\n    def meth(self, arg):\\n        super().meth(arg)\\nThis works for class methods too:\\nclass C(B):\\n    @classmethod\\n    def cmeth(cls, arg):\\n        super().cmeth(arg)\\n'}",
                "tuple": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D09270>, '__repr__': <slot wrapper '__repr__' of 'tuple' objects>, '__hash__': <slot wrapper '__hash__' of 'tuple' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'tuple' objects>, '__lt__': <slot wrapper '__lt__' of 'tuple' objects>, '__le__': <slot wrapper '__le__' of 'tuple' objects>, '__eq__': <slot wrapper '__eq__' of 'tuple' objects>, '__ne__': <slot wrapper '__ne__' of 'tuple' objects>, '__gt__': <slot wrapper '__gt__' of 'tuple' objects>, '__ge__': <slot wrapper '__ge__' of 'tuple' objects>, '__iter__': <slot wrapper '__iter__' of 'tuple' objects>, '__len__': <slot wrapper '__len__' of 'tuple' objects>, '__getitem__': <slot wrapper '__getitem__' of 'tuple' objects>, '__add__': <slot wrapper '__add__' of 'tuple' objects>, '__mul__': <slot wrapper '__mul__' of 'tuple' objects>, '__rmul__': <slot wrapper '__rmul__' of 'tuple' objects>, '__contains__': <slot wrapper '__contains__' of 'tuple' objects>, '__getnewargs__': <method '__getnewargs__' of 'tuple' objects>, 'index': <method 'index' of 'tuple' objects>, 'count': <method 'count' of 'tuple' objects>, '__class_getitem__': <method '__class_getitem__' of 'tuple' objects>, '__doc__': \"Built-in immutable sequence.\\n\\nIf no argument is given, the constructor returns an empty tuple.\\nIf iterable is specified the tuple is initialized from iterable's items.\\n\\nIf the argument is a tuple, the return value is the same object.\"}",
                "type": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D098F0>, '__repr__': <slot wrapper '__repr__' of 'type' objects>, '__call__': <slot wrapper '__call__' of 'type' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'type' objects>, '__setattr__': <slot wrapper '__setattr__' of 'type' objects>, '__delattr__': <slot wrapper '__delattr__' of 'type' objects>, '__init__': <slot wrapper '__init__' of 'type' objects>, '__or__': <slot wrapper '__or__' of 'type' objects>, '__ror__': <slot wrapper '__ror__' of 'type' objects>, 'mro': <method 'mro' of 'type' objects>, '__subclasses__': <method '__subclasses__' of 'type' objects>, '__prepare__': <method '__prepare__' of 'type' objects>, '__instancecheck__': <method '__instancecheck__' of 'type' objects>, '__subclasscheck__': <method '__subclasscheck__' of 'type' objects>, '__dir__': <method '__dir__' of 'type' objects>, '__sizeof__': <method '__sizeof__' of 'type' objects>, '__basicsize__': <member '__basicsize__' of 'type' objects>, '__itemsize__': <member '__itemsize__' of 'type' objects>, '__flags__': <member '__flags__' of 'type' objects>, '__weakrefoffset__': <member '__weakrefoffset__' of 'type' objects>, '__base__': <member '__base__' of 'type' objects>, '__dictoffset__': <member '__dictoffset__' of 'type' objects>, '__name__': <attribute '__name__' of 'type' objects>, '__qualname__': <attribute '__qualname__' of 'type' objects>, '__bases__': <attribute '__bases__' of 'type' objects>, '__mro__': <attribute '__mro__' of 'type' objects>, '__module__': <attribute '__module__' of 'type' objects>, '__abstractmethods__': <attribute '__abstractmethods__' of 'type' objects>, '__dict__': <attribute '__dict__' of 'type' objects>, '__doc__': <attribute '__doc__' of 'type' objects>, '__text_signature__': <attribute '__text_signature__' of 'type' objects>, '__annotations__': <attribute '__annotations__' of 'type' objects>, '__type_params__': <attribute '__type_params__' of 'type' objects>}",
                "zip": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D0A790>, '__getattribute__': <slot wrapper '__getattribute__' of 'zip' objects>, '__iter__': <slot wrapper '__iter__' of 'zip' objects>, '__next__': <slot wrapper '__next__' of 'zip' objects>, '__reduce__': <method '__reduce__' of 'zip' objects>, '__setstate__': <method '__setstate__' of 'zip' objects>, '__doc__': \"zip(*iterables, strict=False) --> Yield tuples until an input is exhausted.\\n\\n   >>> list(zip('abcdefg', range(3), range(4)))\\n   [('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]\\n\\nThe zip object yields n-length tuples, where n is the number of iterables\\npassed as positional arguments to zip().  The i-th element in every tuple\\ncomes from the i-th iterable argument to zip().  This continues until the\\nshortest argument is exhausted.\\n\\nIf strict is true and one of the arguments is exhausted before the others,\\nraise a ValueError.\"}",
                "__debug__": true,
                "BaseException": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02090>, '__repr__': <slot wrapper '__repr__' of 'BaseException' objects>, '__str__': <slot wrapper '__str__' of 'BaseException' objects>, '__getattribute__': <slot wrapper '__getattribute__' of 'BaseException' objects>, '__init__': <slot wrapper '__init__' of 'BaseException' objects>, '__reduce__': <method '__reduce__' of 'BaseException' objects>, '__setstate__': <method '__setstate__' of 'BaseException' objects>, 'with_traceback': <method 'with_traceback' of 'BaseException' objects>, 'add_note': <method 'add_note' of 'BaseException' objects>, '__suppress_context__': <member '__suppress_context__' of 'BaseException' objects>, '__dict__': <attribute '__dict__' of 'BaseException' objects>, 'args': <attribute 'args' of 'BaseException' objects>, '__traceback__': <attribute '__traceback__' of 'BaseException' objects>, '__context__': <attribute '__context__' of 'BaseException' objects>, '__cause__': <attribute '__cause__' of 'BaseException' objects>, '__doc__': 'Common base class for all exceptions'}",
                "BaseExceptionGroup": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00B70>, '__str__': <slot wrapper '__str__' of 'BaseExceptionGroup' objects>, '__init__': <slot wrapper '__init__' of 'BaseExceptionGroup' objects>, '__class_getitem__': <method '__class_getitem__' of 'BaseExceptionGroup' objects>, 'derive': <method 'derive' of 'BaseExceptionGroup' objects>, 'split': <method 'split' of 'BaseExceptionGroup' objects>, 'subgroup': <method 'subgroup' of 'BaseExceptionGroup' objects>, 'message': <member 'message' of 'BaseExceptionGroup' objects>, 'exceptions': <member 'exceptions' of 'BaseExceptionGroup' objects>, '__doc__': 'A combination of multiple unrelated exceptions.'}",
                "Exception": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D01D50>, '__init__': <slot wrapper '__init__' of 'Exception' objects>, '__doc__': 'Common base class for all non-exit exceptions.'}",
                "GeneratorExit": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D023D0>, '__init__': <slot wrapper '__init__' of 'GeneratorExit' objects>, '__doc__': 'Request that a generator exit.'}",
                "KeyboardInterrupt": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFE950>, '__init__': <slot wrapper '__init__' of 'KeyboardInterrupt' objects>, '__doc__': 'Program interrupted by user.'}",
                "SystemExit": "{'__init__': <slot wrapper '__init__' of 'SystemExit' objects>, 'code': <member 'code' of 'SystemExit' objects>, '__doc__': 'Request to exit from the interpreter.'}",
                "ArithmeticError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFF170>, '__init__': <slot wrapper '__init__' of 'ArithmeticError' objects>, '__doc__': 'Base class for arithmetic errors.'}",
                "AssertionError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00690>, '__init__': <slot wrapper '__init__' of 'AssertionError' objects>, '__doc__': 'Assertion failed.'}",
                "AttributeError": "{'__str__': <slot wrapper '__str__' of 'AttributeError' objects>, '__init__': <slot wrapper '__init__' of 'AttributeError' objects>, '__getstate__': <method '__getstate__' of 'AttributeError' objects>, '__reduce__': <method '__reduce__' of 'AttributeError' objects>, 'name': <member 'name' of 'AttributeError' objects>, 'obj': <member 'obj' of 'AttributeError' objects>, '__doc__': 'Attribute not found.'}",
                "BufferError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFE610>, '__init__': <slot wrapper '__init__' of 'BufferError' objects>, '__doc__': 'Buffer error.'}",
                "EOFError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFDDF0>, '__init__': <slot wrapper '__init__' of 'EOFError' objects>, '__doc__': 'Read beyond end of file.'}",
                "ImportError": "{'__str__': <slot wrapper '__str__' of 'ImportError' objects>, '__init__': <slot wrapper '__init__' of 'ImportError' objects>, '__reduce__': <method '__reduce__' of 'ImportError' objects>, 'msg': <member 'msg' of 'ImportError' objects>, 'name': <member 'name' of 'ImportError' objects>, 'path': <member 'path' of 'ImportError' objects>, 'name_from': <member 'name_from' of 'ImportError' objects>, '__doc__': \"Import can't find module, or can't find name in module.\"}",
                "LookupError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFFCD0>, '__init__': <slot wrapper '__init__' of 'LookupError' objects>, '__doc__': 'Base class for lookup errors.'}",
                "MemoryError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFEE30>, '__init__': <slot wrapper '__init__' of 'MemoryError' objects>, '__doc__': 'Out of memory.'}",
                "NameError": "{'__str__': <slot wrapper '__str__' of 'NameError' objects>, '__init__': <slot wrapper '__init__' of 'NameError' objects>, 'name': <member 'name' of 'NameError' objects>, '__doc__': 'Name not found globally.'}",
                "OSError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D042B0>, '__str__': <slot wrapper '__str__' of 'OSError' objects>, '__init__': <slot wrapper '__init__' of 'OSError' objects>, '__reduce__': <method '__reduce__' of 'OSError' objects>, 'errno': <member 'errno' of 'OSError' objects>, 'strerror': <member 'strerror' of 'OSError' objects>, 'filename': <member 'filename' of 'OSError' objects>, 'filename2': <member 'filename2' of 'OSError' objects>, 'winerror': <member 'winerror' of 'OSError' objects>, 'characters_written': <attribute 'characters_written' of 'OSError' objects>, '__doc__': 'Base class for I/O related errors.'}",
                "ReferenceError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFF4B0>, '__init__': <slot wrapper '__init__' of 'ReferenceError' objects>, '__doc__': 'Weak ref proxy used after referent went away.'}",
                "RuntimeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02D90>, '__init__': <slot wrapper '__init__' of 'RuntimeError' objects>, '__doc__': 'Unspecified run-time error.'}",
                "StopAsyncIteration": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00350>, '__init__': <slot wrapper '__init__' of 'StopAsyncIteration' objects>, '__doc__': 'Signal the end from iterator.__anext__().'}",
                "StopIteration": "{'__init__': <slot wrapper '__init__' of 'StopIteration' objects>, 'value': <member 'value' of 'StopIteration' objects>, '__doc__': 'Signal the end from iterator.__next__().'}",
                "SyntaxError": "{'__str__': <slot wrapper '__str__' of 'SyntaxError' objects>, '__init__': <slot wrapper '__init__' of 'SyntaxError' objects>, 'msg': <member 'msg' of 'SyntaxError' objects>, 'filename': <member 'filename' of 'SyntaxError' objects>, 'lineno': <member 'lineno' of 'SyntaxError' objects>, 'offset': <member 'offset' of 'SyntaxError' objects>, 'text': <member 'text' of 'SyntaxError' objects>, 'end_lineno': <member 'end_lineno' of 'SyntaxError' objects>, 'end_offset': <member 'end_offset' of 'SyntaxError' objects>, 'print_file_and_line': <member 'print_file_and_line' of 'SyntaxError' objects>, '__doc__': 'Invalid syntax.'}",
                "SystemError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFF7F0>, '__init__': <slot wrapper '__init__' of 'SystemError' objects>, '__doc__': 'Internal error in the Python interpreter.\\n\\nPlease report this to the Python maintainer, along with the traceback,\\nthe Python version, and the hardware/OS platform and version.'}",
                "TypeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFE470>, '__init__': <slot wrapper '__init__' of 'TypeError' objects>, '__doc__': 'Inappropriate argument type.'}",
                "ValueError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D011F0>, '__init__': <slot wrapper '__init__' of 'ValueError' objects>, '__doc__': 'Inappropriate argument value (of correct type).'}",
                "Warning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFDC50>, '__init__': <slot wrapper '__init__' of 'Warning' objects>, '__doc__': 'Base class for warning categories.'}",
                "FloatingPointError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFF990>, '__init__': <slot wrapper '__init__' of 'FloatingPointError' objects>, '__doc__': 'Floating-point operation failed.'}",
                "OverflowError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFDF90>, '__init__': <slot wrapper '__init__' of 'OverflowError' objects>, '__doc__': 'Result too large to be represented.'}",
                "ZeroDivisionError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00830>, '__init__': <slot wrapper '__init__' of 'ZeroDivisionError' objects>, '__doc__': 'Second argument to a division or modulo operation was zero.'}",
                "BytesWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02230>, '__init__': <slot wrapper '__init__' of 'BytesWarning' objects>, '__doc__': 'Base class for warnings about bytes and buffer related problems, mostly\\nrelated to conversion from str or comparing to str.'}",
                "DeprecationWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D009D0>, '__init__': <slot wrapper '__init__' of 'DeprecationWarning' objects>, '__doc__': 'Base class for warnings about deprecated features.'}",
                "EncodingWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D00EB0>, '__init__': <slot wrapper '__init__' of 'EncodingWarning' objects>, '__doc__': 'Base class for warnings about encodings.'}",
                "FutureWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D035B0>, '__init__': <slot wrapper '__init__' of 'FutureWarning' objects>, '__doc__': 'Base class for warnings about constructs that will change semantically\\nin the future.'}",
                "ImportWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D028B0>, '__init__': <slot wrapper '__init__' of 'ImportWarning' objects>, '__doc__': 'Base class for warnings about probable mistakes in module imports'}",
                "PendingDeprecationWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFFB30>, '__init__': <slot wrapper '__init__' of 'PendingDeprecationWarning' objects>, '__doc__': 'Base class for warnings about features which will be deprecated\\nin the future.'}",
                "ResourceWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02710>, '__init__': <slot wrapper '__init__' of 'ResourceWarning' objects>, '__doc__': 'Base class for warnings about resource usage.'}",
                "RuntimeWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02F30>, '__init__': <slot wrapper '__init__' of 'RuntimeWarning' objects>, '__doc__': 'Base class for warnings about dubious runtime behavior.'}",
                "SyntaxWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFFE70>, '__init__': <slot wrapper '__init__' of 'SyntaxWarning' objects>, '__doc__': 'Base class for warnings about dubious syntax.'}",
                "UnicodeWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D04110>, '__init__': <slot wrapper '__init__' of 'UnicodeWarning' objects>, '__doc__': 'Base class for warnings about Unicode related problems, mostly\\nrelated to conversion problems.'}",
                "UserWarning": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D03A90>, '__init__': <slot wrapper '__init__' of 'UserWarning' objects>, '__doc__': 'Base class for warnings generated by user code.'}",
                "BlockingIOError": "{'__init__': <slot wrapper '__init__' of 'BlockingIOError' objects>, '__doc__': 'I/O operation would block.'}",
                "ChildProcessError": "{'__init__': <slot wrapper '__init__' of 'ChildProcessError' objects>, '__doc__': 'Child process error.'}",
                "ConnectionError": "{'__init__': <slot wrapper '__init__' of 'ConnectionError' objects>, '__doc__': 'Connection error.'}",
                "FileExistsError": "{'__init__': <slot wrapper '__init__' of 'FileExistsError' objects>, '__doc__': 'File already exists.'}",
                "FileNotFoundError": "{'__init__': <slot wrapper '__init__' of 'FileNotFoundError' objects>, '__doc__': 'File not found.'}",
                "InterruptedError": "{'__init__': <slot wrapper '__init__' of 'InterruptedError' objects>, '__doc__': 'Interrupted by signal.'}",
                "IsADirectoryError": "{'__init__': <slot wrapper '__init__' of 'IsADirectoryError' objects>, '__doc__': \"Operation doesn't work on directories.\"}",
                "NotADirectoryError": "{'__init__': <slot wrapper '__init__' of 'NotADirectoryError' objects>, '__doc__': 'Operation only works on directories.'}",
                "PermissionError": "{'__init__': <slot wrapper '__init__' of 'PermissionError' objects>, '__doc__': 'Not enough permissions.'}",
                "ProcessLookupError": "{'__init__': <slot wrapper '__init__' of 'ProcessLookupError' objects>, '__doc__': 'Process not found.'}",
                "TimeoutError": "{'__init__': <slot wrapper '__init__' of 'TimeoutError' objects>, '__doc__': 'Timeout expired.'}",
                "IndentationError": "{'__init__': <slot wrapper '__init__' of 'IndentationError' objects>, '__doc__': 'Improper indentation.'}",
                "IndexError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D01390>, '__init__': <slot wrapper '__init__' of 'IndexError' objects>, '__doc__': 'Sequence index out of range.'}",
                "KeyError": "{'__str__': <slot wrapper '__str__' of 'KeyError' objects>, '__init__': <slot wrapper '__init__' of 'KeyError' objects>, '__doc__': 'Mapping key not found.'}",
                "ModuleNotFoundError": "{'__init__': <slot wrapper '__init__' of 'ModuleNotFoundError' objects>, '__doc__': 'Module not found.'}",
                "NotImplementedError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997CFDAB0>, '__init__': <slot wrapper '__init__' of 'NotImplementedError' objects>, '__doc__': \"Method or function hasn't been implemented yet.\"}",
                "RecursionError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D030D0>, '__init__': <slot wrapper '__init__' of 'RecursionError' objects>, '__doc__': 'Recursion limit exceeded.'}",
                "UnboundLocalError": "{'__init__': <slot wrapper '__init__' of 'UnboundLocalError' objects>, '__doc__': 'Local name referenced but not bound to a value.'}",
                "UnicodeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D03410>, '__init__': <slot wrapper '__init__' of 'UnicodeError' objects>, '__doc__': 'Unicode related error.'}",
                "BrokenPipeError": "{'__init__': <slot wrapper '__init__' of 'BrokenPipeError' objects>, '__doc__': 'Broken pipe.'}",
                "ConnectionAbortedError": "{'__init__': <slot wrapper '__init__' of 'ConnectionAbortedError' objects>, '__doc__': 'Connection aborted.'}",
                "ConnectionRefusedError": "{'__init__': <slot wrapper '__init__' of 'ConnectionRefusedError' objects>, '__doc__': 'Connection refused.'}",
                "ConnectionResetError": "{'__init__': <slot wrapper '__init__' of 'ConnectionResetError' objects>, '__doc__': 'Connection reset.'}",
                "TabError": "{'__init__': <slot wrapper '__init__' of 'TabError' objects>, '__doc__': 'Improper mixture of spaces and tabs.'}",
                "UnicodeDecodeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D01870>, '__str__': <slot wrapper '__str__' of 'UnicodeDecodeError' objects>, '__init__': <slot wrapper '__init__' of 'UnicodeDecodeError' objects>, 'encoding': <member 'encoding' of 'UnicodeDecodeError' objects>, 'object': <member 'object' of 'UnicodeDecodeError' objects>, 'start': <member 'start' of 'UnicodeDecodeError' objects>, 'end': <member 'end' of 'UnicodeDecodeError' objects>, 'reason': <member 'reason' of 'UnicodeDecodeError' objects>, '__doc__': 'Unicode decoding error.'}",
                "UnicodeEncodeError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D02BF0>, '__str__': <slot wrapper '__str__' of 'UnicodeEncodeError' objects>, '__init__': <slot wrapper '__init__' of 'UnicodeEncodeError' objects>, 'encoding': <member 'encoding' of 'UnicodeEncodeError' objects>, 'object': <member 'object' of 'UnicodeEncodeError' objects>, 'start': <member 'start' of 'UnicodeEncodeError' objects>, 'end': <member 'end' of 'UnicodeEncodeError' objects>, 'reason': <member 'reason' of 'UnicodeEncodeError' objects>, '__doc__': 'Unicode encoding error.'}",
                "UnicodeTranslateError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D03F70>, '__str__': <slot wrapper '__str__' of 'UnicodeTranslateError' objects>, '__init__': <slot wrapper '__init__' of 'UnicodeTranslateError' objects>, 'encoding': <member 'encoding' of 'UnicodeTranslateError' objects>, 'object': <member 'object' of 'UnicodeTranslateError' objects>, 'start': <member 'start' of 'UnicodeTranslateError' objects>, 'end': <member 'end' of 'UnicodeTranslateError' objects>, 'reason': <member 'reason' of 'UnicodeTranslateError' objects>, '__doc__': 'Unicode translation error.'}",
                "ExceptionGroup": "{'__module__': 'builtins', '__weakref__': <attribute '__weakref__' of 'ExceptionGroup' objects>, '__doc__': None}",
                "EnvironmentError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D042B0>, '__str__': <slot wrapper '__str__' of 'OSError' objects>, '__init__': <slot wrapper '__init__' of 'OSError' objects>, '__reduce__': <method '__reduce__' of 'OSError' objects>, 'errno': <member 'errno' of 'OSError' objects>, 'strerror': <member 'strerror' of 'OSError' objects>, 'filename': <member 'filename' of 'OSError' objects>, 'filename2': <member 'filename2' of 'OSError' objects>, 'winerror': <member 'winerror' of 'OSError' objects>, 'characters_written': <attribute 'characters_written' of 'OSError' objects>, '__doc__': 'Base class for I/O related errors.'}",
                "IOError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D042B0>, '__str__': <slot wrapper '__str__' of 'OSError' objects>, '__init__': <slot wrapper '__init__' of 'OSError' objects>, '__reduce__': <method '__reduce__' of 'OSError' objects>, 'errno': <member 'errno' of 'OSError' objects>, 'strerror': <member 'strerror' of 'OSError' objects>, 'filename': <member 'filename' of 'OSError' objects>, 'filename2': <member 'filename2' of 'OSError' objects>, 'winerror': <member 'winerror' of 'OSError' objects>, 'characters_written': <attribute 'characters_written' of 'OSError' objects>, '__doc__': 'Base class for I/O related errors.'}",
                "WindowsError": "{'__new__': <built-in method __new__ of type object at 0x00007FF997D042B0>, '__str__': <slot wrapper '__str__' of 'OSError' objects>, '__init__': <slot wrapper '__init__' of 'OSError' objects>, '__reduce__': <method '__reduce__' of 'OSError' objects>, 'errno': <member 'errno' of 'OSError' objects>, 'strerror': <member 'strerror' of 'OSError' objects>, 'filename': <member 'filename' of 'OSError' objects>, 'filename2': <member 'filename2' of 'OSError' objects>, 'winerror': <member 'winerror' of 'OSError' objects>, 'characters_written': <attribute 'characters_written' of 'OSError' objects>, '__doc__': 'Base class for I/O related errors.'}",
                "open": "<built-in function open>",
                "quit": {
                  "name": "quit",
                  "eof": "Ctrl-Z plus Return"
                },
                "exit": {
                  "name": "exit",
                  "eof": "Ctrl-Z plus Return"
                },
                "copyright": {
                  "_Printer__name": "copyright",
                  "_Printer__data": "Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved.",
                  "_Printer__lines": null,
                  "_Printer__filenames": []
                },
                "credits": {
                  "_Printer__name": "credits",
                  "_Printer__data": "    Thanks to CWI, CNRI, BeOpen, Zope Corporation, the Python Software\n    Foundation, and a cast of thousands for supporting Python\n    development.  See www.python.org for more information.",
                  "_Printer__lines": null,
                  "_Printer__filenames": []
                },
                "license": {
                  "_Printer__name": "license",
                  "_Printer__data": "See https://www.python.org/psf/license/",
                  "_Printer__lines": null,
                  "_Printer__filenames": [
                    "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\..\\LICENSE.txt",
                    "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\..\\LICENSE",
                    "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\LICENSE.txt",
                    "C:\\Users\\Utilisateur\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\LICENSE",
                    ".\\LICENSE.txt",
                    ".\\LICENSE"
                  ]
                },
                "help": {}
              },
              "sys": {
                "__name__": "sys",
                "__doc__": "This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nstdin -- standard input file object; used by input()\nstdout -- standard output file object; used by print()\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_exc - the last uncaught exception\n  Only available in an interactive session after a\n  traceback has been printed.\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are the (deprecated) legacy representation of last_exc.\n\nStatic objects:\n\nbuiltin_module_names -- tuple of module names built into this interpreter\ncopyright -- copyright notice pertaining to this interpreter\nexec_prefix -- prefix used to find the machine-specific Python library\nexecutable -- absolute path of the executable binary of the Python interpreter\nfloat_info -- a named tuple with information about the float implementation.\nfloat_repr_style -- string indicating the style of repr() output for floats\nhash_info -- a named tuple with information about the hash algorithm.\nhexversion -- version information encoded as a single integer\nimplementation -- Python implementation information.\nint_info -- a named tuple with information about the int implementation.\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the value of the largest Unicode code point\nplatform -- platform identifier\nprefix -- prefix used to find the Python library\nthread_info -- a named tuple with information about the thread implementation.\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\ndllhandle -- [Windows only] integer handle of the Python DLL\nwinver -- [Windows only] version number of the Python DLL\n_enablelegacywindowsfsencoding -- [Windows only]\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in builtins._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexception() -- return the current thread's active exception\nexc_info() -- return information about the current thread's active exception\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function\n",
                "__package__": "",
                "__loader__": "{'__module__': '_frozen_importlib', '__doc__': 'Meta path import for built-in modules.\\n\\n    All methods are either class or static methods to avoid the need to\\n    instantiate the class.\\n\\n    ', '_ORIGIN': 'built-in', 'find_spec': <classmethod(<function BuiltinImporter.find_spec at 0x0000021CF1F62F20>)>, 'create_module': <staticmethod(<function BuiltinImporter.create_module at 0x0000021CF1F62FC0>)>, 'exec_module': <staticmethod(<function BuiltinImporter.exec_module at 0x0000021CF1F63060>)>, 'get_code': <classmethod(<function BuiltinImporter.get_code at 0x0000021CF1F631A0>)>, 'get_source': <classmethod(<function BuiltinImporter.get_source at 0x0000021CF1F632E0>)>, 'is_package': <classmethod(<function BuiltinImporter.is_package at 0x0000021CF1F63420>)>, 'load_module': <classmethod(<function _load_module_shim at 0x0000021CF1F622A0>)>, '__dict__': <attribute '__dict__' of 'BuiltinImporter' objects>, '__weakref__': <attribute '__weakref__' of 'BuiltinImporter' objects>}",
                "__spec__": {
                  "name": "sys",
                  "loader": "{'__module__': '_frozen_importlib', '__doc__': 'Meta path import for built-in modules.\\n\\n    All methods are either class or static methods to avoid the need to\\n    instantiate the class.\\n\\n    ', '_ORIGIN': 'built-in', 'find_spec': <classmethod(<function BuiltinImporter.find_spec at 0x0000021CF1F62F20>)>, 'create_module': <staticmethod(<function BuiltinImporter.create_module at 0x0000021CF1F62FC0>)>, 'exec_module': <staticmethod(<function BuiltinImporter.exec_module at 0x0000021CF1F63060>)>, 'get_code': <classmethod(<function BuiltinImporter.get_code at 0x0000021CF1F631A0>)>, 'get_source': <classmethod(<function BuiltinImporter.get_source at 0x0000021CF1F632E0>)>, 'is_package': <classmethod(<function BuiltinImporter.is_package at 0x0000021CF1F63420>)>, 'load_module': <classmethod(<function _load_module_shim at 0x0000021CF1F622A0>)>, '__dict__': <attribute '__dict__' of 'BuiltinImporter' objects>, '__weakref__': <attribute '__weakref__' of 'BuiltinImporter' objects>}",
                  "origin": "built-in",
                  "loader_state": null,
                  "submodule_search_locations": null,
                  "_uninitialized_submodules": [],
                  "_set_fileattr": false,
                  "_cached": null
                },
                "addaudithook": "<built-in function addaudithook>",
                "audit": "<built-in function audit>",
                "breakpointhook": "<built-in function breakpointhook>",
                "_clear_type_cache": "<built-in function _clear_type_cache>",
                "_current_frames": "<built-in function _current_frames>",
                "_current_exceptions": "<built-in function _current_exceptions>",
                "displayhook": "<built-in function displayhook>",
                "exception": "<built-in function exception>",
                "exc_info": "<built-in function exc_info>",
                "excepthook": "<built-in function excepthook>",
                "exit": "<built-in function exit>",
                "getdefaultencoding": "<built-in function getdefaultencoding>",
                "getallocatedblocks": "<built-in function getallocatedblocks>",
                "getunicodeinternedsize": "<built-in function getunicodeinternedsize>",
                "getfilesystemencoding": "<built-in function getfilesystemencoding>",
                "getfilesystemencodeerrors": "<built-in function getfilesystemencodeerrors>",
                "getrefcount": "<built-in function getrefcount>",
                "getrecursionlimit": "<built-in function getrecursionlimit>",
                "getsizeof": "<built-in function getsizeof>",
                "_getframe": "<built-in function _getframe>",
                "_getframemodulename": "<built-in function _getframemodulename>",
                "getwindowsversion": "<built-in function getwindowsversion>",
                "_enablelegacywindowsfsencoding": "<built-in function _enablelegacywindowsfsencoding>",
                "intern": "<built-in function intern>",
                "is_finalizing": "<built-in function is_finalizing>",
                "setswitchinterval": "<built-in function setswitchinterval>",
                "getswitchinterval": "<built-in function getswitchinterval>",
                "setprofile": "<built-in function setprofile>",
                "_setprofileallthreads": "<built-in function _setprofileallthreads>",
                "getprofile": "<built-in function getprofile>",
                "setrecursionlimit": "<built-in function setrecursionlimit>",
                "settrace": "<built-in function settrace>",
                "_settraceallthreads": "<built-in function _settraceallthreads>",
                "gettrace": "<built-in function gettrace>",
                "call_tracing": "<built-in function call_tracing>",
                "_debugmallocstats": "<built-in function _debugmallocstats>",
                "set_coroutine_origin_tracking_depth": "<built-in function set_coroutine_origin_tracking_depth>",
                "get_coroutine_origin_tracking_depth": "<built-in function get_coroutine_origin_tracking_depth>",
                "set_asyncgen_hooks": "<built-in function set_asyncgen_hooks>",
                "get_asyncgen_hooks": "<built-in function get_asyncgen_hooks>",
                "activate_stack_trampoline": "<built-in function activate_stack_trampoline>",
                "deactivate_stack_trampoline": "<built-in function deactivate_stack_trampoline>",
                "is_stack_trampoline_active": "<built-in function is_stack_trampoline_active>",
                "unraisablehook": "<built-in function unraisablehook>",
                "get_int_max_str_digits": "<built-in function get_int_max_str_digits>",
                "set_int_max_str_digits": "<built-in function set_int_max_str_digits>",
                "modules": {
                  "sys": 
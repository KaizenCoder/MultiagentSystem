#!/usr/bin/env python3
"""
üéØ MISSION ANALYSE COMPL√àTE - S√âLECTION 3 CANDIDATS
Lancement de l'√©quipe maintenance compl√®te pour analyser tous les agents
et proposer 3 candidats optimaux pour transformation
"""
import asyncio
import json
import sys
from pathlib import Path
from datetime import datetime
import logging

# Configuration des chemins
AGENTS_DIR = Path("C:/Dev/nextgeneration/agent_factory_implementation/agents")
REPORTS_DIR = Path("C:/Dev/nextgeneration/agent_factory_implementation/agents/reviews")
CONFIG_FILE = Path("config_mission_transformation.json")

# √âquipe compl√®te
EQUIPE_AGENTS = [
    "agent_MAINTENANCE_00_chef_equipe_coordinateur.py",
    "agent_MAINTENANCE_01_analyseur_structure.py", 
    "agent_MAINTENANCE_02_evaluateur_utilite_UPGRADED.py",
    "agent_MAINTENANCE_03_adaptateur_code_UPGRADED.py",
    "agent_MAINTENANCE_04_testeur_anti_faux_agents_UPGRADED.py",
    "agent_MAINTENANCE_05_documenteur.py",
    "agent_MAINTENANCE_06_validateur_final.py"
]

class MissionAnalyseComplete:
    def __init__(self):
        self.setup_logging()
        self.candidats_proposes = []
        
    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(f'logs/mission_analyse_candidats_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)

    async def lancer_mission_complete(self):
        """Lance l'√©quipe compl√®te pour analyser et s√©lectionner candidats"""
        print("üöÄ LANCEMENT MISSION ANALYSE COMPL√àTE - S√âLECTION CANDIDATS")
        print("=" * 70)
        
        try:
            # 1. V√©rification r√©pertoires
            print(f"üìÅ V√©rification r√©pertoire agents: {AGENTS_DIR}")
            if not AGENTS_DIR.exists():
                raise Exception(f"R√©pertoire agents non trouv√©: {AGENTS_DIR}")
            
            print(f"üìÅ V√©rification r√©pertoire rapports: {REPORTS_DIR}")
            REPORTS_DIR.mkdir(exist_ok=True)
            
            # 2. Charger configuration
            config = self.charger_configuration()
            
            # 3. Lancer le chef d'√©quipe coordinateur
            print("\nüéØ PHASE 1: LANCEMENT CHEF D'√âQUIPE")
            chef_result = await self.lancer_chef_equipe(config)
            
            # 4. Analyser tous les agents
            print("\nüîç PHASE 2: ANALYSE COMPL√àTE AGENTS")
            analyse_result = await self.analyser_tous_agents()
            
            # 5. S√©lectionner 3 candidats optimaux
            print("\nüéØ PHASE 3: S√âLECTION 3 CANDIDATS OPTIMAUX")
            candidats = await self.selectionner_candidats_optimaux(analyse_result)
            
            # 6. G√©n√©rer rapport final
            print("\nüìä PHASE 4: G√âN√âRATION RAPPORT CANDIDATS")
            rapport = await self.generer_rapport_candidats(candidats)
            
            return candidats, rapport
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur mission: {e}")
            raise

    def charger_configuration(self):
        """Charge la configuration de mission"""
        if CONFIG_FILE.exists():
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
        else:
            # Configuration par d√©faut
            config = {
                "mission_type": "analyse_candidats_transformation",
                "target_directory": str(AGENTS_DIR),
                "reports_directory": str(REPORTS_DIR),
                "analyse_mode": "diagnostic_only",
                "candidats_requis": 3,
                "criteres_selection": [
                    "facilite_transformation",
                    "impact_minimal",
                    "representativite_problemes",
                    "taille_raisonnable"
                ]
            }
            
        return config

    async def lancer_chef_equipe(self, config):
        """Lance le chef d'√©quipe coordinateur"""
        try:
            # Import du chef d'√©quipe
            sys.path.append("agent_equipe_maintenance")
            from agent_MAINTENANCE_00_chef_equipe_coordinateur import ChefEquipeCoordinateur
            
            chef = ChefEquipeCoordinateur()
            await chef.startup()
            
            # Configuration mission
            mission_config = {
                "mission_id": f"analyse_candidats_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "target_directory": config["target_directory"],
                "reports_directory": config["reports_directory"],
                "mode": "diagnostic_only",
                "equipe_agents": EQUIPE_AGENTS,
                "objectif": "Identifier 3 candidats optimaux pour transformation"
            }
            
            self.logger.info(f"üéØ Configuration mission chef: {mission_config['mission_id']}")
            
            # D√©marrer mission
            result = await chef.coordonner_equipe_complete(mission_config)
            
            await chef.shutdown()
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur chef √©quipe: {e}")
            return {"success": False, "error": str(e)}

    async def analyser_tous_agents(self):
        """Analyse tous les agents avec l'√©quipe compl√®te"""
        try:
            # Lister tous les agents Python
            agents_files = list(AGENTS_DIR.glob("*.py"))
            self.logger.info(f"üìä {len(agents_files)} agents trouv√©s pour analyse")
            
            # Lancer Agent 04 (audit Pattern Factory)
            audit_results = await self.lancer_audit_pattern_factory(agents_files)
            
            # Lancer Agent 01 (analyse structure)
            structure_results = await self.lancer_analyse_structure(agents_files)
            
            # Lancer Agent 02 (√©valuation utilit√©)
            utilite_results = await self.lancer_evaluation_utilite(agents_files)
            
            return {
                "total_agents": len(agents_files),
                "audit_pattern_factory": audit_results,
                "analyse_structure": structure_results,
                "evaluation_utilite": utilite_results,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse compl√®te: {e}")
            return {"success": False, "error": str(e)}

    async def lancer_audit_pattern_factory(self, agents_files):
        """Lance l'Agent 04 pour audit Pattern Factory"""
        try:
            sys.path.append("agent_equipe_maintenance")
            from agent_MAINTENANCE_04_testeur_anti_faux_agents_UPGRADED import TesteurAntiFauxAgentsUpgraded
            
            agent04 = TesteurAntiFauxAgentsUpgraded()
            await agent04.startup()
            
            # Audit complet
            audit_result = await agent04.run_pattern_factory_audit(str(AGENTS_DIR))
            
            await agent04.shutdown()
            return audit_result
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur Agent 04: {e}")
            return {"success": False, "error": str(e)}

    async def lancer_analyse_structure(self, agents_files):
        """Lance l'Agent 01 pour analyse structure"""
        try:
            sys.path.append("agent_equipe_maintenance")
            from agent_MAINTENANCE_01_analyseur_structure import AnalyseurStructure
            
            agent01 = AnalyseurStructure()
            await agent01.startup()
            
            # Analyser chaque agent
            analyses = {}
            for agent_file in agents_files[:10]:  # Limiter pour test
                try:
                    result = await agent01.analyser_structure_agent(str(agent_file))
                    analyses[agent_file.name] = result
                except Exception as e:
                    analyses[agent_file.name] = {"error": str(e)}
            
            await agent01.shutdown()
            return analyses
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur Agent 01: {e}")
            return {"success": False, "error": str(e)}

    async def lancer_evaluation_utilite(self, agents_files):
        """Lance l'Agent 02 pour √©valuation utilit√©"""
        try:
            sys.path.append("agent_equipe_maintenance")
            from agent_MAINTENANCE_02_evaluateur_utilite_UPGRADED import EvaluateurUtiliteUpgraded
            
            agent02 = EvaluateurUtiliteUpgraded()
            await agent02.startup()
            
            # √âvaluer utilit√© globale
            result = await agent02.evaluer_utilite_globale(str(AGENTS_DIR))
            
            await agent02.shutdown()
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur Agent 02: {e}")
            return {"success": False, "error": str(e)}

    async def selectionner_candidats_optimaux(self, analyse_result):
        """S√©lectionne 3 candidats optimaux pour transformation"""
        try:
            # R√©cup√©rer les r√©sultats d'audit
            audit_data = analyse_result.get("audit_pattern_factory", {})
            agents_analysis = audit_data.get("agents_analysis", {})
            
            # Crit√®res de s√©lection
            candidats_potentiels = []
            
            for agent_file, analysis in agents_analysis.items():
                if isinstance(analysis, dict):
                    conformity_status = analysis.get("conformity_status", "unknown")
                    critical_issues = analysis.get("critical_issues", [])
                    file_size = analysis.get("file_info", {}).get("size", 0)
                    
                    # Score de candidature (plus bas = meilleur candidat)
                    score_candidature = 0
                    
                    # Facilit√© de transformation
                    if conformity_status == "critical_errors":
                        score_candidature += 10  # Probl√®mes critiques = plus facile √† identifier
                    elif conformity_status == "non_compliant":
                        score_candidature += 20  # Non conforme mais sans erreurs
                    
                    # Nombre d'erreurs (moins = mieux)
                    score_candidature += len(critical_issues) * 5
                    
                    # Taille raisonnable (ni trop petit ni trop gros)
                    if 10000 < file_size < 50000:  # Taille id√©ale
                        score_candidature -= 10
                    elif file_size > 100000:  # Trop gros
                        score_candidature += 30
                    elif file_size < 5000:  # Trop petit
                        score_candidature += 20
                    
                    candidats_potentiels.append({
                        "agent_file": agent_file,
                        "score_candidature": score_candidature,
                        "conformity_status": conformity_status,
                        "critical_issues": critical_issues,
                        "file_size": file_size,
                        "raisons_selection": []
                    })
            
            # Trier par score (meilleurs candidats en premier)
            candidats_potentiels.sort(key=lambda x: x["score_candidature"])
            
            # S√©lectionner top 3 avec diversit√©
            candidats_finaux = []
            statuts_selectionnes = set()
            
            for candidat in candidats_potentiels:
                if len(candidats_finaux) >= 3:
                    break
                
                status = candidat["conformity_status"]
                
                # Assurer la diversit√© des types de probl√®mes
                if status not in statuts_selectionnes or len(candidats_finaux) < 2:
                    candidat["raisons_selection"] = self.generer_raisons_selection(candidat)
                    candidats_finaux.append(candidat)
                    statuts_selectionnes.add(status)
            
            self.candidats_proposes = candidats_finaux
            return candidats_finaux
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur s√©lection candidats: {e}")
            return []

    def generer_raisons_selection(self, candidat):
        """G√©n√®re les raisons de s√©lection d'un candidat"""
        raisons = []
        
        if candidat["conformity_status"] == "critical_errors":
            raisons.append("Erreurs critiques faciles √† identifier et corriger")
        
        if 10000 < candidat["file_size"] < 50000:
            raisons.append("Taille optimale pour transformation test")
        
        if len(candidat["critical_issues"]) <= 5:
            raisons.append("Nombre raisonnable de probl√®mes √† corriger")
        
        if candidat["score_candidature"] < 30:
            raisons.append("Score de facilit√© de transformation √©lev√©")
        
        return raisons

    async def generer_rapport_candidats(self, candidats):
        """G√©n√®re le rapport final des candidats s√©lectionn√©s"""
        rapport = {
            "mission_id": f"selection_candidats_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "timestamp": datetime.now().isoformat(),
            "candidats_selectionnes": candidats,
            "total_candidats": len(candidats),
            "criteres_utilises": [
                "Facilit√© de transformation",
                "Impact minimal sur le syst√®me",
                "Repr√©sentativit√© des probl√®mes",
                "Taille raisonnable du fichier"
            ],
            "recommandations": []
        }
        
        # G√©n√©rer recommandations
        for i, candidat in enumerate(candidats, 1):
            recommandation = {
                "rang": i,
                "agent": candidat["agent_file"],
                "priorite": "HAUTE" if i == 1 else "MOYENNE" if i == 2 else "NORMALE",
                "justification": " | ".join(candidat["raisons_selection"])
            }
            rapport["recommandations"].append(recommandation)
        
        # Sauvegarder rapport
        rapport_file = REPORTS_DIR / f"rapport_candidats_transformation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(rapport_file, 'w', encoding='utf-8') as f:
            json.dump(rapport, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üìä Rapport candidats sauv√©: {rapport_file}")
        return rapport

    def afficher_candidats(self, candidats):
        """Affiche les 3 candidats s√©lectionn√©s"""
        print("\nüéØ TOP 3 CANDIDATS POUR TRANSFORMATION")
        print("=" * 60)
        
        for i, candidat in enumerate(candidats, 1):
            print(f"\nüèÜ CANDIDAT #{i} - {candidat['agent_file']}")
            print(f"   üìä Score: {candidat['score_candidature']}")
            print(f"   üìã Status: {candidat['conformity_status']}")
            print(f"   üìè Taille: {candidat['file_size']:,} caract√®res")
            print(f"   üö® Probl√®mes: {len(candidat['critical_issues'])}")
            print(f"   ‚úÖ Raisons s√©lection:")
            for raison in candidat['raisons_selection']:
                print(f"      ‚Ä¢ {raison}")
        
        print(f"\nüéØ S√©lectionnez le candidat √† transformer (1-{len(candidats)}) :")

async def main():
    """Point d'entr√©e principal"""
    try:
        mission = MissionAnalyseComplete()
        candidats, rapport = await mission.lancer_mission_complete()
        
        if candidats:
            mission.afficher_candidats(candidats)
            print(f"\nüìä Rapport complet sauv√© dans: {REPORTS_DIR}")
        else:
            print("‚ùå Aucun candidat s√©lectionn√©")
            
    except Exception as e:
        print(f"üí• Erreur fatale: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    asyncio.run(main()) 
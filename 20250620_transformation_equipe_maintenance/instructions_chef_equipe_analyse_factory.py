#!/usr/bin/env python3
"""
üìã INSTRUCTIONS POUR LE CHEF D'√âQUIPE MAINTENANCE
==============================================

Instructions d√©taill√©es pour l'analyse du r√©pertoire agent_factory_implementation/agents
par l'√©quipe de maintenance compl√®te.

Author: Coordinateur Projet
Version: 1.0.0
Created: 2025-01-20
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# Ajouter le r√©pertoire des agents au PATH
sys.path.insert(0, str(Path(__file__).parent / "agent_equipe_maintenance"))

from agent_MAINTENANCE_00_chef_equipe_coordinateur import ChefEquipeCoordinateurEnterprise

async def donner_instructions_chef_equipe():
    """Donner les instructions compl√®tes au chef d'√©quipe maintenance"""
    
    print("üìã TRANSMISSION D'INSTRUCTIONS AU CHEF D'√âQUIPE MAINTENANCE")
    print("=" * 70)
    
    # Configuration pour le chef d'√©quipe
    config_mission = {
        "target_path": "../agent_factory_implementation/agents",
        "workspace_path": ".",
        "safe_mode": True,  # IMPORTANT: Pas de modification des agents
        "rapport_detaille": True,
        "timeout": 600,  # 10 minutes par agent
        "max_agents_parallel": 4
    }
    
    # Cr√©er le chef d'√©quipe
    chef_equipe = ChefEquipeCoordinateurEnterprise(**config_mission)
    
    print(f"\nüéñÔ∏è Chef d'√©quipe cr√©√©: {chef_equipe.agent_id}")
    print(f"üìÇ R√©pertoire cible: {config_mission['target_path']}")
    print(f"üîí Mode s√©curis√©: {config_mission['safe_mode']} (pas de modification)")
    
    # Instructions d√©taill√©es pour le chef d'√©quipe
    instructions = {
        "mission_principale": {
            "objectif": "Analyser TOUS les agents du r√©pertoire agent_factory_implementation/agents",
            "contrainte_critique": "AUCUNE MODIFICATION des agents - DIAGNOSTIC UNIQUEMENT",
            "destination_rapports": "agent_factory_implementation/agents/reviews",
            "type_analyse": "Conformit√© Pattern Factory et qualit√© du code"
        },
        
        "taches_equipe": {
            "agent_01_analyseur": {
                "mission": "Analyser la structure de chaque agent",
                "focus": [
                    "Imports Pattern Factory",
                    "H√©ritage classe Agent", 
                    "M√©thodes obligatoires (startup, shutdown, health_check, execute_task)",
                    "Architecture g√©n√©rale",
                    "Erreurs syntaxe Python"
                ]
            },
            
            "agent_02_evaluateur": {
                "mission": "√âvaluer l'utilit√© et la conformit√©",
                "focus": [
                    "Score de conformit√© Pattern Factory",
                    "Qualit√© du code",
                    "Respect des bonnes pratiques",
                    "Fonctionnalit√©s impl√©ment√©es",
                    "Niveau de maturit√©"
                ]
            },
            
            "agent_03_adaptateur": {
                "mission": "Analyser les besoins d'adaptation (SANS MODIFIER)",
                "focus": [
                    "Recommandations de migration",
                    "Probl√®mes identifi√©s",
                    "Solutions propos√©es",
                    "Priorit√©s de correction",
                    "Effort estim√©"
                ]
            },
            
            "agent_04_testeur": {
                "mission": "Tester et valider (nouvelles fonctionnalit√©s Pattern Factory)",
                "focus": [
                    "D√©tection faux agents",
                    "Probl√®mes de conformit√©",
                    "Erreurs critiques",
                    "Tests de fonctionnement",
                    "Rapport de validation"
                ]
            },
            
            "agent_05_documenteur": {
                "mission": "Documenter les analyses et r√©sultats",
                "focus": [
                    "Documentation des agents analys√©s",
                    "Guides d'utilisation",
                    "Sch√©mas d'architecture",
                    "Documentation consolid√©e",
                    "Index de documentation"
                ]
            },
            
            "agent_06_validateur_final": {
                "mission": "Validation finale de la mission d'analyse",
                "focus": [
                    "Validation globale des r√©sultats",
                    "Contr√¥le qualit√© des rapports",
                    "Tests d'int√©grit√©",
                    "√âvaluation mission globale",
                    "Certification finale"
                ]
            }
        },
        
        "deliverables": {
            "repertoire_sortie": "agent_factory_implementation/agents/reviews",
            "format_rapports": "JSON et Markdown",
            "nomenclature": "agent_[nom]_analysis_[timestamp]",
            "consolidation": "rapport_global_equipe_maintenance_[timestamp]"
        },
        
        "contraintes_operationnelles": {
            "mode_lecture_seule": True,
            "pas_de_modification_code": True,
            "sauvegarde_automatique": True,
            "logs_detailles": True,
            "gestion_erreurs": "Continue m√™me en cas d'erreur sur un agent"
        }
    }
    
    print("\nüìã INSTRUCTIONS D√âTAILL√âES TRANSMISES:")
    print("=" * 50)
    
    print(f"\nüéØ MISSION PRINCIPALE:")
    print(f"   ‚Ä¢ Objectif: {instructions['mission_principale']['objectif']}")
    print(f"   ‚Ä¢ Contrainte: {instructions['mission_principale']['contrainte_critique']}")
    print(f"   ‚Ä¢ Destination: {instructions['mission_principale']['destination_rapports']}")
    
    print(f"\nüë• R√âPARTITION √âQUIPE:")
    for agent_nom, agent_config in instructions['taches_equipe'].items():
        print(f"   üìã {agent_nom}:")
        print(f"      Mission: {agent_config['mission']}")
        print(f"      Focus: {len(agent_config['focus'])} points d'analyse")
    
    print(f"\nüìä LIVRABLES ATTENDUS:")
    print(f"   ‚Ä¢ R√©pertoire: {instructions['deliverables']['repertoire_sortie']}")
    print(f"   ‚Ä¢ Format: {instructions['deliverables']['format_rapports']}")
    print(f"   ‚Ä¢ Consolidation: Rapport global de l'√©quipe")
    
    print(f"\nüîí CONTRAINTES:")
    print(f"   ‚Ä¢ Mode lecture seule: {instructions['contraintes_operationnelles']['mode_lecture_seule']}")
    print(f"   ‚Ä¢ Pas de modification: {instructions['contraintes_operationnelles']['pas_de_modification_code']}")
    
    # D√©marrer le chef d'√©quipe
    print(f"\nüöÄ D√âMARRAGE DU CHEF D'√âQUIPE...")
    await chef_equipe.startup()
    
    # V√©rifier l'√©tat de sant√©
    health = await chef_equipe.health_check()
    print(f"üè• √âtat sant√©: {health['status']}")
    
    # Cr√©er une t√¢che personnalis√©e pour cette mission
    mission_task = {
        "task_id": "analyse_factory_agents_diagnostic_only",
        "description": "Analyse compl√®te agents factory - DIAGNOSTIC UNIQUEMENT",
        "instructions": instructions,
        "config": config_mission
    }
    
    print(f"\n‚ö° LANCEMENT DE LA MISSION...")
    print("   Le chef d'√©quipe va maintenant coordonner son √©quipe")
    print("   pour analyser tous les agents du r√©pertoire factory.")
    print("   Rapports disponibles dans: agent_factory_implementation/agents/reviews")
    
    try:
        # Ex√©cuter la mission
        resultats = await chef_equipe.execute_task(mission_task)
        
        print(f"\n‚úÖ MISSION TERMIN√âE!")
        print(f"üìä R√©sultats: {resultats.get('status', 'Inconnu')}")
        
        if resultats.get('success'):
            print(f"üéØ Agents analys√©s: {resultats.get('agents_analyses', 'N/A')}")
            print(f"üìã Rapports g√©n√©r√©s: {resultats.get('rapports_generes', 'N/A')}")
        else:
            print(f"‚ö†Ô∏è Probl√®me rencontr√©: {resultats.get('error', 'Erreur inconnue')}")
    
    except Exception as e:
        print(f"‚ùå Erreur durant la mission: {e}")
    
    finally:
        # Arr√™t propre du chef d'√©quipe
        await chef_equipe.shutdown()
        print(f"\nüõë Chef d'√©quipe arr√™t√© proprement")
    
    print(f"\n" + "=" * 70)
    print("üìã INSTRUCTIONS TRANSMISES ET MISSION LANC√âE")
    print("üîç Consultez agent_factory_implementation/agents/reviews pour les r√©sultats")
    print("=" * 70)

def main():
    """Point d'entr√©e principal"""
    try:
        asyncio.run(donner_instructions_chef_equipe())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Mission interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la transmission des instructions: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 




#!/usr/bin/env python3
"""
üß™ TEST COMPLET - Agent 05 Documenteur + Peer-Reviewer ENRICHI
=============================================================

Test de validation compl√®te de l'Agent 05 ENRICHI qui combine :
- Capacit√©s originales Agent 05 (documentation enterprise)
- Capacit√©s enrichies Agents 16 & 17 (peer review + correction)

Author: √âquipe de Maintenance NextGeneration
Version: 1.0.0
Created: 2025-01-21
"""

import asyncio
import json
import sys
from pathlib import Path
from datetime import datetime

# Ajout du chemin pour imports
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir / "agent_equipe_maintenance"))

# Import de l'Agent 05 ENRICHI
from agent_MAINTENANCE_05_documenteur_peer_reviewer import (
    DocumenteurEnterprisePeerReviewerEnrichi,
    create_agent_5_documenteur_peer_reviewer,
    Task,
    Result
)

class TestAgent05Enrichi:
    """üß™ Classe de test pour l'Agent 05 ENRICHI"""
    
    def __init__(self):
        self.agent = None
        self.test_results = []
        
    async def run_all_tests(self):
        """Ex√©cute tous les tests"""
        print("üß™ D√âBUT TEST COMPLET - Agent 05 Documenteur + Peer-Reviewer ENRICHI")
        print("=" * 80)
        
        try:
            # 1. Test cr√©ation et initialisation
            await self.test_creation_agent()
            
            # 2. Test capacit√©s combin√©es
            await self.test_capacites_combinees()
            
            # 3. Test fonctionnalit√©s documentation (Agent 05 original)
            await self.test_documentation_enterprise()
            
            # 4. Test fonctionnalit√©s peer review (enrichies)
            await self.test_peer_review_correction()
            
            # 5. Test ex√©cution t√¢ches Pattern Factory
            await self.test_execution_taches()
            
            # 6. Test int√©gration compl√®te
            await self.test_integration_complete()
            
            # R√©sum√© final
            await self.afficher_resume_final()
            
        except Exception as e:
            print(f"‚ùå ERREUR CRITIQUE DANS LES TESTS : {e}")
            return False
        
        finally:
            if self.agent:
                await self.agent.shutdown()
        
        return True
    
    async def test_creation_agent(self):
        """Test 1 : Cr√©ation et initialisation"""
        print("\nüîß TEST 1 : Cr√©ation et initialisation")
        print("-" * 40)
        
        try:
            # Cr√©ation avec factory
            self.agent = create_agent_5_documenteur_peer_reviewer(
                target_path="../agent_factory_implementation/agents",
                workspace_path=".",
                resultats_tests={"test": "data"}
            )
            
            # Startup
            await self.agent.startup()
            
            # Health check
            health = await self.agent.health_check()
            
            print(f"‚úÖ Agent cr√©√© avec ID : {health['agent_id']}")
            print(f"‚úÖ Type : {health['agent_type']}")
            print(f"‚úÖ Status : {health['status']}")
            print(f"‚úÖ Pattern Factory : {health.get('pattern_factory_available', 'N/A')}")
            print(f"‚úÖ Capacit√©s : {health['capabilities_count']}")
            
            self.test_results.append({
                "test": "creation_agent",
                "status": "SUCCESS",
                "agent_id": health['agent_id'],
                "capabilities_count": health['capabilities_count']
            })
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation : {e}")
            self.test_results.append({
                "test": "creation_agent",
                "status": "ERROR",
                "error": str(e)
            })
    
    async def test_capacites_combinees(self):
        """Test 2 : Capacit√©s combin√©es Agent 05 + Enrichissement"""
        print("\nüéØ TEST 2 : Capacit√©s combin√©es")
        print("-" * 40)
        
        try:
            capabilities = self.agent.get_capabilities()
            
            # Capacit√©s originales Agent 05
            capacites_doc = [
                "documenter_complete",
                "enterprise_documentation",
                "intelligent_automated_documentation",
                "multi_format_documentation"
            ]
            
            # Capacit√©s enrichies peer review
            capacites_review = [
                "corriger_defaillances_utilisation",
                "peer_review_complete",
                "generer_certification_finale",
                "senior_architecture_review",
                "technical_deep_review"
            ]
            
            doc_present = sum(1 for cap in capacites_doc if cap in capabilities)
            review_present = sum(1 for cap in capacites_review if cap in capabilities)
            
            print(f"üìö Capacit√©s Documentation (Agent 05) : {doc_present}/{len(capacites_doc)}")
            print(f"üîç Capacit√©s Peer Review (Enrichi) : {review_present}/{len(capacites_review)}")
            print(f"üéØ Total capacit√©s : {len(capabilities)}")
            
            # Afficher √©chantillon des capacit√©s
            print("\nüìã √âchantillon des capacit√©s :")
            for i, cap in enumerate(capabilities[:15], 1):
                emoji = "üìö" if any(doc in cap for doc in ["document", "guide", "schema"]) else "üîç"
                print(f"  {i:2d}. {emoji} {cap}")
            
            if len(capabilities) > 15:
                print(f"  ... et {len(capabilities)-15} autres capacit√©s")
            
            self.test_results.append({
                "test": "capacites_combinees",
                "status": "SUCCESS",
                "total_capabilities": len(capabilities),
                "doc_capabilities": doc_present,
                "review_capabilities": review_present
            })
            
        except Exception as e:
            print(f"‚ùå Erreur capacit√©s : {e}")
            self.test_results.append({
                "test": "capacites_combinees",
                "status": "ERROR",
                "error": str(e)
            })
    
    async def test_documentation_enterprise(self):
        """Test 3 : Fonctionnalit√©s documentation enterprise (Agent 05)"""
        print("\nüìö TEST 3 : Documentation enterprise")
        print("-" * 40)
        
        try:
            # Test documentation enterprise avanc√©e
            doc_result = await self.agent.enterprise_documentation_advanced()
            
            print(f"‚úÖ Documentation type : {doc_result.get('documentation_type', 'N/A')}")
            print(f"‚úÖ Analyse intelligente : {bool(doc_result.get('intelligent_analysis'))}")
            print(f"‚úÖ Contenu adaptatif : {bool(doc_result.get('adaptive_content'))}")
            print(f"‚úÖ M√©triques qualit√© : {bool(doc_result.get('quality_metrics'))}")
            print(f"‚úÖ Multi-format : {len(doc_result.get('multi_format_outputs', []))}")
            
            # Test documentation compl√®te
            doc_complete = await self.agent.documenter_complete()
            
            print(f"‚úÖ Documentation compl√®te : {doc_complete.get('status', 'N/A')}")
            print(f"‚úÖ Dur√©e : {doc_complete.get('duree', 0):.2f}s")
            
            self.test_results.append({
                "test": "documentation_enterprise",
                "status": "SUCCESS",
                "doc_advanced": bool(doc_result),
                "doc_complete": doc_complete.get('status') == 'SUCCESS'
            })
            
        except Exception as e:
            print(f"‚ùå Erreur documentation : {e}")
            self.test_results.append({
                "test": "documentation_enterprise",
                "status": "ERROR",
                "error": str(e)
            })
    
    async def test_peer_review_correction(self):
        """Test 4 : Fonctionnalit√©s peer review et correction (enrichies)"""
        print("\nüîç TEST 4 : Peer review et correction")
        print("-" * 40)
        
        try:
            # Simuler r√©sultats de test avec d√©faillances
            fake_test_results = {
                'tests_results': {
                    'utilisation_reelle': {
                        'details': {
                            'instantiation': {'status': 'FAILED'},
                            'pattern_factory_methods': {'status': 'FAILED'}
                        },
                        'tests_passed': 2,
                        'tests_executed': 8
                    }
                },
                'global_scores': {
                    'utilisation_score': 2.5
                }
            }
            
            # Cr√©er un agent de test temporaire
            test_agent_content = '''#!/usr/bin/env python3
"""Agent de test pour correction"""

class TestAgent:
    async async def test_method(self):
        pass
'''
            
            test_agent_path = Path("test_agent_temp.py")
            test_agent_path.write_text(test_agent_content, encoding='utf-8')
            
            try:
                # Test correction d√©faillances
                correction_result = await self.agent.corriger_defaillances_utilisation_complete(
                    str(test_agent_path), 
                    fake_test_results
                )
                
                print(f"‚úÖ Correction status : {correction_result.get('status', 'N/A')}")
                print(f"‚úÖ Corrections appliqu√©es : {correction_result.get('corrections_count', 0)}")
                
                if correction_result.get('corrections_applied'):
                    print("üìã Corrections d√©taill√©es :")
                    for correction in correction_result['corrections_applied'][:5]:
                        print(f"  - {correction}")
                
                # Test certification finale
                certification = await self.agent.generer_certification_finale(
                    str(test_agent_path),
                    fake_test_results
                )
                
                print(f"‚úÖ Certification : {certification.get('grade', 'N/A')}")
                print(f"‚úÖ Am√©lioration : +{certification.get('amelioration', 0):.1f}%")
                
                self.test_results.append({
                    "test": "peer_review_correction",
                    "status": "SUCCESS",
                    "corrections_applied": correction_result.get('corrections_count', 0),
                    "certification_grade": certification.get('grade')
                })
                
            finally:
                # Nettoyer fichier temporaire
                if test_agent_path.exists():
                    test_agent_path.unlink()
            
        except Exception as e:
            print(f"‚ùå Erreur peer review : {e}")
            self.test_results.append({
                "test": "peer_review_correction",
                "status": "ERROR",
                "error": str(e)
            })
    
    async def test_execution_taches(self):
        """Test 5 : Ex√©cution t√¢ches Pattern Factory"""
        print("\n‚ö° TEST 5 : Ex√©cution t√¢ches Pattern Factory")
        print("-" * 40)
        
        try:
            # Test t√¢che documentation
            task_doc = Task("documenter_complete", "Documentation compl√®te")
            result_doc = await self.agent.execute_task(task_doc)
            
            print(f"‚úÖ T√¢che documentation : {result_doc.success}")
            print(f"‚úÖ Donn√©es retourn√©es : {bool(result_doc.data)}")
            
            # Test t√¢che enterprise
            task_enterprise = Task("enterprise_documentation", "Documentation enterprise")
            result_enterprise = await self.agent.execute_task(task_enterprise)
            
            print(f"‚úÖ T√¢che enterprise : {result_enterprise.success}")
            
            self.test_results.append({
                "test": "execution_taches",
                "status": "SUCCESS",
                "task_doc_success": result_doc.success,
                "task_enterprise_success": result_enterprise.success
            })
            
        except Exception as e:
            print(f"‚ùå Erreur ex√©cution t√¢ches : {e}")
            self.test_results.append({
                "test": "execution_taches",
                "status": "ERROR",
                "error": str(e)
            })
    
    async def test_integration_complete(self):
        """Test 6 : Int√©gration compl√®te"""
        print("\nüåü TEST 6 : Int√©gration compl√®te")
        print("-" * 40)
        
        try:
            # V√©rifier que toutes les statistiques sont initialis√©es
            stats = {
                "documents_generes": len(self.agent.documents_generes),
                "guides_crees": len(self.agent.guides_crees),
                "schemas_documentes": len(self.agent.schemas_documentes),
                "reviews_effectuees": len(self.agent.reviews_effectuees),
                "corrections_appliquees": len(self.agent.corrections_appliquees),
                "certifications_generees": len(self.agent.certifications_generees)
            }
            
            print("üìä Statistiques int√©gr√©es :")
            for stat_name, stat_value in stats.items():
                print(f"  - {stat_name} : {stat_value}")
            
            # Test health check final
            final_health = await self.agent.health_check()
            
            print(f"‚úÖ Health check final : {final_health['status']}")
            print(f"‚úÖ Agent pr√™t : {final_health.get('ready', False)}")
            
            self.test_results.append({
                "test": "integration_complete",
                "status": "SUCCESS",
                "statistics": stats,
                "final_health": final_health['status']
            })
            
        except Exception as e:
            print(f"‚ùå Erreur int√©gration : {e}")
            self.test_results.append({
                "test": "integration_complete",
                "status": "ERROR",
                "error": str(e)
            })
    
    async def afficher_resume_final(self):
        """Affiche le r√©sum√© final des tests"""
        print("\n" + "=" * 80)
        print("üèÜ R√âSUM√â FINAL - Agent 05 Documenteur + Peer-Reviewer ENRICHI")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        tests_success = sum(1 for test in self.test_results if test['status'] == 'SUCCESS')
        tests_error = total_tests - tests_success
        
        print(f"üìä R√âSULTATS GLOBAUX :")
        print(f"  - Tests ex√©cut√©s : {total_tests}")
        print(f"  - Tests r√©ussis : {tests_success} ‚úÖ")
        print(f"  - Tests √©chou√©s : {tests_error} ‚ùå")
        print(f"  - Taux de r√©ussite : {(tests_success/total_tests)*100:.1f}%")
        
        print(f"\nüìã D√âTAIL DES TESTS :")
        for i, test in enumerate(self.test_results, 1):
            status_emoji = "‚úÖ" if test['status'] == 'SUCCESS' else "‚ùå"
            print(f"  {i}. {status_emoji} {test['test']}")
            
            if test['status'] == 'ERROR':
                print(f"     Erreur : {test.get('error', 'N/A')}")
        
        # Validation finale
        if tests_success == total_tests:
            print(f"\nüéâ VALIDATION COMPL√àTE R√âUSSIE !")
            print(f"   L'Agent 05 ENRICHI combine parfaitement :")
            print(f"   üìö Capacit√©s documentation enterprise (Agent 05)")
            print(f"   üîç Capacit√©s peer review et correction (Agents 16 & 17)")
            print(f"   ‚ö° Conformit√© Pattern Factory NextGeneration")
        else:
            print(f"\n‚ö†Ô∏è VALIDATION PARTIELLE")
            print(f"   Certains tests ont √©chou√©, r√©vision n√©cessaire")
        
        # Sauvegarder r√©sultats
        await self.sauvegarder_resultats_test()
    
    async def sauvegarder_resultats_test(self):
        """Sauvegarde les r√©sultats de test"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            report_file = Path(f"test_agent_05_enrichi_{timestamp}.json")
            
            test_report = {
                "test_type": "agent_05_documenteur_peer_reviewer_enrichi",
                "timestamp": datetime.now().isoformat(),
                "total_tests": len(self.test_results),
                "tests_success": sum(1 for test in self.test_results if test['status'] == 'SUCCESS'),
                "tests_results": self.test_results
            }
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(test_report, f, indent=2, ensure_ascii=False, default=str)
            
            print(f"üìÑ Rapport de test sauvegard√© : {report_file}")
            
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde rapport : {e}")

async def main():
    """Fonction principale de test"""
    tester = TestAgent05Enrichi()
    success = await tester.run_all_tests()
    
    if success:
        print(f"\nüéØ TESTS TERMIN√âS AVEC SUCC√àS")
    else:
        print(f"\nüí• TESTS TERMIN√âS AVEC ERREURS")
    
    return success

if __name__ == "__main__":
    asyncio.run(main()) 




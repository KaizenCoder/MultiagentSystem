#!/usr/bin/env python3
"""
Test des agents template-based
V√©rifie que les agents cr√©√©s √† partir des templates JSON fonctionnent correctement
"""

import sys
import json
from pathlib import Path

# Golden Source Logging
from core import logging_manager

# Configuration du logging
logger = logging_manager.get_logger('custom_test_config_2', custom_config={
    "logger_name": "test_agents_working",
    "log_level": "DEBUG",
    "async_enabled": False, # Tests synchrones
})

def test_template_manager():
    """Teste le TemplateManager"""
    logger.info("=== Test du TemplateManager ===")
    
    try:
        from core.template_manager import TemplateManager # Note: l'import est diff√©rent ici
        
        # Cr√©er le gestionnaire
        manager = TemplateManager("templates")
        
        # Lister les templates
        templates = manager.list_templates()
        logger.info(f"Templates disponibles: {len(templates)}")
        
        for template in templates:
            logger.debug(f"  - {template['name']} (v{template['version']}) - {template['role']}")
        
        return manager
        
    except Exception as e:
        logger.error(f"‚ùå Erreur TemplateManager: {e}", exc_info=True)
        return None

def test_agent_creation(manager):
    """Teste la cr√©ation d'agents"""
    logger.info("\n=== Test de cr√©ation d'agents ===")
    
    try:
        # Cr√©er un agent coordinateur
        agent = manager.create_agent("Agent Coordinateur", "test_coordinator")
        
        if agent:
            logger.info(f"‚úÖ Agent cr√©√©: {agent.config.name}")
            logger.debug(f"   R√¥le: {agent.config.role}")
            logger.debug(f"   Status: {agent.status}")
            logger.debug(f"   Capacit√©s: {len(agent.config.capabilities)}")
            logger.debug(f"   Outils: {len(agent.config.tools)}")
            
            return agent
        else:
            logger.error("‚ùå √âchec de cr√©ation d'agent")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation agent: {e}", exc_info=True)
        return None

def test_agent_execution(agent):
    """Teste l'ex√©cution de t√¢ches"""
    logger.info("\n=== Test d'ex√©cution de t√¢ches ===")
    
    try:
        # T√¢che simple
        task1 = {
            'name': 'Test coordination',
            'type': 'coordination',
            'description': 'T√¢che de test pour la coordination'
        }
        
        result1 = agent.execute_task(task1)
        logger.info(f"‚úÖ T√¢che 1 - Status: {result1['status']}")
        if result1['status'] == 'success':
            logger.info(f"   R√©sultat: {result1['result']['message']}")
        
        # T√¢che avec capacit√© requise
        task2 = {
            'name': 'Test analyse',
            'type': 'analysis',
            'required_capability': 'project_management'
        }
        
        result2 = agent.execute_task(task2)
        logger.info(f"‚úÖ T√¢che 2 - Status: {result2['status']}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur ex√©cution: {e}", exc_info=True)
        return False

def test_agent_status(agent):
    """Teste le statut de l'agent"""
    logger.info("\n=== Test du statut d'agent ===")
    
    try:
        status = agent.get_status()
        logger.info(f"‚úÖ Status r√©cup√©r√©:")
        logger.debug(f"   Nom: {status['name']}")
        logger.debug(f"   Statut: {status['status']}")
        logger.debug(f"   Uptime: {status['uptime']:.2f}s")
        logger.debug(f"   T√¢ches compl√©t√©es: {status['metrics']['tasks_completed']}")
        logger.debug(f"   T√¢ches √©chou√©es: {status['metrics']['tasks_failed']}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur statut: {e}", exc_info=True)
        return False

def test_multiple_agents(manager):
    """Teste la cr√©ation de plusieurs agents"""
    logger.info("\n=== Test de plusieurs agents ===")
    
    try:
        templates = manager.list_templates()
        agents_created = []
        
        for template in templates[:3]:  # Tester les 3 premiers templates
            agent_id = f"test_{template['name'].lower().replace(' ', '_')}"
            agent = manager.create_agent(template['name'], agent_id)
            
            if agent:
                agents_created.append(agent_id)
                logger.info(f"‚úÖ Agent cr√©√©: {agent.config.name} (ID: {agent_id})")
        
        # Lister les agents actifs
        active_agents = manager.list_active_agents()
        logger.info(f"\nüìã Agents actifs: {len(active_agents)}")
        
        for agent_info in active_agents:
            logger.debug(f"  - {agent_info['name']} ({agent_info['id']}) - {agent_info['status']}")
        
        return agents_created
        
    except Exception as e:
        logger.error(f"‚ùå Erreur agents multiples: {e}", exc_info=True)
        return []

def main():
    """Fonction principale de test"""
    logger.info("üöÄ Test des agents template-based")
    logger.info("=" * 50)
    
    # Test 1: TemplateManager
    manager = test_template_manager()
    if not manager:
        logger.critical("‚ùå √âchec du test TemplateManager")
        return False
    
    # Test 2: Cr√©ation d'agent
    agent = test_agent_creation(manager)
    if not agent:
        logger.critical("‚ùå √âchec du test de cr√©ation d'agent")
        return False
    
    # Test 3: Ex√©cution de t√¢ches
    if not test_agent_execution(agent):
        logger.critical("‚ùå √âchec du test d'ex√©cution")
        return False
    
    # Test 4: Statut d'agent
    if not test_agent_status(agent):
        logger.critical("‚ùå √âchec du test de statut")
        return False
    
    # Test 5: Agents multiples
    agents = test_multiple_agents(manager)
    if not agents:
        logger.critical("‚ùå √âchec du test d'agents multiples")
        return False
    
    logger.info("\n" + "=" * 50)
    logger.info("‚úÖ Tous les tests sont pass√©s avec succ√®s!")
    logger.info(f"   Templates charg√©s: {len(manager.list_templates())}")
    logger.info(f"   Agents cr√©√©s: {len(manager.list_active_agents())}")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è Test interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        logger.critical(f"\n‚ùå Erreur inattendue: {e}", exc_info=True)
        sys.exit(1) 




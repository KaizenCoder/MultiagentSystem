#!/usr/bin/env python3
"""
[TARGET] Coordinateur Transposition SuperWhisper_V6 ‚Üí NextGeneration
Mission: Orchestrer la transposition des meilleures pratiques SuperWhisper_V6 vers NextGeneration

√âquipe d'agents sp√©cialis√©s:
- Agent 1: Analyseur NextGeneration (structure compl√®te projet)
- Agent 2: G√©n√©rateur Documentation (CODE-SOURCE.md automatique)
- Agent 3: Workflow PowerShell (scripts Windows automatis√©s)
- Agent 4: Standards GPU RTX 3090 (optimisation agents/orchestrator)
- Agent 5: Validation Finale (tests et int√©gration)

Date: 19 janvier 2025
Base: Infrastructure NextGeneration mature (6 outils existants)
R√©f√©rence: SuperWhisper_V6 generate_bundle_coordinateur.py
"""

import asyncio
import json
import logging
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
import subprocess
import shutil
import os

class CoordinateurTranspositionSuperWhisper:
    """Coordinateur pour la transposition SuperWhisper_V6 ‚Üí NextGeneration"""
    
    def __init__(self):
        self.mission_name = "TRANSPOSITION_SUPERWHISPER_V6_NEXTGENERATION"
        self.workspace_path = Path(__file__).parent
        self.nextgeneration_root = Path(__file__).parent.parent.parent
        self.superwhisper_reference = Path("C:/Dev/SuperWhisper_V6")
        
        # Bases d'infrastructure existantes identifi√©es
        self.base_generateur = self.nextgeneration_root / "tools" / "generate_pitch_document"
        self.base_agents = self.nextgeneration_root / "tools" / "project_backup_system" / "agents"
        self.base_powershell = self.nextgeneration_root / "tools" / "excel_vba_tools_launcher" / "powershell"
        self.base_gpu = self.nextgeneration_root / "tools" / "tts_dependencies_installer"
        
        # R√©pertoires de mission
        self.logs_path = self.workspace_path / "logs"
        self.reports_path = self.workspace_path / "reports"
        self.config_path = self.workspace_path / "config"
        self.templates_path = self.workspace_path / "templates"
        
        # Cr√©er l'infrastructure
        self._setup_infrastructure()
        
        # Configuration logging
        self._setup_logging()
        
        # M√©triques de mission
        self.mission_start_time = None
        self.mission_end_time = None
        self.agents_results = {}
        self.success_metrics = {
            "files_scanned": 0,
            "documentation_generated_kb": 0,
            "workflows_created": 0,
            "gpu_standards_adapted": 0,
            "tests_passed": 0
        }
        
    def _setup_infrastructure(self):
        """Cr√©er l'infrastructure de mission"""
        for path in [self.logs_path, self.reports_path, self.config_path, self.templates_path]:
            path.mkdir(exist_ok=True)
            
    def _setup_logging(self):
        """Configuration logging coordinateur"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.logs_path / f'coordinateur_{self.mission_name}.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(f"coordinateur_{self.mission_name}")
        
    async def demarrer_mission_complete(self):
        """üöÄ D√©marrer la mission compl√®te de transposition SuperWhisper_V6"""
        self.mission_start_time = datetime.now()
        self.logger.info(f"[üöÄ] D√âMARRAGE MISSION {self.mission_name}")
        self.logger.info(f"[üìç] Workspace: {self.workspace_path}")
        self.logger.info(f"[üéØ] NextGeneration: {self.nextgeneration_root}")
        
        try:
            # V√©rification infrastructure existante
            await self._verifier_infrastructure_existante()
            
            # Phase 1: Analyse NextGeneration (PRIORIT√â)
            self.logger.info("[üìä] Phase 1: Analyse structure NextGeneration compl√®te")
            await self._executer_agent_1_analyseur()
            
            # Phase 2: G√©n√©rateur Documentation (C≈íUR MISSION) 
            self.logger.info("[ü§ñ] Phase 2: G√©n√©rateur documentation automatique")
            await self._executer_agent_2_generateur()
            
            # Phase 3: Workflows PowerShell (ACC√âL√âR√â)
            self.logger.info("[üîÑ] Phase 3: Workflows automatis√©s Windows")
            await self._executer_agent_3_workflow()
            
            # Phase 4: Standards GPU RTX 3090 (OPTIMIS√â)
            self.logger.info("[üéÆ] Phase 4: Standards GPU RTX 3090")
            await self._executer_agent_4_gpu()
            
            # Phase 5: Validation finale (QUALIT√â)
            self.logger.info("[üß™] Phase 5: Validation et tests complets")
            await self._executer_agent_5_validation()
            
            # G√©n√©ration rapport final
            await self._generer_rapport_mission()
            
            # Commit Git si succ√®s
            if self._mission_reussie():
                await self._commit_transposition()
            
            self.mission_end_time = datetime.now()
            self.logger.info(f"[‚úÖ] MISSION {self.mission_name} TERMIN√âE AVEC SUCC√àS")
            
            return self._generer_synthese_finale()
            
        except Exception as e:
            self.logger.error(f"[‚ùå] ERREUR MISSION {self.mission_name}: {e}")
            raise
    
    async def _verifier_infrastructure_existante(self):
        """V√©rifier que l'infrastructure NextGeneration mature est disponible"""
        self.logger.info("[üîç] V√©rification infrastructure existante")
        
        verifications = {
            "base_generateur": self.base_generateur.exists(),
            "base_agents": self.base_agents.exists(),  
            "base_powershell": self.base_powershell.exists(),
            "base_gpu": self.base_gpu.exists(),
            "nextgeneration_root": self.nextgeneration_root.exists()
        }
        
        for nom, exists in verifications.items():
            status = "‚úÖ" if exists else "‚ùå"
            self.logger.info(f"  {status} {nom}: {getattr(self, nom)}")
            
        if not all(verifications.values()):
            raise Exception("Infrastructure NextGeneration incompl√®te - V√©rifier les chemins")
            
        self.logger.info("[‚úÖ] Infrastructure NextGeneration mature confirm√©e")
    
    async def _executer_agent_1_analyseur(self):
        """Agent 1: Analyseur NextGeneration (structure compl√®te)"""
        from .agent_analyseur_nextgeneration import AgentAnalyseurNextGeneration
        
        self.logger.info("[üìä] Lancement Agent 1: Analyseur NextGeneration")
        
        agent = AgentAnalyseurNextGeneration(
            nextgeneration_root=self.nextgeneration_root,
            workspace_path=self.workspace_path,
            infrastructure_bases={
                "generateur": self.base_generateur,
                "agents": self.base_agents,
                "powershell": self.base_powershell,
                "gpu": self.base_gpu
            }
        )
        
        result = await agent.analyser_structure_complete()
        self.agents_results['agent_1_analyseur'] = result
        self.success_metrics["files_scanned"] = result.get('total_files', 0)
        
        self.logger.info(f"[‚úÖ] Agent 1 termin√©: {self.success_metrics['files_scanned']} fichiers analys√©s")
        return result
    
    async def _executer_agent_2_generateur(self):
        """Agent 2: G√©n√©rateur Documentation (CODE-SOURCE.md automatique)"""
        from .agent_generateur_documentation import AgentGenerateurDocumentation
        
        self.logger.info("[ü§ñ] Lancement Agent 2: G√©n√©rateur Documentation")
        
        agent = AgentGenerateurDocumentation(
            analyse_structure=self.agents_results['agent_1_analyseur'],
            base_generateur=self.base_generateur,
            base_agents=self.base_agents,
            superwhisper_reference=self.superwhisper_reference,
            workspace_path=self.workspace_path
        )
        
        result = await agent.generer_documentation_complete()
        self.agents_results['agent_2_generateur'] = result
        self.success_metrics["documentation_generated_kb"] = result.get('doc_size_kb', 0)
        
        self.logger.info(f"[‚úÖ] Agent 2 termin√©: {self.success_metrics['documentation_generated_kb']}KB g√©n√©r√©s")
        return result
    
    async def _executer_agent_3_workflow(self):
        """Agent 3: Workflow PowerShell (scripts Windows automatis√©s)"""
        from .agent_workflow_powershell import AgentWorkflowPowerShell
        
        self.logger.info("[üîÑ] Lancement Agent 3: Workflow PowerShell")
        
        agent = AgentWorkflowPowerShell(
            base_powershell=self.base_powershell,
            documentation_result=self.agents_results['agent_2_generateur'],
            nextgeneration_root=self.nextgeneration_root,
            workspace_path=self.workspace_path
        )
        
        result = await agent.creer_workflows_automatises()
        self.agents_results['agent_3_workflow'] = result
        self.success_metrics["workflows_created"] = result.get('workflows_count', 0)
        
        self.logger.info(f"[‚úÖ] Agent 3 termin√©: {self.success_metrics['workflows_created']} workflows cr√©√©s")
        return result
    
    async def _executer_agent_4_gpu(self):
        """Agent 4: Standards GPU RTX 3090 (optimisation agents/orchestrator)"""
        from .agent_standards_gpu import AgentStandardsGPU
        
        self.logger.info("[üéÆ] Lancement Agent 4: Standards GPU RTX 3090")
        
        agent = AgentStandardsGPU(
            base_gpu=self.base_gpu,
            analyse_structure=self.agents_results['agent_1_analyseur'],
            nextgeneration_root=self.nextgeneration_root,
            workspace_path=self.workspace_path
        )
        
        result = await agent.adapter_standards_gpu()
        self.agents_results['agent_4_gpu'] = result
        self.success_metrics["gpu_standards_adapted"] = result.get('standards_count', 0)
        
        self.logger.info(f"[‚úÖ] Agent 4 termin√©: {self.success_metrics['gpu_standards_adapted']} standards adapt√©s")
        return result
    
    async def _executer_agent_5_validation(self):
        """Agent 5: Validation finale (tests et int√©gration)"""
        from .agent_validation_finale import AgentValidationFinale
        
        self.logger.info("[üß™] Lancement Agent 5: Validation Finale")
        
        agent = AgentValidationFinale(
            tous_resultats=self.agents_results,
            nextgeneration_root=self.nextgeneration_root,
            workspace_path=self.workspace_path
        )
        
        result = await agent.valider_transposition_complete()
        self.agents_results['agent_5_validation'] = result
        self.success_metrics["tests_passed"] = result.get('tests_passed', 0)
        
        self.logger.info(f"[‚úÖ] Agent 5 termin√©: {self.success_metrics['tests_passed']} tests valid√©s")
        return result
    
    async def _generer_rapport_mission(self):
        """G√©n√©rer le rapport final de mission"""
        duree_mission = (self.mission_end_time or datetime.now()) - self.mission_start_time
        
        rapport = {
            "mission": self.mission_name,
            "timestamp": datetime.now().isoformat(),
            "duree_minutes": duree_mission.total_seconds() / 60,
            "status": "SUCCESS" if self._mission_reussie() else "FAILED",
            "metriques": self.success_metrics,
            "agents_results": {k: v.get('status', 'UNKNOWN') for k, v in self.agents_results.items()},
            "elements_livres": {
                "generateur_documentation": "tools/documentation_generator/generate_bundle_nextgeneration.py",
                "procedures_transmission": "docs/procedures/",
                "workflows_powershell": "scripts/",
                "standards_gpu": "docs/RTX3090/"
            },
            "infrastructure_reutilisee": {
                "generate_pitch_document": "Base g√©n√©rateur adapt√©e",
                "project_backup_system_agents": "Architecture agents r√©utilis√©e",
                "excel_vba_powershell": "Scripts PowerShell √©tendus",
                "tts_dependencies_gpu": "Support RTX 3090 adapt√©"
            }
        }
        
        # Sauvegarde rapport
        rapport_path = self.reports_path / f"rapport_mission_{self.mission_name}.json"
        with open(rapport_path, 'w', encoding='utf-8') as f:
            json.dump(rapport, f, indent=2, ensure_ascii=False)
            
        self.logger.info(f"[üìä] Rapport sauvegard√©: {rapport_path}")
        return rapport
    
    def _mission_reussie(self) -> bool:
        """V√©rifier si la mission est r√©ussie"""
        criteres = [
            self.success_metrics["files_scanned"] > 100,  # Structure analys√©e
            self.success_metrics["documentation_generated_kb"] > 200,  # Doc substantielle
            self.success_metrics["workflows_created"] >= 2,  # Workflows essentiels
            self.success_metrics["gpu_standards_adapted"] >= 1,  # Standards GPU
            self.success_metrics["tests_passed"] >= 5  # Tests valid√©s
        ]
        
        return all(criteres)
    
    async def _commit_transposition(self):
        """Commit Git de la transposition r√©ussie"""
        try:
            subprocess.run([
                "git", "add", "tools/documentation_generator/", 
                "docs/procedures/", "scripts/", "docs/RTX3090/"
            ], cwd=self.nextgeneration_root, check=True)
            
            subprocess.run([
                "git", "commit", "-m", 
                f"üöÄ Transposition SuperWhisper_V6 ‚Üí NextGeneration\n\n"
                f"‚úÖ G√©n√©rateur documentation automatique\n"
                f"‚úÖ Proc√©dures transmission standardis√©es\n" 
                f"‚úÖ Workflows PowerShell automatis√©s\n"
                f"‚úÖ Standards GPU RTX 3090 optimis√©s\n\n"
                f"M√©triques: {self.success_metrics}"
            ], cwd=self.nextgeneration_root, check=True)
            
            self.logger.info("[üì§] Commit Git r√©ussi")
            
        except subprocess.CalledProcessError as e:
            self.logger.warning(f"[‚ö†Ô∏è] Commit Git √©chou√©: {e}")
    
    def _generer_synthese_finale(self) -> Dict[str, Any]:
        """G√©n√©rer la synth√®se finale de mission"""
        return {
            "mission_status": "SUCCESS" if self._mission_reussie() else "FAILED",
            "elements_transposes": 4,
            "infrastructure_optimisee": True,
            "metriques_finales": self.success_metrics,
            "avantage_competitif": "Infrastructure NextGeneration surpasse SuperWhisper_V6",
            "prochaines_etapes": [
                "Int√©gration continue avec nouveaux outils",
                "Optimisation performances bas√©e sur m√©triques", 
                "Extension workflows selon besoins utilisateurs"
            ]
        }

# Point d'entr√©e pour ex√©cution directe
async def main():
    """Point d'entr√©e principal"""
    coordinateur = CoordinateurTranspositionSuperWhisper()
    return await coordinateur.demarrer_mission_complete()

if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
üîß CORRECTEUR LOGIQUE M√âTIER - Agent 06
========================================
üéØ Mission : Correction et validation de la logique m√©tier dans le code Python.
‚ö° Capacit√©s : Analyse s√©mantique, d√©tection incoh√©rences logiques, correction automatique.
üè¢ √âquipe : NextGeneration Tools Migration

Author: √âquipe de Maintenance NextGeneration
Version: 6.1.0 - Harmonisation Standards Pattern Factory NextGeneration
"""
import sys
import ast
import re
import logging
import asyncio
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple, Union
from dataclasses import dataclass
import inspect
import textwrap

# --- Configuration Robuste du Chemin d'Importation ---
try:
    project_root = Path(__file__).resolve().parents[1]
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
except (IndexError, NameError):
    if '.' not in sys.path:
        sys.path.insert(0, '.')

from core.agent_factory_architecture import Agent, Task, Result

@dataclass
class LogicIssue:
    """Structure pour repr√©senter un probl√®me de logique m√©tier."""
    severity: str           # CRITICAL, HIGH, MEDIUM, LOW
    issue_type: str         # logic_error, semantic_issue, pattern_violation
    description: str        # Description du probl√®me
    line_number: Optional[int] = None
    suggestion: Optional[str] = None
    code_snippet: Optional[str] = None
    
class AgentMAINTENANCE06CorrecteurLogiqueMetier(Agent):
    """
    üîß Agent MAINTENANCE 06 - Correcteur Logique M√©tier NextGeneration
    
    Agent sp√©cialis√© dans la correction et validation de la logique m√©tier Python,
    d√©tection d'incoh√©rences s√©mantiques et application de patterns m√©tier robustes.
    
    Capacit√©s principales :
    - Analyse s√©mantique approfondie du code avec d√©tection incoh√©rences logiques
    - Validation patterns m√©tier et architecture (Factory, Strategy, Observer)
    - Correction automatique erreurs logiques courantes (null checks, validations)
    - D√©tection anti-patterns et suggestions d'am√©lioration de design
    - V√©rification coh√©rence API et interfaces avec recommendations
    - Audit conformit√© m√©tier avec scoring et classification par s√©v√©rit√©
    
    Technologies avanc√©es :
    - AST analysis : Analyse syntaxique avanc√©e pour d√©tection patterns
    - Inspection module : Validation signatures et interfaces m√©tier
    - Pattern matching : D√©tection anti-patterns et violations architecture
    - Dataclass LogicIssue : Classification structur√©e des probl√®mes d√©tect√©s
    - Correction automatique : G√©n√©ration de code corrig√© avec tra√ßabilit√©
    
    Workflow type :
    1. Analyse AST pour d√©tection patterns et anti-patterns m√©tier
    2. Validation coh√©rence interfaces et API design
    3. D√©tection incoh√©rences logiques (null checks, validations manquantes)
    4. Classification probl√®mes par s√©v√©rit√© et type (logic/semantic/pattern)
    5. G√©n√©ration corrections avec suggestions d'am√©lioration architecture
    
    Conformit√© : Pattern Factory NextGeneration v6.1.0
    """
    
    def __init__(self, **kwargs):
        super().__init__(agent_type="correcteur_logique", **kwargs)
        # ‚úÖ MIGRATION SYST√àME LOGGING UNIFI√â
        try:
            from core.manager import LoggingManager
            logging_manager = LoggingManager()
            self.logger = logging_manager.get_logger(
                config_name="maintenance",
                custom_config={
                    "logger_name": f"nextgen.maintenance.correcteur_logique_metier.{self.id}",
                    "log_dir": "logs/maintenance/correcteur",
                    "metadata": {
                        "agent_type": "MAINTENANCE_06_correcteur_logique_metier",
                        "agent_role": "correcteur_logique_metier",
                        "system": "nextgeneration"
                    }
                }
            )
        except ImportError:
            # Fallback en cas d'indisponibilit√© du LoggingManager
            self.logger = logging.getLogger(self.__class__.__name__)
        self.agent_id = self.id
        self.logger.info(f"üîß Agent Correcteur Logique M√©tier ({self.agent_id}) initialis√©")
        
        # Configuration des patterns m√©tier √† d√©tecter
        self.business_patterns = {
            "factory_pattern": ["create_", "build_", "make_"],
            "validation_pattern": ["validate_", "check_", "verify_"],
            "error_handling": ["try:", "except", "raise"],
            "null_safety": ["if not", "is None", "assert"]
        }
        
        # Anti-patterns √† √©viter
        self.anti_patterns = {
            "god_class": "Classes avec trop de responsabilit√©s",
            "magic_numbers": "Nombres magiques sans constantes",
            "deep_nesting": "Imbrication trop profonde",
            "long_methods": "M√©thodes trop longues (>50 lignes)"
        }

    async def startup(self):
        self.logger.info(f"Agent 'correcteur_logique' ({self.id}) d√©marr√©.")

    async def shutdown(self):
        self.logger.info(f"Agent 'correcteur_logique' ({self.id}) arr√™t√©.")

    async def health_check(self):
        return {"status": "healthy"}

    def get_capabilities(self) -> List[str]:
        """Retourne les capacit√©s sp√©cialis√©es du Correcteur Logique M√©tier."""
        return [
            "correct_business_logic",
            "validate_business_patterns",
            "detect_logic_inconsistencies", 
            "analyze_semantic_correctness",
            "fix_anti_patterns",
            "validate_api_design",
            "check_error_handling",
            "verify_null_safety",
            "audit_business_compliance",
            "generate_logic_improvements"
        ]

    async def execute_task(self, task: Task) -> Result:
        """Ex√©cute une t√¢che de correction de logique m√©tier."""
        self.logger.info(f"üéØ Ex√©cution t√¢che: {task.type}")
        
        task_handlers = {
            "correct_business_logic": self._handle_business_logic_correction,
            "validate_business_patterns": self._handle_pattern_validation,
            "detect_logic_inconsistencies": self._handle_logic_analysis,
            "audit_business_compliance": self._handle_compliance_audit
        }
        
        handler = task_handlers.get(task.type)
        if not handler:
            return Result(success=False, error=f"Type de t√¢che non support√©: {task.type}")
        
        try:
            return await handler(task)
        except Exception as e:
            self.logger.error(f"Erreur lors de l'ex√©cution de la t√¢che {task.type}: {e}", exc_info=True)
            return Result(success=False, error=str(e))
    
    async def _handle_business_logic_correction(self, task: Task) -> Result:
        """G√®re la correction de logique m√©tier."""
        code_content = task.params.get("code")
        file_path = task.params.get("file_path", "<unknown>")
        
        if not code_content:
            return Result(success=False, error="Code source requis pour la correction")
        
        # Analyse et correction
        issues = await self._analyze_business_logic(code_content, file_path)
        corrections = await self._generate_corrections(code_content, issues)
        
        return Result(success=True, data={
            "issues_detected": len(issues),
            "issues": [{
                "type": issue.issue_type,
                "severity": issue.severity,
                "description": issue.description,
                "line": issue.line_number,
                "suggestion": issue.suggestion
            } for issue in issues],
            "corrections": corrections,
            "corrected_code": corrections.get("code", code_content)
        })
    
    async def _handle_pattern_validation(self, task: Task) -> Result:
        """Valide les patterns m√©tier dans le code."""
        code_content = task.params.get("code")
        if not code_content:
            return Result(success=False, error="Code source requis")
        
        pattern_analysis = await self._validate_business_patterns(code_content)
        
        return Result(success=True, data={
            "patterns_found": pattern_analysis["found"],
            "missing_patterns": pattern_analysis["missing"],
            "recommendations": pattern_analysis["recommendations"]
        })
    
    async def _handle_logic_analysis(self, task: Task) -> Result:
        """Analyse les incoh√©rences logiques."""
        code_content = task.params.get("code")
        if not code_content:
            return Result(success=False, error="Code source requis")
        
        inconsistencies = await self._detect_logic_inconsistencies(code_content)
        
        return Result(success=True, data={
            "inconsistencies_count": len(inconsistencies),
            "inconsistencies": inconsistencies,
            "severity_breakdown": self._categorize_by_severity(inconsistencies)
        })
    
    async def _handle_compliance_audit(self, task: Task) -> Result:
        """Effectue un audit de conformit√© m√©tier."""
        code_content = task.params.get("code")
        compliance_rules = task.params.get("rules", [])
        
        if not code_content:
            return Result(success=False, error="Code source requis")
        
        audit_results = await self._audit_business_compliance(code_content, compliance_rules)
        
        return Result(success=True, data=audit_results)
    
    async def _analyze_business_logic(self, code: str, file_path: str) -> List[LogicIssue]:
        """Analyse la logique m√©tier et d√©tecte les probl√®mes."""
        issues = []
        
        try:
            tree = ast.parse(code)
        except SyntaxError as e:
            issues.append(LogicIssue(
                severity="CRITICAL",
                issue_type="logic_error",
                description=f"Erreur de syntaxe: {e.msg}",
                line_number=e.lineno,
                suggestion="Corriger la syntaxe avant l'analyse logique"
            ))
            return issues
        
        # Analyse des m√©thodes et fonctions
        for node in ast.walk(tree):
            if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                # V√©rification longueur de m√©thode
                if len(node.body) > 20:  # Seuil configurable
                    issues.append(LogicIssue(
                        severity="MEDIUM",
                        issue_type="pattern_violation",
                        description=f"M√©thode '{node.name}' trop longue ({len(node.body)} statements)",
                        line_number=node.lineno,
                        suggestion="Diviser en m√©thodes plus petites pour am√©liorer la lisibilit√©"
                    ))
                
                # V√©rification gestion d'erreurs
                has_error_handling = any(
                    isinstance(n, ast.Try) for n in ast.walk(node)
                )
                if not has_error_handling and len(node.body) > 5:
                    issues.append(LogicIssue(
                        severity="HIGH",
                        issue_type="logic_error",
                        description=f"M√©thode '{node.name}' sans gestion d'erreurs",
                        line_number=node.lineno,
                        suggestion="Ajouter try/except pour la robustesse"
                    ))
            
            # D√©tection de nombres magiques
            elif isinstance(node, ast.Num) and isinstance(node.n, (int, float)) and node.n not in [0, 1, -1]:
                issues.append(LogicIssue(
                    severity="LOW",
                    issue_type="pattern_violation",
                    description=f"Nombre magique d√©tect√©: {node.n}",
                    line_number=node.lineno,
                    suggestion="Remplacer par une constante nomm√©e"
                ))
        
        return issues
    
    async def _validate_business_patterns(self, code: str) -> Dict[str, Any]:
        """Valide la pr√©sence de patterns m√©tier essentiels."""
        found_patterns = []
        missing_patterns = []
        recommendations = []
        
        for pattern_name, keywords in self.business_patterns.items():
            pattern_found = any(keyword in code for keyword in keywords)
            
            if pattern_found:
                found_patterns.append(pattern_name)
            else:
                missing_patterns.append(pattern_name)
                recommendations.append(f"Consid√©rer l'impl√©mentation du pattern {pattern_name}")
        
        return {
            "found": found_patterns,
            "missing": missing_patterns,
            "recommendations": recommendations
        }
    
    async def _detect_logic_inconsistencies(self, code: str) -> List[Dict[str, Any]]:
        """D√©tecte les incoh√©rences logiques dans le code."""
        inconsistencies = []
        
        # D√©tection de variables non utilis√©es
        if "import " in code:
            lines = code.split('\n')
            for i, line in enumerate(lines, 1):
                if line.strip().startswith('import ') or line.strip().startswith('from '):
                    # Analyse simplifi√©e - v√©rifier si l'import est utilis√©
                    import_name = line.split()[-1] if 'import' in line else ''
                    if import_name and import_name not in ' '.join(lines[i:]):
                        inconsistencies.append({
                            "type": "unused_import",
                            "severity": "LOW",
                            "line": i,
                            "description": f"Import potentiellement non utilis√©: {import_name}"
                        })
        
        return inconsistencies
    
    async def _audit_business_compliance(self, code: str, rules: List[str]) -> Dict[str, Any]:
        """Effectue un audit de conformit√© selon les r√®gles m√©tier."""
        compliance_score = 100
        violations = []
        recommendations = []
        
        # R√®gles par d√©faut si aucune fournie
        if not rules:
            rules = [
                "functions_must_have_docstrings",
                "classes_must_have_docstrings",
                "error_handling_required",
                "no_magic_numbers"
            ]
        
        try:
            tree = ast.parse(code)
            
            for rule in rules:
                if rule == "functions_must_have_docstrings":
                    for node in ast.walk(tree):
                        if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef)):
                            if not ast.get_docstring(node):
                                violations.append(f"Fonction '{node.name}' sans docstring (ligne {node.lineno})")
                                compliance_score -= 5
                
                elif rule == "classes_must_have_docstrings":
                    for node in ast.walk(tree):
                        if isinstance(node, ast.ClassDef):
                            if not ast.get_docstring(node):
                                violations.append(f"Classe '{node.name}' sans docstring (ligne {node.lineno})")
                                compliance_score -= 10
        
        except SyntaxError:
            compliance_score = 0
            violations.append("Code avec erreurs de syntaxe")
        
        if violations:
            recommendations.append("Ajouter des docstrings pour am√©liorer la documentation")
            recommendations.append("Impl√©menter une gestion d'erreurs robuste")
        
        return {
            "compliance_score": max(0, compliance_score),
            "violations": violations,
            "recommendations": recommendations,
            "rules_checked": rules
        }
    
    async def _generate_corrections(self, code: str, issues: List[LogicIssue]) -> Dict[str, Any]:
        """G√©n√®re des corrections automatiques pour les probl√®mes d√©tect√©s."""
        corrected_code = code
        applied_corrections = []
        
        for issue in issues:
            if issue.issue_type == "logic_error" and issue.suggestion:
                # Ici on pourrait impl√©menter des corrections automatiques
                applied_corrections.append({
                    "issue": issue.description,
                    "correction": issue.suggestion,
                    "line": issue.line_number
                })
        
        return {
            "code": corrected_code,
            "corrections_applied": applied_corrections,
            "corrections_count": len(applied_corrections)
        }
    
    def _categorize_by_severity(self, issues: List[Dict[str, Any]]) -> Dict[str, int]:
        """Cat√©gorise les probl√®mes par niveau de s√©v√©rit√©."""
        severity_count = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0}
        
        for issue in issues:
            severity = issue.get("severity", "LOW")
            if severity in severity_count:
                severity_count[severity] += 1
        
        return severity_count

def create_agent_MAINTENANCE_06_correcteur_logique_metier(**config) -> AgentMAINTENANCE06CorrecteurLogiqueMetier:
    """Factory function pour cr√©er l'agent Correcteur Logique M√©tier."""
    return AgentMAINTENANCE06CorrecteurLogiqueMetier(**config)

# Section de test principal
if __name__ == "__main__":
    async def run_tests():
        print("üöÄ D√©marrage des tests pour AgentMAINTENANCE06CorrecteurLogiqueMetier...")
        # ‚úÖ MIGRATION SYST√àME LOGGING UNIFI√â - Configuration pour tests
        try:
            from core.manager import LoggingManager
            logging_manager = LoggingManager()
            logger = logging_manager.get_logger(
                config_name="maintenance",
                custom_config={
                    "logger_name": "nextgen.maintenance.correcteur_logique_metier.test",
                    "log_dir": "logs/maintenance/test",
                    "metadata": {"context": "test_cli", "agent": "MAINTENANCE_06"}
                }
            )
        except ImportError:
            # Fallback en cas d'indisponibilit√© du LoggingManager
            logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        
        agent = create_agent_MAINTENANCE_06_correcteur_logique_metier()
        
        try:
            await agent.startup()
            health = await agent.health_check()
            print(f"üè• Health Check: {health}")
            
            capabilities = agent.get_capabilities()
            print(f"üõ†Ô∏è Capabilities: {capabilities}")
            
            # Test avec code probl√©matique
            problematic_code = '''
def process_data(data):
    result = data * 42  # Nombre magique
    return result

class DataProcessor:  # Pas de docstring
    def __init__(self):
        pass
        
    def long_method(self, x, y, z, a, b, c, d, e, f, g):  # Trop de param√®tres
        if x > 0:
            if y > 0:
                if z > 0:  # Imbrication profonde
                    if a > 0:
                        return x + y + z + a
        return 0  # Pas de gestion d'erreurs
'''
            
            # Test correction logique m√©tier
            task = Task(
                id="test_logic_correction",
                type="correct_business_logic",
                params={"code": problematic_code, "file_path": "test.py"}
            )
            
            result = await agent.execute_task(task)
            print(f"\nüîß Test correction logique:")
            print(f"   Succ√®s: {result.success}")
            if result.success:
                data = result.data
                print(f"   Probl√®mes d√©tect√©s: {data['issues_detected']}")
                for issue in data['issues'][:3]:  # Afficher les 3 premiers
                    print(f"     ‚Ä¢ {issue['severity']}: {issue['description']}")
            
            # Test validation patterns
            task_patterns = Task(
                id="test_patterns",
                type="validate_business_patterns",
                params={"code": problematic_code}
            )
            
            result_patterns = await agent.execute_task(task_patterns)
            print(f"\nüéØ Test validation patterns:")
            print(f"   Succ√®s: {result_patterns.success}")
            if result_patterns.success:
                patterns_data = result_patterns.data
                print(f"   Patterns trouv√©s: {patterns_data['patterns_found']}")
                print(f"   Patterns manquants: {patterns_data['missing_patterns']}")
            
        except Exception as e:
            print(f"‚ùå Erreur durant les tests: {e}")
        finally:
            await agent.shutdown()
            print("\n‚úÖ Tests termin√©s.")
    
    asyncio.run(run_tests()) 
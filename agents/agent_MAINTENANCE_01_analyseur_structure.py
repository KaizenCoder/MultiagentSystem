#!/usr/bin/env python3
"""
AGENT 1 - ANALYSEUR DE STRUCTURE (Pattern Factory)
üèóÔ∏è ANALYSEUR DE STRUCTURE - Agent 01
====================================

üéØ Mission : Analyser la structure du code et d√©tecter les erreurs syntaxiques.
‚ö° Capacit√©s : Analyse statique avec `py_compile`, `ast`, et `pylint`.
üè¢ √âquipe : NextGeneration Tools Migration

Author: √âquipe de Maintenance NextGeneration
Version: 1.3.0 - Harmonisation Standards Pattern Factory NextGeneration
"""
import asyncio
import ast
import json
import logging
import sys
import time
import uuid
from collections import defaultdict
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional
import os

# --- Configuration Robuste du Chemin d'Importation ---
try:
    project_root = Path(__file__).resolve().parents[2]
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
except (IndexError, NameError):
    if '.' not in sys.path:
        sys.path.insert(0, '.')

from core.agent_factory_architecture import Agent, Task, Result
PATTERN_FACTORY_AVAILABLE = True


class AgentMAINTENANCE01AnalyseurStructure(Agent):
    """
    üèóÔ∏è Agent MAINTENANCE 01 - Analyseur de Structure NextGeneration
    
    Agent sp√©cialis√© dans l'analyse automatique de la structure des fichiers Python,
    d√©tection d'incoh√©rences syntaxiques et g√©n√©ration de rapports d'audit structurel.
    
    Capacit√©s principales :
    - Analyse statique via AST (imports, classes, fonctions, async)
    - D√©tection d'erreurs syntaxiques et structurelles  
    - Analyse de fichiers individuels ou r√©pertoires complets
    - G√©n√©ration de rapports structur√©s pour maintenance
    - Compatibilit√© avec coordinateur d'√©quipe maintenance
    
    Workflow type :
    1. R√©ception t√¢che "analyse_structure" avec directory/file_path
    2. Parsing AST des fichiers Python cibl√©s
    3. Extraction structure (imports, classes, fonctions)
    4. Retour rapport complet ou erreurs d√©tect√©es
    
    Conformit√© : Pattern Factory NextGeneration v1.3.0
    """
    def __init__(self, **kwargs):
        """Initialisation standardis√©e."""
        super().__init__(agent_type="analyseur_structure", **kwargs)
        # ‚úÖ MIGRATION SYST√àME LOGGING UNIFI√â
        try:
            from core.manager import LoggingManager
            logging_manager = LoggingManager()
            self.logger = logging_manager.get_logger(
                config_name="maintenance",
                custom_config={
                    "logger_name": f"nextgen.maintenance.analyseur_structure.{self.id}",
                    "log_dir": "logs/maintenance/analyseur",
                    "metadata": {
                        "agent_type": "MAINTENANCE_01_analyseur_structure",
                        "agent_role": "analyseur_structure",
                        "system": "nextgeneration"
                    }
                }
            )
        except ImportError:
            # Fallback en cas d'indisponibilit√© du LoggingManager
            self.logger = logging.getLogger(self.__class__.__name__)
        self.logger.info(f"Analyseur de structure ({self.id}) initialis√©.")

    async def startup(self):
        """D√©marrage de l'agent."""
        self.logger.info(f"Analyseur de structure pr√™t.")

    async def execute_task(self, task: Task) -> Result:
        """Ex√©cute la t√¢che d'analyse du r√©pertoire ou d'un fichier."""
        if task.type != "analyse_structure":
            return Result(success=False, error="Type de t√¢che non support√©.")

        directory = task.params.get("directory")
        file_path_param = task.params.get("file_path")

        if not directory and not file_path_param:
            return Result(success=False, error="R√©pertoire ou chemin de fichier non sp√©cifi√©.")

        if file_path_param:
            files_to_process = [file_path_param]
        else:
            files_to_process = [os.path.join(directory, f) for f in os.listdir(directory) if f.endswith(".py")]

        self.logger.info(f"Analyse demand√©e pour : {directory or file_path_param}")
        
        files_analysis = []
        try:
            for file_path in files_to_process:
                self.logger.info(f"Analyse du fichier : {file_path}")
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        content = f.read()
                    
                    analysis = self._analyze_python_file(content)
                    files_analysis.append({
                        "path": file_path,
                        "analysis": analysis,
                    })
                except Exception as e:
                    self.logger.error(f"Erreur lors de l'analyse du fichier {file_path}: {e}")
                    files_analysis.append({
                        "path": file_path,
                        "error": str(e),
                    })
            
            # Pour la coh√©rence, si un seul fichier a √©t√© demand√©, on retourne directement son analyse.
            if file_path_param and len(files_analysis) == 1:
                result_data = files_analysis[0]
                return Result(success=not result_data.get("error"), data=result_data)

            return Result(success=True, data={"files": files_analysis})

        except Exception as e:
            self.logger.critical(f"Erreur majeure lors de l'analyse : {e}")
            return Result(success=False, error=str(e))

    def _analyze_python_file(self, code: str) -> dict:
        """
        Analyse le contenu d'un fichier Python pour en extraire la structure de base.
        """
        analysis_report = {
            "imports": [],
            "classes": [],
            "functions": [],
            "has_async": False,
        }
        try:
            tree = ast.parse(code)
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        analysis_report["imports"].append(alias.name)
                elif isinstance(node, ast.ImportFrom):
                    if node.module:
                        analysis_report["imports"].append(node.module)
                elif isinstance(node, ast.ClassDef):
                    analysis_report["classes"].append(node.name)
                elif isinstance(node, ast.FunctionDef):
                    analysis_report["functions"].append(node.name)
                elif isinstance(node, ast.AsyncFunctionDef):
                    analysis_report["functions"].append(f"async {node.name}")
                    analysis_report["has_async"] = True
        except SyntaxError as e:
            return {"error": f"SyntaxError: {e}"}

        return analysis_report

    def get_capabilities(self) -> List[str]:
        """Retourne les capacit√©s sp√©cialis√©es de l'Analyseur de Structure."""
        return [
            "analyse_structure",
            "analyse_ast_python",
            "detection_erreurs_syntaxiques", 
            "extraction_imports_classes_fonctions",
            "analyse_repertoire_complet",
            "compatibilite_coordinateur_maintenance"
        ]

    async def health_check(self) -> Dict[str, Any]:
        return {"status": "healthy"}

    async def shutdown(self):
        self.logger.info("Analyseur de structure √©teint.")
        

    async def run_analysis(self, directory: str) -> Result:
        """M√©thode de compatibilit√© pour l'ancien appel du coordinateur."""
        self.logger.warning(f"Appel de compatibilit√© 'run_analysis' pour le r√©pertoire: {directory}")
        task_id = f"analyse_{uuid.uuid4().hex}"
        task_description = f"Analyse de structure pour le r√©pertoire {directory}"
        analyse_task = Task(
            id=task_id,
            description=task_description,
            type="analyse_structure",
            params={"directory": directory}
        )
        return await self.execute_task(analyse_task)

def create_agent_MAINTENANCE_01_analyseur_structure(**config) -> AgentMAINTENANCE01AnalyseurStructure:
    """Factory pour cr√©er une instance de l'Agent 1."""
    return AgentMAINTENANCE01AnalyseurStructure(**config)

if __name__ == '__main__':
    async def main_test():
        agent = create_agent_MAINTENANCE_01_analyseur_structure()
        await agent.startup()
        # On teste avec le r√©pertoire 'agents' lui-m√™me
        results = await agent.run_analysis("agents")
        
        # Affichage correct du r√©sultat
        print(json.dumps({'success': results.success, 'data': results.data, 'error': results.error}, indent=2))
        
        await agent.shutdown()
    asyncio.run(main_test())
    # ‚úÖ M√âTHODES STANDARDIS√âES DE RAPPORT

    def _calculate_report_score(self, metrics: Dict[str, Any]) -> int:
        """Calcule le score global du rapport bas√© sur les m√©triques."""
        score = 0
        issues_critiques = []
        
        # Logique de scoring sp√©cifique √† l'agent
        # √Ä adapter selon le type d'agent
        
        return score
    
    def _assess_conformity(self, score: int) -> str:
        """√âvalue la conformit√© bas√©e sur le score."""
        if score >= 90:
            return "‚úÖ CONFORME - OPTIMAL"
        elif score >= 70:
            return "‚úÖ CONFORME - ACCEPTABLE"
        else:
            return "‚ùå NON CONFORME - CRITIQUE"
    
    def _get_quality_level(self, score: int) -> str:
        """D√©termine le niveau de qualit√©."""
        if score >= 90:
            return "OPTIMAL"
        elif score >= 70:
            return "ACCEPTABLE"
        else:
            return "CRITIQUE"
    
    def _generate_recommendations(self, metrics: Dict[str, Any], issues: List[str]) -> List[str]:
        """G√©n√®re les recommandations bas√©es sur l'analyse."""
        recommendations = []
        
        # Logique de g√©n√©ration de recommandations
        # √Ä adapter selon le type d'agent
        
        return recommendations
    
    def _generate_standard_report(self, context: Dict, metrics: Dict, timestamp) -> Dict[str, Any]:
        """G√©n√®re un rapport selon le format standard de l'agent 06."""
        
        score = self._calculate_report_score(metrics)
        conformity = self._assess_conformity(score)
        quality_level = self._get_quality_level(score)
        
        agent_filename = Path(__file__).name
        
        # Issues critiques (√† personnaliser selon l'agent)
        issues_critiques = []
        
        return {
            'agent_id': getattr(self, 'agent_id', 'unknown'),
            'agent_file_name': agent_filename,
            'type_rapport': 'standard',  # √Ä personnaliser
            'timestamp': timestamp.isoformat(),
            'specialisation': 'Agent Sp√©cialis√©',  # √Ä personnaliser
            'score_global': score,
            'niveau_qualite': quality_level,
            'conformite': conformity,
            'signature_cryptographique': 'N/A (Fonctionnalit√© non impl√©ment√©e pour cet agent)',
            'issues_critiques_identifies': len(issues_critiques),
            'architecture': {
                'description': "Description de l'architecture de l'agent",
                'statut_operationnel': f"Syst√®me {getattr(self, 'agent_id', 'unknown')} op√©rationnel.",
                'confirmation_specialisation': f"{getattr(self, 'agent_id', 'unknown')} confirm√© comme sp√©cialiste.",
                'objectifs_principaux': [
                    "Objectif principal 1",
                    "Objectif principal 2",
                    "Objectif principal 3"
                ],
                'technologies_cles': ["Technologie 1", "Technologie 2"]
            },
            'recommandations': self._generate_recommendations(metrics, issues_critiques),
            'issues_critiques_details': issues_critiques if issues_critiques else [
                "Aucun issue critique majeur d√©tect√©. Le syst√®me fonctionne dans les param√®tres attendus."
            ],
            'details_techniques': {
                'strategie': "Strat√©gie technique de l'agent",
                'composants_actifs': [],
                'metriques_collectees': metrics
            },
            'metriques_detaillees': {
                'score_global': {'actuel': score, 'cible': 100},
                'conformite_pourcentage': {'actuel': score, 'cible': 100, 'unite': '%'}
            },
            'impact_business': {
                'criticite': 'MOYENNE' if score >= 70 else 'HAUTE',
                'domaines_impactes': [],
                'actions_requises': []
            }
        }


    def _generate_markdown_report(self, rapport_json: Dict, context: Dict, timestamp) -> str:
        """G√©n√®re un rapport Markdown selon le format standard."""
        
        agent_name = rapport_json.get('agent_id', 'Agent Inconnu')
        type_rapport = rapport_json.get('type_rapport', 'standard')
        score = rapport_json.get('score_global', 0)
        quality = rapport_json.get('niveau_qualite', 'UNKNOWN')
        conformity = rapport_json.get('conformite', 'NON √âVALU√â')
        
        markdown_content = f"""# üìä RAPPORT STRAT√âGIQUE : {agent_name.upper()}

## üéØ R√âSUM√â EX√âCUTIF

**Agent :** {agent_name}  
**Type de Rapport :** {type_rapport}  
**Date de G√©n√©ration :** {timestamp.strftime('%Y-%m-%d %H:%M:%S')}  
**Score Global :** {score}/100  
**Niveau de Qualit√© :** {quality}  
**Conformit√© :** {conformity}  

## üìà ANALYSE GLOBALE

### Score de Performance
- **Score Actuel :** {score}/100
- **Objectif :** 100/100
- **Statut :** {'üü¢ ACCEPTABLE' if score >= 70 else 'üî¥ CRITIQUE'}

### Architecture
{rapport_json.get('architecture', {}).get('description', 'Description non disponible')}

**Objectifs Principaux :**
"""
        
        # Ajouter les objectifs
        for obj in rapport_json.get('architecture', {}).get('objectifs_principaux', []):
            markdown_content += f"- {obj}\n"
        
        markdown_content += f"""
**Technologies Cl√©s :**
"""
        
        # Ajouter les technologies
        for tech in rapport_json.get('architecture', {}).get('technologies_cles', []):
            markdown_content += f"- {tech}\n"
        
        markdown_content += f"""

## üîç RECOMMANDATIONS

"""
        
        # Ajouter les recommandations
        for reco in rapport_json.get('recommandations', []):
            markdown_content += f"- {reco}\n"
        
        markdown_content += f"""

## ‚ö†Ô∏è ISSUES CRITIQUES

"""
        
        # Ajouter les issues critiques
        for issue in rapport_json.get('issues_critiques_details', []):
            markdown_content += f"- {issue}\n"
        
        markdown_content += f"""

## üìä M√âTRIQUES D√âTAILL√âES

### Performance Globale
- **Score Global :** {rapport_json.get('metriques_detaillees', {}).get('score_global', {}).get('actuel', 0)}/{rapport_json.get('metriques_detaillees', {}).get('score_global', {}).get('cible', 100)}
- **Conformit√© :** {rapport_json.get('metriques_detaillees', {}).get('conformite_pourcentage', {}).get('actuel', 0)}%

## üéØ IMPACT BUSINESS

**Criticit√© :** {rapport_json.get('impact_business', {}).get('criticite', 'NON √âVALU√â')}

### Domaines Impact√©s
"""
        
        # Ajouter les domaines impact√©s
        for domaine in rapport_json.get('impact_business', {}).get('domaines_impactes', []):
            markdown_content += f"- {domaine}\n"
        
        markdown_content += f"""

### Actions Requises
"""
        
        # Ajouter les actions requises
        for action in rapport_json.get('impact_business', {}).get('actions_requises', []):
            markdown_content += f"- {action}\n"
        
        markdown_content += f"""

---
*Rapport g√©n√©r√© automatiquement par {agent_name} - NextGeneration System*  
*Timestamp: {timestamp.isoformat()}*
"""
        
        return markdown_content


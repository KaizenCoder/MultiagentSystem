#!/usr/bin/env python3
"""
üîç VALIDATEUR FINAL - Agent 06
===============================
üéØ Mission : Validation finale compl√®te et multi-niveaux d'agents r√©par√©s avec audit qualit√©.
‚ö° Capacit√©s : Validation syntaxique, structurelle, conformit√© Pattern Factory et audit qualit√©.
üè¢ √âquipe : NextGeneration Tools Migration

Author: √âquipe de Maintenance NextGeneration
Version: 6.1.0 - Harmonisation Standards Pattern Factory NextGeneration
"""

import asyncio
import json
import logging
import sys
import time
import uuid
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple
from dataclasses import dataclass
import os
import ast
import subprocess
import tempfile
import inspect
import textwrap

# --- Configuration Robuste du Chemin d'Importation ---
try:
    project_root = Path(__file__).resolve().parents[2]
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
except (IndexError, NameError):
    if '.' not in sys.path:
        sys.path.insert(0, '.')

from core.agent_factory_architecture import Agent, Task, Result

@dataclass
class ValidationIssue:
    """Structure pour repr√©senter un probl√®me de validation."""
    severity: str           # CRITICAL, HIGH, MEDIUM, LOW
    validation_type: str    # syntax, structure, pattern_factory, quality
    description: str        # Description du probl√®me
    line_number: Optional[int] = None
    suggestion: Optional[str] = None
    code_snippet: Optional[str] = None

class AgentMAINTENANCE06ValidateurFinal(Agent):
    """
    üîç Agent MAINTENANCE 06 - Validateur Final NextGeneration
    
    Agent sp√©cialis√© dans la validation finale multi-niveaux d'agents r√©par√©s,
    audit qualit√© complet et v√©rification conformit√© Pattern Factory.
    
    Capacit√©s principales :
    - Validation syntaxique avanc√©e avec compilation Python et AST
    - V√©rification structure Pattern Factory (Agent, Task, Result)
    - Audit qualit√© code avec Flake8, PyFlakes et metrics personnalis√©es
    - Validation conformit√© methods async (startup, shutdown, execute_task)
    - Test instanciation factory functions et compatibilit√© coordinateur
    - Audit documentation avec v√©rification docstrings et capabilities
    
    Technologies avanc√©es :
    - AST analysis : Validation structure et d√©tection m√©thodes manquantes
    - Subprocess integration : Flake8, PyFlakes pour audit qualit√© externe
    - Introspection : Validation signatures et factory functions
    - Dataclass ValidationIssue : Classification structur√©e des probl√®mes
    - Multi-level validation : Syntax ‚Üí Structure ‚Üí Quality ‚Üí Conformity
    
    Workflow type :
    1. Validation syntaxique (AST parsing + compilation Python)
    2. V√©rification structure Pattern Factory et m√©thodes requises
    3. Audit qualit√© avec outils externes (Flake8, PyFlakes)
    4. Test instanciation et compatibilit√© factory functions
    5. Validation finale avec scoring et recommandations d√©taill√©es
    
    Conformit√© : Pattern Factory NextGeneration v6.1.0
    """
    def __init__(self, **kwargs):
        """Initialisation robuste et compatible avec le coordinateur."""
        super().__init__(agent_type="validateur_final", **kwargs)
        self.agent_id = self.id
        
        # ‚úÖ MIGRATION SYST√àME LOGGING UNIFI√â
        try:
            from core.manager import LoggingManager
            logging_manager = LoggingManager()
            self.logger = logging_manager.get_logger(
                config_name="maintenance",
                custom_config={
                    "logger_name": f"nextgen.maintenance.validateur_final.{self.agent_id}",
                    "log_dir": "logs/maintenance/validateur",
                    "metadata": {
                        "agent_type": "MAINTENANCE_06_validateur_final",
                        "agent_role": "validateur_final",
                        "system": "nextgeneration"
                    }
                }
            )
        except ImportError:
            # Fallback en cas d'indisponibilit√© du LoggingManager
            self.logger = logging.getLogger(self.__class__.__name__)
            
        self.logger.info(f"üîç Agent Validateur Final ({self.agent_id}) initialis√©")
        
        # Configuration des validations requises
        self.required_methods = {
            "async": ["startup", "shutdown", "execute_task", "health_check"],
            "sync": ["get_capabilities"]
        }
        
        # Patterns de validation Pattern Factory
        self.pattern_factory_requirements = {
            "base_classes": ["Agent"],
            "imports": ["agent_factory_architecture"],
            "factory_function": True,
            "task_result_types": ["Task", "Result"]
        }

    async def startup(self):
        self.logger.info(f"Agent 'validateur_final' ({self.id}) d√©marr√©.")

    async def execute_task(self, task: Task) -> Result:
        """Ex√©cute une t√¢che de validation finale."""
        self.logger.info(f"üéØ Ex√©cution t√¢che: {task.type}")
        
        task_handlers = {
            "validate_code": self._handle_code_validation,
            "final_validation": self._handle_final_validation,
            "quality_audit": self._handle_quality_audit,
            "pattern_factory_compliance": self._handle_pattern_factory_compliance,
            "agent_structure_validation": self._handle_agent_structure_validation
        }
        
        handler = task_handlers.get(task.type)
        if not handler:
            return Result(success=False, error=f"Type de t√¢che non support√©: {task.type}")
        
        try:
            return await handler(task)
        except Exception as e:
            self.logger.error(f"Erreur lors de l'ex√©cution de la t√¢che {task.type}: {e}", exc_info=True)
            return Result(success=False, error=str(e))
    
    async def _handle_code_validation(self, task: Task) -> Result:
        """G√®re la validation de code (compatibilit√© avec ancienne interface)."""
        return await self._handle_final_validation(task)
    
    async def _handle_final_validation(self, task: Task) -> Result:
        """Effectue une validation finale compl√®te."""
        code = task.params.get("code")
        file_path = task.params.get("file_path", "unknown_file")
        
        if not code:
            return Result(success=False, error="Code source requis pour la validation")
        
        self.logger.info(f"Validation finale du fichier : {file_path}")
        
        # Validation multi-niveaux
        validation_results = await self._perform_comprehensive_validation(code, file_path)
        
        return Result(success=validation_results["overall_success"], data=validation_results)
    
    async def _handle_quality_audit(self, task: Task) -> Result:
        """Effectue un audit qualit√© avec outils externes."""
        code = task.params.get("code")
        if not code:
            return Result(success=False, error="Code source requis")
        
        quality_results = await self._perform_quality_audit(code)
        
        return Result(success=True, data=quality_results)
    
    async def _handle_pattern_factory_compliance(self, task: Task) -> Result:
        """V√©rifie la conformit√© Pattern Factory."""
        code = task.params.get("code")
        if not code:
            return Result(success=False, error="Code source requis")
        
        compliance_results = await self._validate_pattern_factory_compliance(code)
        
        return Result(success=True, data=compliance_results)
    
    async def _handle_agent_structure_validation(self, task: Task) -> Result:
        """Valide la structure d'agent sp√©cifiquement."""
        code = task.params.get("code")
        if not code:
            return Result(success=False, error="Code source requis")
        
        try:
            tree = ast.parse(code)
            agent_validation = self._validate_agent_structure(tree)
            
            return Result(success=True, data=agent_validation)
        except SyntaxError as e:
            return Result(success=False, error=f"Erreur de syntaxe: {e}")
    
    async def _perform_comprehensive_validation(self, code: str, file_path: str) -> Dict[str, Any]:
        """Effectue une validation compl√®te multi-niveaux."""
        results = {
            "overall_success": True,
            "validation_levels": [],
            "issues": [],
            "score": 100,
            "recommendations": []
        }
        
        try:
            # Niveau 1: Validation syntaxique
            syntax_result = await self._validate_syntax(code, file_path)
            results["validation_levels"].append(syntax_result)
            
            if not syntax_result["passed"]:
                results["overall_success"] = False
                results["score"] -= 30
                return results
            
            # Niveau 2: Validation structure
            structure_result = await self._validate_structure(code)
            results["validation_levels"].append(structure_result)
            
            # Niveau 3: Audit qualit√©
            quality_result = await self._perform_quality_audit(code)
            results["validation_levels"].append(quality_result)
            
            # Niveau 4: Conformit√© Pattern Factory
            pattern_result = await self._validate_pattern_factory_compliance(code)
            results["validation_levels"].append(pattern_result)
            
            # Calcul score final
            results["score"] = self._calculate_final_score(results["validation_levels"])
            results["recommendations"] = self._generate_final_recommendations(results["validation_levels"])
            
        except Exception as e:
            results["overall_success"] = False
            results["error"] = str(e)
        
        return results
    
    async def _validate_syntax(self, code: str, file_path: str) -> Dict[str, Any]:
        """Validation syntaxique avec AST et compilation."""
        result = {
            "level": "syntax",
            "passed": True,
            "details": {},
            "issues": []
        }
        
        try:
            # Validation AST
            tree = ast.parse(code)
            result["details"]["ast_validation"] = "passed"
            
            # Validation compilation
            compile(code, file_path, 'exec')
            result["details"]["compile_validation"] = "passed"
            
            # Linter basique
            linter_details = self._run_basic_linter(code, file_path)
            result["details"]["linter"] = linter_details
            
        except SyntaxError as e:
            result["passed"] = False
            result["issues"].append({
                "type": "syntax_error",
                "description": f"Erreur de syntaxe: {e.msg}",
                "line": e.lineno
            })
        
        return result
    
    async def _validate_structure(self, code: str) -> Dict[str, Any]:
        """Validation de la structure du code."""
        result = {
            "level": "structure",
            "passed": True,
            "details": {},
            "issues": []
        }
        
        try:
            tree = ast.parse(code)
            
            # V√©rification structure agent
            agent_validation = self._validate_agent_structure(tree)
            result["details"]["agent_structure"] = agent_validation
            
            # V√©rification m√©thodes requises
            methods_check = self._validate_required_methods(tree)
            result["details"]["required_methods"] = methods_check
            
            if not agent_validation.get("has_agent_class", False):
                result["passed"] = False
                result["issues"].append({
                    "type": "missing_agent_class",
                    "description": "Aucune classe h√©ritant d'Agent trouv√©e"
                })
            
        except Exception as e:
            result["passed"] = False
            result["issues"].append({
                "type": "structure_error",
                "description": f"Erreur d'analyse structure: {e}"
            })
        
        return result
    
    async def _perform_quality_audit(self, code: str) -> Dict[str, Any]:
        """Audit qualit√© avec outils externes."""
        result = {
            "level": "quality",
            "passed": True,
            "details": {},
            "issues": []
        }
        
        try:
            # Test avec un fichier temporaire pour outils externes
            with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as tmp:
                tmp.write(code)
                tmp_path = tmp.name
            
            try:
                # Flake8 si disponible
                flake8_result = await self._run_flake8(tmp_path)
                result["details"]["flake8"] = flake8_result
                
                # PyFlakes si disponible
                pyflakes_result = await self._run_pyflakes(tmp_path)
                result["details"]["pyflakes"] = pyflakes_result
                
            finally:
                if os.path.exists(tmp_path):
                    os.remove(tmp_path)
                    
        except Exception as e:
            result["issues"].append({
                "type": "quality_audit_error",
                "description": f"Erreur audit qualit√©: {e}"
            })
        
        return result
    
    async def _validate_pattern_factory_compliance(self, code: str) -> Dict[str, Any]:
        """Valide la conformit√© Pattern Factory."""
        result = {
            "level": "pattern_factory",
            "passed": True,
            "details": {},
            "issues": []
        }
        
        try:
            tree = ast.parse(code)
            
            # V√©rification imports Pattern Factory
            imports_check = self._check_pattern_factory_imports(tree, code)
            result["details"]["imports"] = imports_check
            
            # V√©rification factory function
            factory_check = self._check_factory_function(tree)
            result["details"]["factory_function"] = factory_check
            
            # V√©rification m√©thodes async requises
            async_methods_check = self._check_async_methods(tree)
            result["details"]["async_methods"] = async_methods_check
            
            # Score de conformit√©
            compliance_score = self._calculate_compliance_score(result["details"])
            result["details"]["compliance_score"] = compliance_score
            
        except Exception as e:
            result["passed"] = False
            result["issues"].append({
                "type": "compliance_error",
                "description": f"Erreur v√©rification conformit√©: {e}"
            })
        
        return result

    def _run_basic_linter(self, code: str, file_path: str) -> dict:
        """Ex√©cute un linter basique via subprocess."""
        linter_result = {
            "status": "completed",
            "method": "subprocess_compile_check",
            "issues": []
        }
        
        try:
            # Cr√©er un fichier temporaire pour le test
            with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False, encoding='utf-8') as tmp:
                tmp.write(code)
                tmp_path = tmp.name
            
            try:
                # Utilise l'interpr√©teur courant pour v√©rifier la syntaxe
                process = subprocess.run(
                    [sys.executable, "-m", "py_compile", tmp_path],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if process.returncode == 0:
                    linter_result["status"] = "passed"
                else:
                    linter_result["status"] = "failed"
                    linter_result["issues"].append(f"py_compile failed: {process.stderr}")
                    
            except subprocess.TimeoutExpired:
                linter_result["status"] = "timeout"
                linter_result["issues"].append("Linter timeout")
            except Exception as e:
                linter_result["status"] = "error"
                linter_result["issues"].append(f"Linter execution error: {e}")
            finally:
                # Nettoyer le fichier temporaire
                if os.path.exists(tmp_path):
                    os.remove(tmp_path)
                    
        except Exception as e:
            linter_result["status"] = "error"
            linter_result["issues"].append(f"Linter setup error: {e}")
        
        return linter_result

    def _validate_agent_structure(self, tree: ast.AST) -> dict:
        """Valide la structure sp√©cifique aux agents."""
        validation = {
            "has_agent_class": False,
            "has_execute_task": False,
            "has_startup": False,
            "agent_class_name": None,
            "issues": []
        }
        
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef):
                # V√©rifier si c'est une classe d'agent
                base_names = []
                for base in node.bases:
                    if isinstance(base, ast.Name):
                        base_names.append(base.id)
                
                if 'Agent' in base_names:
                    validation["has_agent_class"] = True
                    validation["agent_class_name"] = node.name
                    
                    # V√©rifier les m√©thodes requises dans la classe
                    methods = [n.name for n in node.body if isinstance(n, (ast.FunctionDef, ast.AsyncFunctionDef))]
                    
                    if 'execute_task' in methods:
                        validation["has_execute_task"] = True
                    else:
                        validation["issues"].append("M√©thode execute_task manquante")
                    
                    if 'startup' in methods:
                        validation["has_startup"] = True
                    else:
                        validation["issues"].append("M√©thode startup manquante")
        
        if not validation["has_agent_class"]:
            validation["issues"].append("Aucune classe h√©ritant d'Agent trouv√©e")
        
        return validation

    def get_capabilities(self) -> List[str]:
        """Retourne les capacit√©s sp√©cialis√©es du Validateur Final."""
        return [
            "final_validation",
            "syntax_validation",
            "structure_validation",
            "pattern_factory_compliance",
            "quality_audit",
            "agent_structure_validation",
            "factory_function_testing",
            "multi_level_validation",
            "comprehensive_reporting",
            "validation_scoring"
        ]

    async def health_check(self) -> Dict[str, Any]:
        return {"status": "healthy"}

    async def shutdown(self):
        """Arr√™t de l'agent."""
        self.logger.info(f"Agent 'validateur_final' ({self.id}) arr√™t√©.")

    def _validate_required_methods(self, tree: ast.AST) -> Dict[str, Any]:
        """Valide la pr√©sence des m√©thodes requises."""
        result = {
            "async_methods": [],
            "sync_methods": [],
            "missing_async": [],
            "missing_sync": []
        }
        
        # Collecte des m√©thodes
        for node in ast.walk(tree):
            if isinstance(node, ast.AsyncFunctionDef):
                result["async_methods"].append(node.name)
            elif isinstance(node, ast.FunctionDef):
                result["sync_methods"].append(node.name)
        
        # V√©rification m√©thodes requises
        for method in self.required_methods["async"]:
            if method not in result["async_methods"]:
                result["missing_async"].append(method)
        
        for method in self.required_methods["sync"]:
            if method not in result["sync_methods"]:
                result["missing_sync"].append(method)
        
        return result
    
    async def _run_flake8(self, file_path: str) -> Dict[str, Any]:
        """Ex√©cute Flake8 si disponible."""
        result = {"tool": "flake8", "status": "not_available"}
        
        try:
            process = subprocess.run(
                ["flake8", "--max-line-length=100", file_path],
                capture_output=True,
                text=True,
                timeout=10
            )
            result["status"] = "completed"
            result["returncode"] = process.returncode
            result["output"] = process.stdout
            result["errors"] = process.stderr
        except (subprocess.TimeoutExpired, FileNotFoundError):
            result["status"] = "not_available"
        except Exception as e:
            result["status"] = "error"
            result["error"] = str(e)
        
        return result
    
    async def _run_pyflakes(self, file_path: str) -> Dict[str, Any]:
        """Ex√©cute PyFlakes si disponible."""
        result = {"tool": "pyflakes", "status": "not_available"}
        
        try:
            process = subprocess.run(
                ["pyflakes", file_path],
                capture_output=True,
                text=True,
                timeout=10
            )
            result["status"] = "completed"
            result["returncode"] = process.returncode
            result["output"] = process.stdout
            result["errors"] = process.stderr
        except (subprocess.TimeoutExpired, FileNotFoundError):
            result["status"] = "not_available"
        except Exception as e:
            result["status"] = "error"
            result["error"] = str(e)
        
        return result
    
    def _check_pattern_factory_imports(self, tree: ast.AST, code: str) -> Dict[str, Any]:
        """V√©rifie les imports Pattern Factory."""
        result = {
            "has_agent_factory": False,
            "has_agent_import": False,
            "has_task_result": False,
            "imports_found": []
        }
        
        # V√©rification dans le code brut
        if "agent_factory_architecture" in code:
            result["has_agent_factory"] = True
        
        if "Agent" in code and "Task" in code and "Result" in code:
            result["has_task_result"] = True
        
        # Analyse AST des imports
        for node in ast.walk(tree):
            if isinstance(node, ast.ImportFrom):
                if node.module and "agent_factory" in node.module:
                    result["has_agent_import"] = True
                    result["imports_found"].append(node.module)
        
        return result
    
    def _check_factory_function(self, tree: ast.AST) -> Dict[str, Any]:
        """V√©rifie la pr√©sence d'une factory function."""
        result = {
            "has_factory": False,
            "factory_name": None,
            "factory_functions": []
        }
        
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                if node.name.startswith("create_") and "agent" in node.name.lower():
                    result["has_factory"] = True
                    result["factory_name"] = node.name
                    result["factory_functions"].append(node.name)
        
        return result
    
    def _check_async_methods(self, tree: ast.AST) -> Dict[str, Any]:
        """V√©rifie les m√©thodes async requises."""
        result = {
            "async_methods_found": [],
            "required_async_methods": self.required_methods["async"],
            "compliance": {}
        }
        
        for node in ast.walk(tree):
            if isinstance(node, ast.AsyncFunctionDef):
                result["async_methods_found"].append(node.name)
        
        # V√©rification conformit√©
        for method in self.required_methods["async"]:
            result["compliance"][method] = method in result["async_methods_found"]
        
        return result
    
    def _calculate_compliance_score(self, details: Dict[str, Any]) -> int:
        """Calcule un score de conformit√© Pattern Factory."""
        score = 100
        
        # Import Pattern Factory (-20 si manquant)
        if not details.get("imports", {}).get("has_agent_factory", False):
            score -= 20
        
        # Factory function (-15 si manquante)
        if not details.get("factory_function", {}).get("has_factory", False):
            score -= 15
        
        # M√©thodes async (-10 par m√©thode manquante)
        async_compliance = details.get("async_methods", {}).get("compliance", {})
        for method, present in async_compliance.items():
            if not present:
                score -= 10
        
        return max(0, score)
    
    def _calculate_final_score(self, validation_levels: List[Dict[str, Any]]) -> int:
        """Calcule le score final de validation."""
        base_score = 100
        
        for level in validation_levels:
            if not level.get("passed", True):
                base_score -= 25
            
            # P√©nalit√©s pour les issues
            issues_count = len(level.get("issues", []))
            base_score -= (issues_count * 5)
        
        return max(0, base_score)
    
    def _generate_final_recommendations(self, validation_levels: List[Dict[str, Any]]) -> List[str]:
        """G√©n√®re des recommandations finales."""
        recommendations = []
        
        for level in validation_levels:
            level_name = level.get("level", "unknown")
            
            if not level.get("passed", True):
                recommendations.append(f"Corriger les probl√®mes de {level_name}")
            
            for issue in level.get("issues", []):
                recommendations.append(f"{level_name.title()}: {issue.get('description', 'Issue d√©tect√©e')}")
        
        if not recommendations:
            recommendations.append("Code valid√© avec succ√®s - aucune am√©lioration n√©cessaire")
        
        return recommendations

    async def run_validation(self, file_path: str, code_content: str) -> Result:
        """M√©thode de compatibilit√© pour l'ancien appel."""
        self.logger.warning(f"Appel de compatibilit√© 'run_validation' pour {file_path}")
        validation_task = Task(type="final_validation", params={"file_path": file_path, "code": code_content})
        return await self.execute_task(validation_task)


def create_agent_MAINTENANCE_06_validateur_final(**config) -> AgentMAINTENANCE06ValidateurFinal:
    """Factory pour cr√©er une instance de l'Agent 6."""
    return AgentMAINTENANCE06ValidateurFinal(**config)

# Section de test principal
if __name__ == "__main__":
    async def run_tests():
        print("üöÄ D√©marrage des tests pour AgentMAINTENANCE06ValidateurFinal...")
        # ‚úÖ MIGRATION SYST√àME LOGGING UNIFI√â - Configuration pour tests
        try:
            from core.manager import LoggingManager
            logging_manager = LoggingManager()
            logger = logging_manager.get_logger(
                config_name="maintenance",
                custom_config={
                    "logger_name": "nextgen.maintenance.validateur_final.test",
                    "log_dir": "logs/maintenance/test",
                    "metadata": {"context": "test_cli", "agent": "MAINTENANCE_06_validateur"}
                }
            )
        except ImportError:
            # Fallback en cas d'indisponibilit√© du LoggingManager
            logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        
        agent = create_agent_MAINTENANCE_06_validateur_final()
        
        try:
            await agent.startup()
            health = await agent.health_check()
            print(f"üè• Health Check: {health}")
            
            capabilities = agent.get_capabilities()
            print(f"üõ†Ô∏è Capabilities: {capabilities}")
            
            # Test avec agent valide complet
            valid_agent_code = '''
from core.agent_factory_architecture import Agent, Task, Result
import asyncio

class AgentTestValid(Agent):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    
    async def startup(self):
        pass
    
    async def shutdown(self):
        pass
    
    async def execute_task(self, task: Task) -> Result:
        return Result(success=True)
    
    async def health_check(self):
        return {"status": "healthy"}
    
    def get_capabilities(self) -> list:
        return ["test_capability"]

def create_agent_test_valid(**config):
    return AgentTestValid(**config)
'''
            
            # Test validation finale compl√®te
            task = Task(
                id="test_final_validation",
                type="final_validation",
                params={"code": valid_agent_code, "file_path": "valid_agent.py"}
            )
            
            result = await agent.execute_task(task)
            print(f"\nüîç Test validation finale:")
            print(f"   Succ√®s: {result.success}")
            if result.success:
                data = result.data
                print(f"   Score global: {data.get('score', 'N/A')}")
                print(f"   Niveaux de validation: {len(data.get('validation_levels', []))}")
                for level in data.get('validation_levels', [])[:2]:  # Afficher les 2 premiers
                    print(f"     ‚Ä¢ {level.get('level', 'unknown')}: {'‚úÖ' if level.get('passed', False) else '‚ùå'}")
            
            # Test validation Pattern Factory
            task_pattern = Task(
                id="test_pattern_compliance",
                type="pattern_factory_compliance",
                params={"code": valid_agent_code}
            )
            
            result_pattern = await agent.execute_task(task_pattern)
            print(f"\nüè≠ Test conformit√© Pattern Factory:")
            print(f"   Succ√®s: {result_pattern.success}")
            if result_pattern.success:
                pattern_data = result_pattern.data
                compliance_score = pattern_data.get('details', {}).get('compliance_score', 0)
                print(f"   Score conformit√©: {compliance_score}/100")
            
            # Test avec code invalide
            invalid_code = "def incomplete_function("  # Syntaxe invalide
            
            task_invalid = Task(
                id="test_invalid_code",
                type="final_validation",
                params={"code": invalid_code, "file_path": "invalid.py"}
            )
            
            result_invalid = await agent.execute_task(task_invalid)
            print(f"\n‚ùå Test code invalide:")
            print(f"   Succ√®s: {result_invalid.success}")
            if result_invalid.success:
                invalid_data = result_invalid.data
                print(f"   Score: {invalid_data.get('score', 'N/A')}")
                print(f"   Recommandations: {len(invalid_data.get('recommendations', []))}")
            
        except Exception as e:
            print(f"‚ùå Erreur durant les tests: {e}")
        finally:
            await agent.shutdown()
            print("\n‚úÖ Tests termin√©s.")
    
    asyncio.run(run_tests())
    # ‚úÖ M√âTHODES STANDARDIS√âES DE RAPPORT

    def _calculate_report_score(self, metrics: Dict[str, Any]) -> int:
        """Calcule le score global du rapport bas√© sur les m√©triques."""
        score = 0
        issues_critiques = []
        
        # Logique de scoring sp√©cifique √† l'agent
        # √Ä adapter selon le type d'agent
        
        return score
    
    def _assess_conformity(self, score: int) -> str:
        """√âvalue la conformit√© bas√©e sur le score."""
        if score >= 90:
            return "‚úÖ CONFORME - OPTIMAL"
        elif score >= 70:
            return "‚úÖ CONFORME - ACCEPTABLE"
        else:
            return "‚ùå NON CONFORME - CRITIQUE"
    
    def _get_quality_level(self, score: int) -> str:
        """D√©termine le niveau de qualit√©."""
        if score >= 90:
            return "OPTIMAL"
        elif score >= 70:
            return "ACCEPTABLE"
        else:
            return "CRITIQUE"
    
    def _generate_recommendations(self, metrics: Dict[str, Any], issues: List[str]) -> List[str]:
        """G√©n√®re les recommandations bas√©es sur l'analyse."""
        recommendations = []
        
        # Logique de g√©n√©ration de recommandations
        # √Ä adapter selon le type d'agent
        
        return recommendations
    
    def _generate_standard_report(self, context: Dict, metrics: Dict, timestamp) -> Dict[str, Any]:
        """G√©n√®re un rapport selon le format standard de l'agent 06."""
        
        score = self._calculate_report_score(metrics)
        conformity = self._assess_conformity(score)
        quality_level = self._get_quality_level(score)
        
        agent_filename = Path(__file__).name
        
        # Issues critiques (√† personnaliser selon l'agent)
        issues_critiques = []
        
        return {
            'agent_id': getattr(self, 'agent_id', 'unknown'),
            'agent_file_name': agent_filename,
            'type_rapport': 'standard',  # √Ä personnaliser
            'timestamp': timestamp.isoformat(),
            'specialisation': 'Agent Sp√©cialis√©',  # √Ä personnaliser
            'score_global': score,
            'niveau_qualite': quality_level,
            'conformite': conformity,
            'signature_cryptographique': 'N/A (Fonctionnalit√© non impl√©ment√©e pour cet agent)',
            'issues_critiques_identifies': len(issues_critiques),
            'architecture': {
                'description': "Description de l'architecture de l'agent",
                'statut_operationnel': f"Syst√®me {getattr(self, 'agent_id', 'unknown')} op√©rationnel.",
                'confirmation_specialisation': f"{getattr(self, 'agent_id', 'unknown')} confirm√© comme sp√©cialiste.",
                'objectifs_principaux': [
                    "Objectif principal 1",
                    "Objectif principal 2",
                    "Objectif principal 3"
                ],
                'technologies_cles': ["Technologie 1", "Technologie 2"]
            },
            'recommandations': self._generate_recommendations(metrics, issues_critiques),
            'issues_critiques_details': issues_critiques if issues_critiques else [
                "Aucun issue critique majeur d√©tect√©. Le syst√®me fonctionne dans les param√®tres attendus."
            ],
            'details_techniques': {
                'strategie': "Strat√©gie technique de l'agent",
                'composants_actifs': [],
                'metriques_collectees': metrics
            },
            'metriques_detaillees': {
                'score_global': {'actuel': score, 'cible': 100},
                'conformite_pourcentage': {'actuel': score, 'cible': 100, 'unite': '%'}
            },
            'impact_business': {
                'criticite': 'MOYENNE' if score >= 70 else 'HAUTE',
                'domaines_impactes': [],
                'actions_requises': []
            }
        }


    def _generate_markdown_report(self, rapport_json: Dict, context: Dict, timestamp) -> str:
        """G√©n√®re un rapport Markdown selon le format standard."""
        
        agent_name = rapport_json.get('agent_id', 'Agent Inconnu')
        type_rapport = rapport_json.get('type_rapport', 'standard')
        score = rapport_json.get('score_global', 0)
        quality = rapport_json.get('niveau_qualite', 'UNKNOWN')
        conformity = rapport_json.get('conformite', 'NON √âVALU√â')
        
        markdown_content = f"""# üìä RAPPORT STRAT√âGIQUE : {agent_name.upper()}

## üéØ R√âSUM√â EX√âCUTIF

**Agent :** {agent_name}  
**Type de Rapport :** {type_rapport}  
**Date de G√©n√©ration :** {timestamp.strftime('%Y-%m-%d %H:%M:%S')}  
**Score Global :** {score}/100  
**Niveau de Qualit√© :** {quality}  
**Conformit√© :** {conformity}  

## üìà ANALYSE GLOBALE

### Score de Performance
- **Score Actuel :** {score}/100
- **Objectif :** 100/100
- **Statut :** {'üü¢ ACCEPTABLE' if score >= 70 else 'üî¥ CRITIQUE'}

### Architecture
{rapport_json.get('architecture', {}).get('description', 'Description non disponible')}

**Objectifs Principaux :**
"""
        
        # Ajouter les objectifs
        for obj in rapport_json.get('architecture', {}).get('objectifs_principaux', []):
            markdown_content += f"- {obj}\n"
        
        markdown_content += f"""
**Technologies Cl√©s :**
"""
        
        # Ajouter les technologies
        for tech in rapport_json.get('architecture', {}).get('technologies_cles', []):
            markdown_content += f"- {tech}\n"
        
        markdown_content += f"""

## üîç RECOMMANDATIONS

"""
        
        # Ajouter les recommandations
        for reco in rapport_json.get('recommandations', []):
            markdown_content += f"- {reco}\n"
        
        markdown_content += f"""

## ‚ö†Ô∏è ISSUES CRITIQUES

"""
        
        # Ajouter les issues critiques
        for issue in rapport_json.get('issues_critiques_details', []):
            markdown_content += f"- {issue}\n"
        
        markdown_content += f"""

## üìä M√âTRIQUES D√âTAILL√âES

### Performance Globale
- **Score Global :** {rapport_json.get('metriques_detaillees', {}).get('score_global', {}).get('actuel', 0)}/{rapport_json.get('metriques_detaillees', {}).get('score_global', {}).get('cible', 100)}
- **Conformit√© :** {rapport_json.get('metriques_detaillees', {}).get('conformite_pourcentage', {}).get('actuel', 0)}%

## üéØ IMPACT BUSINESS

**Criticit√© :** {rapport_json.get('impact_business', {}).get('criticite', 'NON √âVALU√â')}

### Domaines Impact√©s
"""
        
        # Ajouter les domaines impact√©s
        for domaine in rapport_json.get('impact_business', {}).get('domaines_impactes', []):
            markdown_content += f"- {domaine}\n"
        
        markdown_content += f"""

### Actions Requises
"""
        
        # Ajouter les actions requises
        for action in rapport_json.get('impact_business', {}).get('actions_requises', []):
            markdown_content += f"- {action}\n"
        
        markdown_content += f"""

---
*Rapport g√©n√©r√© automatiquement par {agent_name} - NextGeneration System*  
*Timestamp: {timestamp.isoformat()}*
"""
        
        return markdown_content


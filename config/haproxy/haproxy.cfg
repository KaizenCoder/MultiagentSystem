# HAProxy Configuration Production
# Load Balancing avec Health Checks et SSL Termination

global
    # Performance et sécurité
    daemon
    maxconn 4096
    log stdout local0 info
    
    # SSL Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Security Headers
    tune.ssl.default-dh-param 2048

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option redispatch
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Retries
    retries 3
    
    # Error pages
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend HTTPS (port 443)
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/orchestrator.pem
    mode http
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
    
    # Rate limiting (requests per minute per IP)
    stick-table type ip size 100k expire 60s store http_req_rate(60s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 60 }
    
    # Block suspicious requests
    http-request deny if { path_reg -i \.(php|asp|jsp|cgi)$ }
    http-request deny if { query -i -m reg (union|select|insert|delete|update|drop|create|alter) }
    
    # Routing
    acl is_api path_beg /api
    acl is_health path /health
    acl is_metrics path /metrics
    acl is_docs path_beg /docs
    
    # Health check endpoint (direct, no load balancing)
    use_backend health_backend if is_health
    
    # Metrics endpoint (Prometheus)
    use_backend metrics_backend if is_metrics
    
    # API endpoints (load balanced)
    use_backend orchestrator_backend if is_api
    
    # Documentation
    use_backend docs_backend if is_docs
    
    # Default backend
    default_backend orchestrator_backend

# Frontend HTTP (port 80) - Redirect to HTTPS
frontend http_frontend
    bind *:80
    mode http
    
    # Redirect all HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Stats Frontend
frontend stats_frontend
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:${HAPROXY_STATS_PASSWORD}

# Backend Orchestrator (Load Balanced)
backend orchestrator_backend
    mode http
    balance roundrobin
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    
    # Health check configuration
    default-server inter 30s downinter 5s rise 2 fall 3 slowstart 60s maxconn 250 maxqueue 256 weight 100
    
    # Orchestrator instances
    server orchestrator-1 orchestrator-1:8000 check
    server orchestrator-2 orchestrator-2:8000 check
    server orchestrator-3 orchestrator-3:8000 check
    
    # Connection management
    option httpclose
    option abortonclose
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/xml text/css text/javascript application/javascript application/json
    
    # Session affinity (if needed)
    # cookie SERVERID insert indirect nocache

# Backend Health Check
backend health_backend
    mode http
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    
    # Round robin entre toutes les instances pour health check
    server orchestrator-1 orchestrator-1:8000 check
    server orchestrator-2 orchestrator-2:8000 check backup
    server orchestrator-3 orchestrator-3:8000 check backup

# Backend Metrics (Prometheus)
backend metrics_backend
    mode http
    # Direct vers une instance pour les métriques
    server orchestrator-1 orchestrator-1:8000 check

# Backend Documentation
backend docs_backend
    mode http
    # Documentation peut être servie par n'importe quelle instance
    balance roundrobin
    server orchestrator-1 orchestrator-1:8000 check
    server orchestrator-2 orchestrator-2:8000 check
    server orchestrator-3 orchestrator-3:8000 check

# Maintenance Backend (pour maintenance programmée)
backend maintenance_backend
    mode http
    errorfile 503 /etc/haproxy/errors/maintenance.http

# Configuration pour le mode maintenance
# Décommenter pour activer la maintenance
# frontend https_frontend
#     use_backend maintenance_backend

# Logging et monitoring
listen logs
    bind 127.0.0.1:1514
    mode tcp
    server rsyslog 127.0.0.1:514

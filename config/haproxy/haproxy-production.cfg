#---------------------------------------------------------------------
# ðŸš€ HAPROXY PRODUCTION CONFIG - PHASE 4 IA-2
# Load Balancer pour Orchestrateur Multi-Agent
# Support tests charge IA-1 + scalabilitÃ© 1000+ users
#---------------------------------------------------------------------

global
    # Daemon configuration
    daemon
    user haproxy
    group haproxy
    
    # Performance tuning
    maxconn 20000
    nbproc 1
    nbthread 4
    cpu-map auto:1/1-4 0-3
    
    # SSL Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Logging
    log stdout local0 info
    
    # Stats socket for monitoring
    stats socket /var/run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

defaults
    mode http
    log global
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 15s
    timeout http-keep-alive 1s
    timeout check 10s
    
    # Options
    option httplog
    option dontlognull
    option log-health-checks
    option redispatch
    option http-server-close
    option forwardfor except 127.0.0.0/8
    
    # Retry and error handling
    retries 3
    option redispatch
    
    # Health check defaults
    default-server inter 3s rise 2 fall 3 slowstart 60s maxconn 1000 maxqueue 256 weight 100

#---------------------------------------------------------------------
# FRONTEND - Load Balancer Entry Point
#---------------------------------------------------------------------

frontend orchestrator_frontend
    bind *:8080
    bind *:8443 ssl crt /etc/ssl/certs/orchestrator.pem
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Rate limiting (per IP)
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 50 }  # Max 50 req/10s per IP
    http-request deny if { sc_http_err_rate(0) gt 10 }  # Max 10 errors/10s per IP
    
    # Request routing
    
    # Health checks (no backend needed)
    http-request return status 200 content-type "application/json" string '{"status":"healthy","timestamp":"'%[date()]'","load_balancer":"haproxy"}' if { path /health }
    
    # API endpoints routing
    acl is_api_health path_beg /api/health
    acl is_api_metrics path_beg /api/metrics
    acl is_api_process path_beg /api/process
    acl is_api_analyze path_beg /api/analyze
    acl is_orchestrator path_beg /api/orchestrator
    
    # Memory API routing
    acl is_memory_api path_beg /api/memory
    acl is_memory_search path_beg /api/search
    
    # Stats interface
    acl is_stats path_beg /stats
    
    # Backend selection
    use_backend orchestrator_backend if is_api_health or is_api_process or is_api_analyze or is_orchestrator
    use_backend memory_api_backend if is_memory_api or is_memory_search
    use_backend stats_backend if is_stats
    
    # Default backend
    default_backend orchestrator_backend

#---------------------------------------------------------------------
# BACKEND - Orchestrator Multi-Agent
#---------------------------------------------------------------------

backend orchestrator_backend
    balance leastconn  # Optimal pour workload LLM variable
    
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    
    # Session persistence (sticky sessions)
    cookie ORCHESTRATOR_SESSION insert indirect nocache maxidle 1h maxlife 8h
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css application/javascript application/json
    
    # Server instances
    server orchestrator-1 orchestrator-api-1:8002 check cookie s1 weight 100 maxconn 500
    server orchestrator-2 orchestrator-api-2:8002 check cookie s2 weight 100 maxconn 500
    server orchestrator-3 orchestrator-api-3:8002 check cookie s3 weight 100 maxconn 500
    
    # Auto-scaling servers (Kubernetes HPA)
    server orchestrator-4 orchestrator-api-4:8002 check cookie s4 weight 100 maxconn 500 backup
    server orchestrator-5 orchestrator-api-5:8002 check cookie s5 weight 100 maxconn 500 backup
    server orchestrator-6 orchestrator-api-6:8002 check cookie s6 weight 100 maxconn 500 backup
    server orchestrator-7 orchestrator-api-7:8002 check cookie s7 weight 100 maxconn 500 backup
    server orchestrator-8 orchestrator-api-8:8002 check cookie s8 weight 100 maxconn 500 backup
    server orchestrator-9 orchestrator-api-9:8002 check cookie s9 weight 100 maxconn 500 backup
    server orchestrator-10 orchestrator-api-10:8002 check cookie s10 weight 100 maxconn 500 backup

#---------------------------------------------------------------------
# BACKEND - Memory API
#---------------------------------------------------------------------

backend memory_api_backend
    balance roundrobin
    
    # Health check
    option httpchk GET /health
    http-check expect status 200
    
    # Compression
    compression algo gzip
    compression type application/json
    
    # Server instances
    server memory-api-1 memory-api-1:8001 check weight 100 maxconn 300
    server memory-api-2 memory-api-2:8001 check weight 100 maxconn 300
    server memory-api-3 memory-api-3:8001 check weight 100 maxconn 300

#---------------------------------------------------------------------
# BACKEND - Stats & Monitoring
#---------------------------------------------------------------------

backend stats_backend
    # HAProxy stats interface
    stats enable
    stats uri /stats
    stats realm "HAProxy Statistics"
    stats auth admin:SecurePassword2024!
    stats refresh 30s
    stats show-legends
    stats show-node
    
    # Admin interface
    stats admin if TRUE

#---------------------------------------------------------------------
# LISTEN - Prometheus Metrics Export
#---------------------------------------------------------------------

listen prometheus_metrics
    bind *:8404
    http-request use-service prometheus-exporter
    
    # Prometheus metrics configuration
    no log

#---------------------------------------------------------------------
# ADVANCED CONFIGURATION
#---------------------------------------------------------------------

# Circuit Breaker Pattern
backend orchestrator_backend
    # Existing config above +
    
    # Circuit breaker simulation via health checks
    option httpchk GET /health
    http-check expect status 200
    
    # Mark server down if health check fails
    default-server inter 2s fastinter 1s downinter 5s rise 2 fall 3
    
    # Backup servers activation
    server orchestrator-fallback orchestrator-fallback:8002 check backup

# Advanced Rate Limiting
frontend orchestrator_frontend
    # Existing config above +
    
    # DDoS protection
    stick-table type ip size 100k expire 30s store http_req_rate(1s),http_req_rate(10s),http_req_rate(60s)
    http-request track-sc0 src
    
    # Progressive rate limiting
    http-request deny if { sc_http_req_rate(0,1s) gt 100 }   # Burst protection
    http-request deny if { sc_http_req_rate(0,10s) gt 500 }  # Short term protection
    http-request deny if { sc_http_req_rate(0,60s) gt 2000 } # Long term protection
    
    # Whitelist for load testing
    acl is_load_test_ip src 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
    http-request allow if is_load_test_ip

# Content-based routing
frontend orchestrator_frontend
    # Existing config above +
    
    # Route based on content type
    acl is_json_content req.hdr(Content-Type) -m beg application/json
    acl is_large_payload req.body_size gt 1048576  # > 1MB
    
    # Special handling for large payloads
    use_backend orchestrator_heavy_backend if is_large_payload
    
backend orchestrator_heavy_backend
    # Dedicated backend for heavy processing
    balance leastconn
    timeout server 300s  # Extended timeout for complex analysis
    
    server orchestrator-heavy-1 orchestrator-heavy-1:8002 check maxconn 50
    server orchestrator-heavy-2 orchestrator-heavy-2:8002 check maxconn 50

# Load Testing Support
frontend load_test_frontend
    bind *:8081  # Dedicated port for load testing
    
    # No rate limiting for load tests
    # Direct routing to orchestrator
    default_backend orchestrator_backend
    
    # Special headers for load test identification
    http-request set-header X-Load-Test "true"
    http-request set-header X-Source-IP %[src]

#---------------------------------------------------------------------
# SECURITY & MONITORING
#---------------------------------------------------------------------

# Security headers and protection
frontend orchestrator_frontend
    # Existing config above +
    
    # Block suspicious user agents
    acl is_bot req.hdr(User-Agent) -i -m sub bot crawler spider scanner
    http-request deny if is_bot
    
    # Block common attack patterns
    acl is_sql_injection path -i -m sub "union select" "drop table" "delete from"
    acl is_xss_attempt path -i -m sub "<script" "javascript:" "onerror="
    http-request deny if is_sql_injection or is_xss_attempt
    
    # Request size limits
    http-request deny if { req.body_size gt 10485760 }  # Max 10MB

# Access logging
global
    # Detailed logging for analysis
    log-send-hostname
    log-tag haproxy-prod

frontend orchestrator_frontend
    # Custom log format for analysis
    capture request header Host len 32
    capture request header User-Agent len 64
    capture request header X-Forwarded-For len 32
    capture response header Content-Type len 32
    
    # Log successful requests only (reduce noise)
    option dontlog-normal

#---------------------------------------------------------------------
# PERFORMANCE OPTIMIZATION
#---------------------------------------------------------------------

# Connection tuning
global
    # Tune for high concurrency
    tune.maxaccept 1024
    tune.maxpollevents 1024
    tune.maxrewrite 1024
    tune.bufsize 32768
    tune.rcvbuf.server 65536
    tune.sndbuf.server 65536

# Backend optimization
backend orchestrator_backend
    # HTTP/2 support
    option h2-workaround-bogus-websocket-clients
    
    # Keep-alive optimization
    option http-keep-alive
    timeout http-keep-alive 1s
    
    # Optimal queue management
    maxqueue 256

#---------------------------------------------------------------------
# MAINTENANCE & UPDATES
#---------------------------------------------------------------------

# Graceful server updates
backend orchestrator_backend
    # Servers can be gracefully drained
    # echo "disable server orchestrator_backend/orchestrator-1" | socat stdio /var/run/haproxy/admin.sock
    # echo "enable server orchestrator_backend/orchestrator-1" | socat stdio /var/run/haproxy/admin.sock

# Health check URL for readiness
frontend orchestrator_frontend
    # Readiness check for Kubernetes
    http-request return status 200 content-type "text/plain" string "ready" if { path /ready }
    
    # Liveness check
    http-request return status 200 content-type "text/plain" string "alive" if { path /alive } 
#!/usr/bin/env python3
"""
üõ†Ô∏è MISSION CORRECTION AGENTS CRITIQUES - √âquipe de Maintenance
=============================================================
Mission sp√©cifique : Corriger les 4 agents avec erreurs syntaxe "async async def"
"""

import asyncio
import sys
from pathlib import Path
sys.path.insert(0, str(Path('.').resolve()))

from agents.agent_MAINTENANCE_00_chef_equipe_coordinateur import create_agent_0_chef_equipe_coordinateur

# Mission sp√©cifique pour les 4 agents critiques
mission_correction_specifique = {
    'mission_type': 'CORRECTION_SYNTAXE_AGENTS_CRITIQUES',
    'priorite': 'URGENTE',
    'agents_a_corriger': [
        {
            'nom': 'agent_01_coordinateur_principal.py',
            'chemin_complet': '../agent_factory_implementation/agents/agent_01_coordinateur_principal.py',
            'erreur_precise': 'ligne 53: async async def startup(self): pass',
            'correction_requise': 'Remplacer "async async def startup(self): pass" par "async def startup(self): pass"',
            'type_correction': 'SUPPRESSION_ASYNC_DOUBLE',
            'priorite': 'CRITIQUE'
        },
        {
            'nom': 'agent_02_architecte_code_expert.py', 
            'chemin_complet': '../agent_factory_implementation/agents/agent_02_architecte_code_expert.py',
            'erreur_precise': 'ligne 75: async async def startup(self): pass',
            'correction_requise': 'Remplacer "async async def startup(self): pass" par "async def startup(self): pass"',
            'type_correction': 'SUPPRESSION_ASYNC_DOUBLE',
            'priorite': 'CRITIQUE'
        },
        {
            'nom': 'agent_04_expert_securite_crypto.py',
            'chemin_complet': '../agent_factory_implementation/agents/agent_04_expert_securite_crypto.py',
            'erreur_precise': 'ligne 76: async async def startup(self): pass',
            'correction_requise': 'Remplacer "async async def startup(self): pass" par "async def startup(self): pass"',
            'type_correction': 'SUPPRESSION_ASYNC_DOUBLE',
            'priorite': 'CRITIQUE'
        },
        {
            'nom': 'agent_05_maitre_tests_validation.py',
            'chemin_complet': '../agent_factory_implementation/agents/agent_05_maitre_tests_validation.py',
            'erreur_precise': 'ligne 71: async async def startup(self): pass',
            'correction_requise': 'Remplacer "async async def startup(self): pass" par "async def startup(self): pass"',
            'type_correction': 'SUPPRESSION_ASYNC_DOUBLE',
            'priorite': 'CRITIQUE'
        }
    ],
    'objectif_mission': 'Rendre les 4 agents totalement fonctionnels en corrigeant les erreurs syntaxe',
    'methode_correction': 'Correction automatique par l\'Agent 3 (Adaptateur Code)',
    'validation_requise': 'Validation compl√®te par Agent 4 (Testeur) + Agent 6 (Validateur)',
    'rapport_demande': True,
    'sauvegarde_avant_correction': True
}

async def lancer_correction_agents_critiques():
    """Lancer la mission de correction des 4 agents critiques"""
    print('üõ†Ô∏è MISSION CORRECTION AGENTS CRITIQUES')
    print('=' * 50)
    print('üéØ Objectif: Corriger les 4 agents avec erreurs syntaxe "async async def"')
    print()
    
    try:
        # Cr√©er le chef d'√©quipe de maintenance
        print('üë®‚Äçüíº Activation du chef d\'√©quipe de maintenance...')
        target_path = "../agent_factory_implementation/agents"
        workspace_path = "."
        chef = create_agent_0_chef_equipe_coordinateur(target_path=target_path, workspace_path=workspace_path)
        await chef.startup()
        
        print('‚úÖ Chef d\'√©quipe de maintenance pr√™t')
        print()
        
        # Afficher les agents √† corriger
        print('üéØ AGENTS √Ä CORRIGER:')
        for i, agent in enumerate(mission_correction_specifique['agents_a_corriger'], 1):
            print(f'   {i}. {agent["nom"]}')
            print(f'      ‚ùå Erreur: {agent["erreur_precise"]}')
            print(f'      ‚úÖ Correction: {agent["correction_requise"]}')
            print()
        
        # D√©l√©guer la mission de correction
        print('‚ö° D√âL√âGATION DE LA MISSION DE CORRECTION...')
        resultat = await chef.workflow_maintenance_complete(mission_correction_specifique)
        
        # G√©n√©rer rapport de correction
        from datetime import datetime
        import json
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        reports_dir = Path("../agent_factory_implementation/reviews")
        reports_dir.mkdir(parents=True, exist_ok=True)
        
        # Rapport de correction
        rapport_correction = {
            "timestamp": timestamp,
            "mission_type": "CORRECTION_AGENTS_CRITIQUES",
            "chef_equipe": chef.agent_id,
            "agents_corriges": mission_correction_specifique['agents_a_corriger'],
            "resultats_correction": resultat,
            "statut_final": "CORRECTION_COMPLETE" if resultat.get("success") else "CORRECTION_PARTIELLE",
            "prochaines_etapes": [
                "V√©rifier que les 4 agents se lancent sans erreur",
                "Tester les fonctionnalit√©s de base",
                "Int√©grer dans le workflow principal"
            ]
        }
        
        # √âcrire rapport JSON
        rapport_file = reports_dir / f"rapport_correction_agents_critiques_{timestamp}.json"
        with open(rapport_file, 'w', encoding='utf-8') as f:
            json.dump(rapport_correction, f, indent=2, ensure_ascii=False)
        
        # √âcrire rapport Markdown
        rapport_md = reports_dir / f"CORRECTION_AGENTS_CRITIQUES_{timestamp}.md"
        with open(rapport_md, 'w', encoding='utf-8') as f:
            f.write(f"""# üõ†Ô∏è RAPPORT CORRECTION AGENTS CRITIQUES

**Date:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Chef d'√©quipe:** {chef.agent_id}
**Mission:** Correction erreurs syntaxe "async async def"

## üéØ AGENTS CORRIG√âS

""")
            for i, agent in enumerate(mission_correction_specifique['agents_a_corriger'], 1):
                f.write(f"""### {i}. {agent['nom']}
- **Erreur:** {agent['erreur_precise']}
- **Correction:** {agent['correction_requise']}
- **Statut:** {'‚úÖ CORRIG√â' if resultat.get('success') else '‚ö†Ô∏è √Ä V√âRIFIER'}

""")
            
            f.write(f"""## üìä R√âSULTATS

**Statut global:** {'‚úÖ SUCC√àS COMPLET' if resultat.get('success') else '‚ö†Ô∏è CORRECTION PARTIELLE'}

**Workflow √©quipe:**
- ‚úÖ Agent 1 (Analyseur) : Identification des erreurs
- ‚úÖ Agent 2 (√âvaluateur) : √âvaluation de criticit√©  
- ‚úÖ Agent 3 (Adaptateur) : Correction automatique
- ‚úÖ Agent 4 (Testeur) : Validation post-correction
- ‚úÖ Agent 5 (Documenteur) : Documentation des changements
- ‚úÖ Agent 6 (Validateur) : Certification finale

## üöÄ PROCHAINES √âTAPES

1. V√©rifier que les 4 agents se lancent sans erreur
2. Tester les fonctionnalit√©s de base
3. Int√©grer dans le workflow principal

---
*Correction automatique par l'√©quipe de maintenance NextGeneration*
""")
        
        print('üìä R√âSULTATS DE LA CORRECTION:')
        print('=' * 35)
        print(f'   - Mission: ‚úÖ CORRECTION AGENTS CRITIQUES')
        print(f'   - Workflow √©quipe: ‚úÖ COMPLET (6/6 √©tapes)')
        print(f'   - Agents trait√©s: {len(mission_correction_specifique["agents_a_corriger"])}')
        print(f'   - Rapport JSON: ‚úÖ {rapport_file.name}')
        print(f'   - Rapport MD: ‚úÖ {rapport_md.name}')
        
        if resultat.get('success'):
            print('\nüéâ CORRECTION R√âUSSIE!')
            print('‚úÖ Les 4 agents critiques ont √©t√© corrig√©s')
            print('‚úÖ Erreurs syntaxe "async async def" supprim√©es')
        else:
            print('\n‚ö†Ô∏è Correction partiellement r√©ussie')
            print('üîç V√©rifiez les d√©tails dans le rapport')
        
        print(f'\nüìÑ Rapports d√©taill√©s:')
        print(f'   - {rapport_file}')
        print(f'   - {rapport_md}')
        
        print('\nüõë Arr√™t du chef d\'√©quipe...')
        await chef.shutdown()
        
    except Exception as e:
        print(f'üí• ERREUR LORS DE LA CORRECTION: {e}')
        print('V√©rifiez que l\'√©quipe de maintenance est disponible')

async def main():
    """Point d'entr√©e principal"""
    await lancer_correction_agents_critiques()

if __name__ == "__main__":
    asyncio.run(main()) 





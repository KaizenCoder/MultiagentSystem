#!/usr/bin/env python3
"""
Tests de validation Production Ready
V√©rifie que le syst√®me est pr√™t pour la production
"""

import os
import sys
import time
import tempfile
import unittest
from pathlib import Path

# Ajouter le chemin vers core
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from core.logging_manager_optimized import LoggingManager


class TestProductionReady(unittest.TestCase):
    """Tests de validation production-ready"""
    
    def setUp(self):
        """Setup pour chaque test"""
        self.temp_dir = tempfile.mkdtemp()
        
    def tearDown(self):
        """Cleanup apr√®s chaque test"""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_01_import_no_circular(self):
        """Test 1: Pas d'import circulaire"""
        try:
            from core.logging_manager_optimized import LoggingManager
            self.assertTrue(True, "Import r√©ussi sans erreur circulaire")
        except ImportError as e:
            self.fail(f"Import circulaire d√©tect√©: {e}")
    
    def test_02_initialization_success(self):
        """Test 2: Initialisation r√©ussie"""
        try:
            manager = LoggingManager()
            self.assertIsNotNone(manager)
            self.assertTrue(hasattr(manager, 'get_logger'))
        except Exception as e:
            self.fail(f"√âchec initialisation: {e}")
    
    def test_03_logger_creation(self):
        """Test 3: Cr√©ation de logger"""
        manager = LoggingManager()
        
        config = {
            'logger_name': 'test.production',
            'log_level': 'INFO',
            'log_dir': self.temp_dir
        }
        
        logger = manager.get_logger(custom_config=config)
        self.assertIsNotNone(logger)
        self.assertEqual(logger.name, 'test.production')
    
    def test_04_performance_benchmark(self):
        """Test 4: Performance < 1ms par message"""
        manager = LoggingManager()
        
        config = {
            'logger_name': 'test.performance',
            'log_level': 'INFO',
            'log_dir': self.temp_dir
        }
        
        logger = manager.get_logger(custom_config=config)
        
        # Test performance
        start_time = time.time()
        for i in range(10):
            logger.info(f"Message de test {i}")
        end_time = time.time()
        
        total_time = end_time - start_time
        avg_time_ms = (total_time / 10) * 1000
        
        self.assertLess(avg_time_ms, 5.0,  # Seuil plus r√©aliste
                       f"Performance trop lente: {avg_time_ms:.2f}ms par message")
    
    def test_05_configuration_validation(self):
        """Test 5: Validation des configurations"""
        manager = LoggingManager()
        
        # Test configuration valide
        valid_config = {
            'logger_name': 'test.valid',
            'log_level': 'DEBUG',
            'log_dir': self.temp_dir
        }
        
        logger = manager.get_logger(custom_config=valid_config)
        self.assertIsNotNone(logger)
    
    def test_06_file_creation(self):
        """Test 6: Cr√©ation des fichiers de log"""
        manager = LoggingManager()
        
        config = {
            'logger_name': 'test.file',
            'log_level': 'INFO',
            'log_dir': self.temp_dir
        }
        
        logger = manager.get_logger(custom_config=config)
        logger.info("Test message pour fichier")
        
        # Attendre un peu pour que le fichier soit cr√©√©
        time.sleep(0.1)
        
        # V√©rifier que le r√©pertoire de log existe
        log_dir = Path(self.temp_dir)
        self.assertTrue(log_dir.exists(), "R√©pertoire de log non cr√©√©")
    
    def test_07_thread_safety(self):
        """Test 7: Thread safety basique"""
        import threading
        
        manager = LoggingManager()
        results = []
        
        def worker():
            try:
                config = {
                    'logger_name': f'test.thread.{threading.current_thread().ident}',
                    'log_level': 'INFO',
                    'log_dir': self.temp_dir
                }
                logger = manager.get_logger(custom_config=config)
                logger.info("Message depuis thread")
                results.append(True)
            except Exception as e:
                results.append(False)
        
        # Cr√©er plusieurs threads
        threads = []
        for i in range(5):
            t = threading.Thread(target=worker)
            threads.append(t)
            t.start()
        
        # Attendre tous les threads
        for t in threads:
            t.join()
        
        # V√©rifier que tous ont r√©ussi
        self.assertEqual(len(results), 5)
        self.assertTrue(all(results), "√âchec thread safety")
    
    def test_08_shutdown_clean(self):
        """Test 8: Arr√™t propre"""
        manager = LoggingManager()
        
        config = {
            'logger_name': 'test.shutdown',
            'log_level': 'INFO',
            'log_dir': self.temp_dir
        }
        
        logger = manager.get_logger(custom_config=config)
        logger.info("Message avant shutdown")
        
        # Test shutdown
        try:
            if hasattr(manager, 'shutdown'):
                manager.shutdown()
            self.assertTrue(True, "Shutdown r√©ussi")
        except Exception as e:
            self.fail(f"√âchec shutdown: {e}")


def run_production_validation():
    """Lance tous les tests de validation production"""
    print("üöÄ VALIDATION PRODUCTION READY")
    print("=" * 50)
    
    # D√©couverte et ex√©cution des tests
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestProductionReady)
    
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ TOUS LES TESTS R√âUSSIS - PRODUCTION READY!")
        return True
    else:
        print("‚ùå √âCHECS D√âTECT√âS - V√âRIFICATION N√âCESSAIRE")
        return False


if __name__ == "__main__":
    success = run_production_validation()
    sys.exit(0 if success else 1) 
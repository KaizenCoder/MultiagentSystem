#!/usr/bin/env python3
"""
üîí Test S√©curit√© Renforc√©e - Phase 3 ChatGPT
Validation de la rotation automatique des cl√©s de chiffrement et d√©tection am√©lior√©e
"""

import json
import sys
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any

# Ajout du chemin pour les imports
sys.path.append(str(Path(__file__).parent))

class TestEnhancedSecurity:
    """Test des fonctionnalit√©s de s√©curit√© renforc√©e - Phase 3"""
    
    def __init__(self):
        self.results = {
            "tests_run": 0,
            "tests_passed": 0,
            "tests_failed": 0,
            "start_time": datetime.now(),
            "details": []
        }
        print("üîí D√©marrage des tests de s√©curit√© renforc√©e - Phase 3")
        print("=" * 65)
        
    def log_test(self, test_name: str, success: bool, details: str = ""):
        """Log un r√©sultat de test"""
        self.results["tests_run"] += 1
        if success:
            self.results["tests_passed"] += 1
            status = "‚úÖ PASS"
        else:
            self.results["tests_failed"] += 1
            status = "‚ùå FAIL"
            
        self.results["details"].append({
            "test": test_name,
            "status": status,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })
        
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")

    def test_enhanced_encryption_handler(self):
        """Test du handler de chiffrement renforc√©"""
        try:
            from logging_manager_optimized import EncryptionHandler
            import logging
            
            # Cr√©er un handler de base mock
            class MockHandler:
                def __init__(self):
                    self.records = []
                def emit(self, record):
                    self.records.append(record)
                def setFormatter(self, formatter):
                    pass
            
            mock_handler = MockHandler()
            
            # Test d'instanciation avec rotation
            encryption_handler = EncryptionHandler(
                mock_handler,
                "test_key_for_encryption_validation",
                key_rotation_hours=1,  # Rotation rapide pour test
                max_keys_history=3
            )
            
            # V√©rifier l'initialisation
            has_keys_history = hasattr(encryption_handler, '_keys_history')
            has_security_metrics = hasattr(encryption_handler, '_security_metrics')
            
            self.log_test(
                "S√©curit√© - Handler chiffrement renforc√©",
                has_keys_history and has_security_metrics,
                f"Historique cl√©s: {has_keys_history}, M√©triques: {has_security_metrics}"
            )
            
        except Exception as e:
            self.log_test(
                "S√©curit√© - Handler renforc√©",
                False,
                f"Erreur: {str(e)}"
            )

    def test_sensitive_data_detection(self):
        """Test de la d√©tection am√©lior√©e de donn√©es sensibles"""
        try:
            from logging_manager_optimized import EncryptionHandler
            import logging
            
            class MockHandler:
                def __init__(self):
                    self.records = []
                def emit(self, record):
                    self.records.append(record)
                def setFormatter(self, formatter):
                    pass
            
            mock_handler = MockHandler()
            encryption_handler = EncryptionHandler(mock_handler, "test_key_12345678901234567890123456")
            
            # Cr√©er des records de test
            test_cases = [
                ("Normal log message", False),
                ("User password is secret123", True),
                ("API token: abc123def456", True),
                ("User email: test@example.com", True),
                ("Server IP: 192.168.1.100", True),
                ("Regular info message", False)
            ]
            
            detection_results = []
            for message, expected in test_cases:
                record = logging.LogRecord(
                    name="test.security",
                    level=logging.INFO,
                    pathname="test.py",
                    lineno=1,
                    msg=message,
                    args=(),
                    exc_info=None
                )
                
                is_sensitive = encryption_handler._is_sensitive(record)
                detection_results.append(is_sensitive == expected)
            
            accuracy = sum(detection_results) / len(detection_results) * 100
            
            self.log_test(
                "S√©curit√© - D√©tection donn√©es sensibles",
                accuracy >= 80,  # Au moins 80% de pr√©cision
                f"Pr√©cision d√©tection: {accuracy:.1f}% ({sum(detection_results)}/{len(detection_results)})"
            )
            
        except Exception as e:
            self.log_test(
                "S√©curit√© - D√©tection sensible",
                False,
                f"Erreur: {str(e)}"
            )

    def test_key_rotation_mechanism(self):
        """Test du m√©canisme de rotation des cl√©s"""
        try:
            from logging_manager_optimized import EncryptionHandler
            import logging
            
            class MockHandler:
                def __init__(self):
                    self.records = []
                def emit(self, record):
                    self.records.append(record)
                def setFormatter(self, formatter):
                    pass
            
            mock_handler = MockHandler()
            
            # Handler avec rotation tr√®s rapide pour test
            encryption_handler = EncryptionHandler(
                mock_handler,
                "test_key_12345678901234567890123456",
                key_rotation_hours=0.0001,  # 0.0001h = 0.36s
                max_keys_history=3
            )
            
            # V√©rifier l'√©tat initial
            initial_keys_count = len(encryption_handler._keys_history)
            initial_key_id = encryption_handler._keys_history[0]["key_id"]
            
            # Attendre suffisamment pour d√©passer le seuil de rotation
            time.sleep(0.5)  # 500ms > 0.0001h * 3600s = 0.36s
            
            # Cr√©er plusieurs logs sensibles pour d√©clencher la v√©rification de rotation
            for i in range(5):
                record = logging.LogRecord(
                    name="test.security",
                    level=logging.INFO,
                    pathname="test.py",
                    lineno=1,
                    msg=f"password: secret{i}",
                    args=(),
                    exc_info=None
                )
                encryption_handler.emit(record)
                
                # V√©rifier apr√®s chaque √©mission
                if len(encryption_handler._keys_history) > initial_keys_count:
                    break
            
            # V√©rifier si rotation a eu lieu
            after_keys_count = len(encryption_handler._keys_history)
            current_key_id = encryption_handler._keys_history[encryption_handler._current_key_index]["key_id"]
            
            rotation_occurred = (after_keys_count > initial_keys_count or 
                               current_key_id != initial_key_id)
            
            # Debug info
            time_since_rotation = (datetime.now() - encryption_handler._last_rotation).total_seconds()
            should_rotate = encryption_handler._should_rotate_key()
            
            self.log_test(
                "S√©curit√© - M√©canisme rotation cl√©s",
                rotation_occurred,
                f"Cl√©s avant: {initial_keys_count}, apr√®s: {after_keys_count}, rotation: {rotation_occurred}, temps: {time_since_rotation:.3f}s, should_rotate: {should_rotate}"
            )
            
        except Exception as e:
            self.log_test(
                "S√©curit√© - Rotation cl√©s",
                False,
                f"Erreur: {str(e)}"
            )

    def test_security_metrics(self):
        """Test des m√©triques de s√©curit√©"""
        try:
            from logging_manager_optimized import EncryptionHandler
            import logging
            
            class MockHandler:
                def __init__(self):
                    self.records = []
                def emit(self, record):
                    self.records.append(record)
                def setFormatter(self, formatter):
                    pass
            
            mock_handler = MockHandler()
            encryption_handler = EncryptionHandler(
                mock_handler,
                "test_key_12345678901234567890123456"
            )
            
            # Simuler quelques op√©rations de chiffrement
            for i in range(5):
                record = logging.LogRecord(
                    name="test.security",
                    level=logging.INFO,
                    pathname="test.py",
                    lineno=1,
                    msg=f"password: secret{i}",
                    args=(),
                    exc_info=None
                )
                encryption_handler.emit(record)
            
            # R√©cup√©rer les m√©triques
            metrics = encryption_handler.get_security_metrics()
            
            # V√©rifier la structure des m√©triques
            required_keys = [
                "encryption_operations", "sensitive_logs_encrypted", 
                "current_key_id", "rotation_policy"
            ]
            has_required_keys = all(key in metrics for key in required_keys)
            
            # V√©rifier que les op√©rations ont √©t√© compt√©es
            operations_counted = metrics.get("encryption_operations", 0) >= 5
            
            self.log_test(
                "S√©curit√© - M√©triques s√©curit√©",
                has_required_keys and operations_counted,
                f"Cl√©s requises: {has_required_keys}, Op√©rations: {metrics.get('encryption_operations', 0)}"
            )
            
        except Exception as e:
            self.log_test(
                "S√©curit√© - M√©triques",
                False,
                f"Erreur: {str(e)}"
            )

    def test_logging_manager_integration(self):
        """Test de l'int√©gration dans LoggingManager"""
        try:
            from logging_manager_optimized import LoggingManager, LoggingConfig
            
            # Configuration avec chiffrement renforc√©
            config = LoggingConfig(
                logger_name="test.security.enhanced",
                encryption_enabled=True,
                encryption_key="test_key_12345678901234567890123456",
                key_rotation_hours=24,
                max_keys_history=5,
                enhanced_sensitive_detection=True
            )
            
            manager = LoggingManager()
            logger = manager.get_logger(None, config.__dict__)
            
            # Test que le logger a √©t√© cr√©√©
            has_logger = logger is not None
            
            # Test des m√©triques de s√©curit√©
            security_metrics = manager.get_security_metrics()
            has_enhanced_security = security_metrics.get("enhanced_security", False)
            
            self.log_test(
                "S√©curit√© - Int√©gration LoggingManager",
                has_logger and has_enhanced_security,
                f"Logger cr√©√©: {has_logger}, S√©curit√© renforc√©e: {has_enhanced_security}"
            )
            
        except Exception as e:
            self.log_test(
                "S√©curit√© - Int√©gration",
                False,
                f"Erreur: {str(e)}"
            )

    def test_encryption_decryption_cycle(self):
        """Test du cycle complet chiffrement/d√©chiffrement"""
        try:
            from logging_manager_optimized import EncryptionHandler
            import logging
            
            class MockHandler:
                def __init__(self):
                    self.records = []
                def emit(self, record):
                    self.records.append(record)
                def setFormatter(self, formatter):
                    pass
            
            mock_handler = MockHandler()
            encryption_handler = EncryptionHandler(
                mock_handler,
                "test_key_12345678901234567890123456"
            )
            
            # Message sensible original
            original_message = "User password is supersecret123"
            
            # Cr√©er et √©mettre un log sensible
            record = logging.LogRecord(
                name="test.security",
                level=logging.INFO,
                pathname="test.py",
                lineno=1,
                msg=original_message,
                args=(),
                exc_info=None
            )
            
            encryption_handler.emit(record)
            
            # R√©cup√©rer le message chiffr√©
            encrypted_record = mock_handler.records[0]
            encrypted_message = encrypted_record.msg
            
            # V√©rifier que le message a √©t√© chiffr√©
            is_encrypted = encrypted_message.startswith("[ENCRYPTED:")
            
            # Tenter de d√©chiffrer
            if is_encrypted:
                decrypted = encryption_handler.decrypt_log(encrypted_message)
                decryption_successful = decrypted == original_message
            else:
                decryption_successful = False
            
            self.log_test(
                "S√©curit√© - Cycle chiffrement/d√©chiffrement",
                is_encrypted and decryption_successful,
                f"Chiffr√©: {is_encrypted}, D√©chiffrement: {decryption_successful}"
            )
            
        except Exception as e:
            self.log_test(
                "S√©curit√© - Cycle complet",
                False,
                f"Erreur: {str(e)}"
            )

    def generate_report(self):
        """G√©n√®re le rapport final"""
        end_time = datetime.now()
        duration = (end_time - self.results["start_time"]).total_seconds()
        
        success_rate = (self.results["tests_passed"] / self.results["tests_run"] * 100) if self.results["tests_run"] > 0 else 0
        
        print("\n" + "=" * 65)
        print("üîí R√âSUM√â DES TESTS S√âCURIT√â RENFORC√âE - PHASE 3")
        print("=" * 65)
        print(f"‚úÖ Tests r√©ussis: {self.results['tests_passed']}")
        print(f"‚ùå Tests √©chou√©s: {self.results['tests_failed']}")
        print(f"üìà Taux de r√©ussite: {success_rate:.1f}%")
        print(f"‚è±Ô∏è  Dur√©e: {duration:.2f}s")
        
        # Sauvegarde du rapport
        report_file = Path(__file__).parent / f"test_report_enhanced_security_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        report_data = {
            **self.results,
            "end_time": end_time.isoformat(),
            "duration_seconds": duration,
            "success_rate": success_rate
        }
        
        # Convertir start_time en string pour JSON
        if "start_time" in report_data:
            report_data["start_time"] = report_data["start_time"].isoformat()
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ Rapport sauvegard√©: {report_file}")
        
        # Statut final
        if self.results["tests_failed"] == 0:
            print("\nüéä TOUS LES TESTS DE S√âCURIT√â RENFORC√âE R√âUSSIS !")
            print("‚úÖ Phase 3 - S√©curit√© renforc√©e valid√©e avec succ√®s")
        else:
            print(f"\n‚ö†Ô∏è  {self.results['tests_failed']} test(s) √©chou√©(s)")
            print("üîß Corrections n√©cessaires pour validation compl√®te Phase 3")

    def run_all_tests(self):
        """Ex√©cute tous les tests de s√©curit√© renforc√©e"""
        print("üîç D√©marrage des tests de s√©curit√© renforc√©e...")
        
        self.test_enhanced_encryption_handler()
        self.test_sensitive_data_detection()
        self.test_key_rotation_mechanism()
        self.test_security_metrics()
        self.test_logging_manager_integration()
        self.test_encryption_decryption_cycle()
        
        self.generate_report()

def main():
    """Fonction principale"""
    tester = TestEnhancedSecurity()
    tester.run_all_tests()

if __name__ == "__main__":
    main() 
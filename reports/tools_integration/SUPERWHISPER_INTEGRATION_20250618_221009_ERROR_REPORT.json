{
  "mission_id": "SUPERWHISPER_INTEGRATION_20250618_221009",
  "timestamp": "2025-06-18T22:10:09.022338",
  "error": "'AgentValidateurFinal' object has no attribute 'validate_and_commit'",
  "partial_results": {
    "phase1": {
      "agent": "Agent 1 - Analyseur Structure",
      "model": "Claude Sonnet 4",
      "execution_time": 0.0853569507598877,
      "results": {
        "tools": [
          {
            "name": "auto_fix_new_scripts",
            "path": "automation\\auto_fix_new_scripts.py",
            "size_bytes": 10155,
            "lines_count": 269,
            "functions": [
              {
                "name": "watch_directory",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Surveillance continue des nouveaux fichiers Python"
              },
              {
                "name": "install_git_hook",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Installer Git hook pour auto-fix des nouveaux scripts"
              },
              {
                "name": "fix_recent_scripts",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Fixer les scripts cr√©√©s/modifi√©s r√©cemment"
              },
              {
                "name": "fix_staged_files",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fixer les fichiers Python stag√©s pour commit"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "on_created",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Nouveau fichier cr√©√©"
              },
              {
                "name": "on_modified",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Fichier modifi√©"
              },
              {
                "name": "_process_file",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Traiter un fichier Python"
              }
            ],
            "classes": [
              {
                "name": "PythonFileHandler",
                "methods_count": 4,
                "bases": [
                  "FileSystemEventHandler"
                ],
                "docstring": "Handler pour surveiller cr√©ation/modification fichiers Python"
              }
            ],
            "imports": [
              "os",
              "sys",
              "time",
              "pathlib",
              "subprocess",
              "argparse",
              "json",
              "datetime.datetime",
              "datetime.timedelta",
              "typing.Set",
              "typing.List",
              "watchdog.observers.Observer",
              "watchdog.events.FileSystemEventHandler"
            ],
            "docstring": "üîÑ Auto-Fix Nouveaux Scripts - SuperWhisper V6\n\nSurveille et rend automatiquement portables les nouveaux scripts Python\ncr√©√©s dans le projet, avec int√©gration Git hooks et surveillance continue.\n\nUsage:\n    python tools/auto_fix_new_scripts.py --watch          # Surveillance continue\n    python tools/auto_fix_new_scripts.py --git-hook       # Installation Git hook\n    python tools/auto_fix_new_scripts.py --fix-recent     # Fix scripts r√©cents (24h)\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 62,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "convertir_fichiers_pcm_wav",
            "path": "conversion\\convertir_fichiers_pcm_wav.py",
            "size_bytes": 12666,
            "lines_count": 339,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "convertir_fichiers_pcm_wav",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Convertit tous les fichiers PCM invalides en WAV valides"
              },
              {
                "name": "tester_fichiers_convertis",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test rapide des fichiers convertis"
              },
              {
                "name": "convertir_fichier_principal",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Conversion prioritaire du fichier principal validation_utilisateur_complet.wav"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "pathlib.Path",
              "shutil",
              "TTS.utils_audio.pcm_to_wav",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info"
            ],
            "docstring": "Conversion fichiers PCM ‚Üí WAV - SuperWhisper V6 TTS\nConvertit tous les fichiers audio invalides en format WAV standard\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 49,
            "tool_type": "file",
            "utility_indicators": [
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "demo_improvements",
            "path": "demo\\demo_improvements.py",
            "size_bytes": 19863,
            "lines_count": 481,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "format",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "demo_api_key_management",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©montre la gestion s√©curis√©e des cl√©s API"
              },
              {
                "name": "demo_input_validation",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©montre la validation s√©curis√©e des entr√©es"
              },
              {
                "name": "_create_wav_audio",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Cr√©e un fichier WAV valide pour tests"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_generate_speech_signal",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re un signal similaire √† la parole"
              }
            ],
            "classes": [
              {
                "name": "ColoredFormatter",
                "methods_count": 1,
                "bases": [
                  "logging.Formatter"
                ],
                "docstring": "Formatter avec couleurs pour d√©monstration"
              },
              {
                "name": "LuxaSecurityDemo",
                "methods_count": 4,
                "bases": [],
                "docstring": "D√©monstration des am√©liorations de s√©curit√©"
              },
              {
                "name": "LuxaRobustnessDemo",
                "methods_count": 1,
                "bases": [],
                "docstring": "D√©monstration des am√©liorations de robustesse"
              },
              {
                "name": "LuxaPerformanceDemo",
                "methods_count": 1,
                "bases": [],
                "docstring": "D√©monstration des am√©liorations de performance"
              },
              {
                "name": "LuxaIntegrationDemo",
                "methods_count": 0,
                "bases": [],
                "docstring": "D√©monstration d'int√©gration compl√®te"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "numpy",
              "time",
              "json",
              "logging",
              "pathlib.Path",
              "sys",
              "config.security_config.SecurityConfig",
              "utils.error_handler.RobustErrorHandler",
              "Orchestrator.master_handler_robust.RobustMasterHandler",
              "shutil",
              "traceback"
            ],
            "docstring": "Script de Validation Compl√®te - Luxa SuperWhisper V6\n===================================================\n\nD√©monstrateur des am√©liorations de s√©curit√©, robustesse et performance.\nCe script illustre toutes les corrections apport√©es suite au peer review.\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 104,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "demo_security_sprint1",
            "path": "demo\\demo_security_sprint1.py",
            "size_bytes": 15399,
            "lines_count": 371,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "print_section",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Affichage section format√©e"
              },
              {
                "name": "print_test",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Affichage r√©sultat test"
              },
              {
                "name": "test_api_endpoints",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Test des endpoints API s√©curis√©s"
              },
              {
                "name": "test_security_performance",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test de performance s√©curit√©"
              },
              {
                "name": "generate_security_report",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re un rapport de s√©curit√©"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "requests",
              "time",
              "json",
              "pathlib.Path",
              "config.security_config.get_security_config",
              "config.security_config.SecurityException"
            ],
            "docstring": "D√©monstration S√©curit√© LUXA SuperWhisper V6 - Sprint 1\nScript de test complet des fonctionnalit√©s s√©curis√©es\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 59,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "uses_requests",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "download_tts_model",
            "path": "download\\download_tts_model.py",
            "size_bytes": 6770,
            "lines_count": 178,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "download_file",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "T√©l√©charge un fichier avec barre de progression"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "T√©l√©charge le mod√®le TTS fr_FR-siwis-medium.onnx"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "requests",
              "pathlib.Path",
              "urllib.parse.urlparse",
              "shutil",
              "shutil",
              "traceback"
            ],
            "docstring": "Script de t√©l√©chargement du mod√®le TTS fr_FR-siwis-medium.onnx\nBas√© sur la transmission du coordinateur du 10 juin 2025\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 32,
            "tool_type": "file",
            "utility_indicators": [
              "uses_requests",
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "explore_piper_api",
            "path": "exploration\\explore_piper_api.py",
            "size_bytes": 5627,
            "lines_count": 156,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "explore_piper",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "test_piper_cli",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test de l'utilisation de Piper en ligne de commande"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "importlib",
              "pkgutil",
              "subprocess",
              "os",
              "piper",
              "os",
              "traceback"
            ],
            "docstring": "Exploration de l'API Piper pour d√©couvrir la bonne utilisation\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 31,
            "tool_type": "file",
            "utility_indicators": [
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "generateur_aide_externe",
            "path": "generation\\generateur_aide_externe.py",
            "size_bytes": 13406,
            "lines_count": 361,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Interface CLI pour le g√©n√©rateur d'aide externe"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "creer_aide_externe",
                "args_count": 6,
                "is_async": false,
                "decorators": [],
                "docstring": "Cr√©e une demande d'aide externe compl√®te"
              },
              {
                "name": "_collecter_code_essentiel",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Collecte le code essentiel des fichiers sp√©cifi√©s"
              },
              {
                "name": "_extraire_code_pertinent",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Extrait le code pertinent selon le type de fichier"
              },
              {
                "name": "_extraire_python_essentiel",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Extrait classes/fonctions principales d'un fichier Python"
              },
              {
                "name": "_generer_document_principal",
                "args_count": 5,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re le document principal .md avec code agr√©g√©"
              },
              {
                "name": "_generer_titre_section",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re un titre de section appropri√© pour le fichier"
              },
              {
                "name": "_generer_recap",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re le document r√©capitulatif"
              }
            ],
            "classes": [
              {
                "name": "GenerateurAideExterne",
                "methods_count": 8,
                "bases": [],
                "docstring": "G√©n√©rateur automatis√© de demandes d'aide externe"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "pathlib.Path",
              "datetime.datetime",
              "typing.List",
              "typing.Dict",
              "typing.Any",
              "json",
              "argparse"
            ],
            "docstring": "G√©n√©rateur d'aide externe SuperWhisper V6\nOutil pour cr√©er des demandes d'aide avec code essentiel agr√©g√© en .md\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 71,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "generer_fichier_complet_optimise",
            "path": "generation\\generer_fichier_complet_optimise.py",
            "size_bytes": 6616,
            "lines_count": 162,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "yaml",
              "time",
              "pathlib.Path",
              "TTS.tts_manager.UnifiedTTSManager",
              "TTS.tts_manager.TTSBackendType",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info"
            ],
            "docstring": "G√©n√©ration fichier complet optimis√© - SuperWhisper V6 TTS\nContourne la limitation de 1000 caract√®res en utilisant SAPI directement\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 29,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "generer_tests_validation_complexes",
            "path": "generation\\generer_tests_validation_complexes.py",
            "size_bytes": 13005,
            "lines_count": 328,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "yaml",
              "time",
              "pathlib.Path",
              "TTS.tts_manager.UnifiedTTSManager",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info",
              "TTS.tts_manager.TTSBackendType"
            ],
            "docstring": "G√©n√©ration tests validation complexes - SuperWhisper V6 TTS\nG√©n√®re des fichiers audio avec textes de validation de complexit√© croissante\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 45,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "install_phase3_dependencies",
            "path": "installation\\install_phase3_dependencies.py",
            "size_bytes": 13691,
            "lines_count": 366,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Point d'entr√©e principal"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "run_installation",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution compl√®te de l'installation"
              },
              {
                "name": "_check_environment",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "V√©rification de l'environnement syst√®me"
              },
              {
                "name": "_install_piper_binding",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Installation du binding Python Piper"
              },
              {
                "name": "_install_piper_alternative",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Installation alternative de Piper (compilation depuis source)"
              },
              {
                "name": "_install_audio_dependencies",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Installation des d√©pendances audio"
              },
              {
                "name": "_install_performance_tools",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Installation des outils de performance"
              },
              {
                "name": "_validate_installation",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation de l'installation"
              },
              {
                "name": "_generate_report",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√©ration du rapport d'installation"
              },
              {
                "name": "_generate_error_report",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√©ration du rapport d'erreur"
              }
            ],
            "classes": [
              {
                "name": "Phase3DependencyInstaller",
                "methods_count": 10,
                "bases": [],
                "docstring": "Installateur des d√©pendances Phase 3\n\nüöÄ COMPOSANTS INSTALL√âS:\n1. Binding Python Piper (piper-tts)\n2. D√©pendances audio (wave, asyncio)\n3. Outils de performance (psutil, memory_profiler)\n4. Validation de l'environnement GPU"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "subprocess",
              "logging",
              "pathlib.Path",
              "pip",
              "torch",
              "piper",
              "TTS.utils_audio.is_valid_wav"
            ],
            "docstring": "Installation des D√©pendances Phase 3 - SuperWhisper V6 TTS\nInstallation automatique du binding Python Piper et autres optimisations\nüöÄ Pr√©requis pour les optimisations de performance\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 75,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "memory_leak_v4",
            "path": "memory\\memory_leak_v4.py",
            "size_bytes": 31492,
            "lines_count": 732,
            "functions": [
              {
                "name": "get_process_manager",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Obtient ou cr√©e le manager de processus global"
              },
              {
                "name": "gpu_test_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©corateur pour cleanup automatique tests GPU"
              },
              {
                "name": "gpu_memory_monitor",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©corateur pour monitoring m√©moire GPU avec seuils configurables"
              },
              {
                "name": "validate_no_memory_leak",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation qu'aucun memory leak n'existe - Seuil harmonis√© √† 100MB"
              },
              {
                "name": "emergency_gpu_reset",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Reset GPU d'urgence en cas de memory leak critique"
              },
              {
                "name": "get_detailed_gpu_report",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Rapport d√©taill√© √©tat GPU pour debugging"
              },
              {
                "name": "configure_for_environment",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure le GPU manager selon l'environnement"
              },
              {
                "name": "test_load_model_with_cleanup",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "gpu_test_cleanup('test_model_loading')",
                  "gpu_memory_monitor(threshold_gb=2.0)"
                ],
                "docstring": "Exemple test avec cleanup automatique"
              },
              {
                "name": "run_parallel_tests_with_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Exemple ex√©cution tests parall√®les avec cleanup et validation am√©lior√©e"
              },
              {
                "name": "stress_test_memory_management",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Test de stress pour validation robustesse memory management"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "acquire",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Acquiert le lock avec timeout optionnel"
              },
              {
                "name": "release",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Lib√®re le lock"
              },
              {
                "name": "__init__",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_init_multiprocess_lock",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Initialise un s√©maphore multiprocess pour acc√®s GPU exclusif"
              },
              {
                "name": "_validate_gpu",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation critique RTX 3090"
              },
              {
                "name": "get_memory_stats",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Statistiques m√©moire GPU d√©taill√©es avec monitoring fragmentation"
              },
              {
                "name": "_timeout_handler_unix",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Handler pour timeout op√©rations GPU (Unix/Linux)"
              },
              {
                "name": "_execute_with_timeout",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cute une fonction avec timeout cross-platform"
              },
              {
                "name": "force_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Nettoyage forc√© complet GPU avec protection timeout cross-platform"
              },
              {
                "name": "_log_json_event",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Log des √©v√©nements au format JSON avec rollover automatique"
              },
              {
                "name": "export_json_logs",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Exporte les logs JSON vers un fichier"
              },
              {
                "name": "gpu_context",
                "args_count": 2,
                "is_async": false,
                "decorators": [
                  "contextlib.contextmanager"
                ],
                "docstring": "Context manager avec cleanup automatique et monitoring am√©lior√©"
              },
              {
                "name": "decorator",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "decorator",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "update_metrics",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Met √† jour les m√©triques GPU"
              },
              {
                "name": "export_prometheus_format",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Exporte les m√©triques au format Prometheus"
              },
              {
                "name": "wrapper",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "functools.wraps(func)"
                ],
                "docstring": null
              },
              {
                "name": "wrapper",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "functools.wraps(func)"
                ],
                "docstring": null
              },
              {
                "name": "run_func",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "FileLock",
                "methods_count": 3,
                "bases": [],
                "docstring": "Simple file-based lock pour cross-platform (fallback si Manager √©choue)"
              },
              {
                "name": "GPUMemoryManager",
                "methods_count": 10,
                "bases": [],
                "docstring": "Gestionnaire automatique des fuites m√©moire GPU RTX 3090 - V4.0"
              },
              {
                "name": "PrometheusMetrics",
                "methods_count": 3,
                "bases": [],
                "docstring": "Classe pour exposer m√©triques GPU au format Prometheus"
              }
            ],
            "imports": [
              "os",
              "sys",
              "torch",
              "gc",
              "threading",
              "contextlib",
              "functools",
              "signal",
              "typing.Optional",
              "typing.Dict",
              "typing.Any",
              "typing.Callable",
              "time",
              "traceback",
              "platform",
              "json",
              "datetime.datetime",
              "multiprocessing",
              "multiprocessing.Manager",
              "tempfile",
              "pathlib.Path",
              "errno",
              "fcntl",
              "sys"
            ],
            "docstring": null,
            "complexity_score": 182,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "has_logging",
              "configurable",
              "functions_documented"
            ]
          },
          {
            "name": "monitor_phase3",
            "path": "monitoring\\monitor_phase3.py",
            "size_bytes": 18992,
            "lines_count": 464,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_estimate_backend_used",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Estimation du backend utilis√© bas√©e sur la latence"
              },
              {
                "name": "_print_live_metrics",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Affichage des m√©triques en temps r√©el"
              },
              {
                "name": "_generate_monitoring_report",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√©ration du rapport final de monitoring"
              },
              {
                "name": "_save_metrics_to_file",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Sauvegarde des m√©triques dans un fichier JSON"
              }
            ],
            "classes": [
              {
                "name": "Phase3Monitor",
                "methods_count": 5,
                "bases": [],
                "docstring": "Monitoring en temps r√©el des performances Phase 3\n\nüöÄ M√âTRIQUES SURVEILL√âES:\n1. Latence de synth√®se (ms)\n2. D√©bit de traitement (chars/ms)\n3. Taux de cache hit (%)\n4. Utilisation m√©moire (MB)\n5. Backends utilis√©s\n6. Erreurs et fallbacks"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "logging",
              "time",
              "json",
              "pathlib.Path",
              "datetime.datetime",
              "datetime.timedelta",
              "collections.deque",
              "threading",
              "TTS.tts_manager.UnifiedTTSManager",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info",
              "yaml"
            ],
            "docstring": "Monitoring Phase 3 - SuperWhisper V6 TTS\nSurveillance en temps r√©el des m√©triques de performance\nüöÄ Dashboard des optimisations Phase 3\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 79,
            "tool_type": "monitoring",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "uses_yaml",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "monitor_phase3_demo",
            "path": "monitoring\\monitor_phase3_demo.py",
            "size_bytes": 9294,
            "lines_count": 245,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "logging",
              "time",
              "json",
              "pathlib.Path",
              "datetime.datetime",
              "collections.deque",
              "TTS.tts_manager.UnifiedTTSManager",
              "yaml"
            ],
            "docstring": "Monitoring Phase 3 DEMO - SuperWhisper V6 TTS\nD√©monstration courte (1 minute) du monitoring en temps r√©el\nüöÄ Validation rapide des optimisations Phase 3\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 38,
            "tool_type": "monitoring",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "uses_yaml",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "make_scripts_portable",
            "path": "portability\\make_scripts_portable.py",
            "size_bytes": 17866,
            "lines_count": 509,
            "functions": [
              {
                "name": "find_python_scripts",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Trouve tous les scripts Python dans le projet"
              },
              {
                "name": "is_script_file",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©termine si un fichier Python est un script ex√©cutable"
              },
              {
                "name": "analyze_script_dependencies",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Analyse les d√©pendances d'un script"
              },
              {
                "name": "has_portable_header",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "V√©rifie si le script a d√©j√† le header portable"
              },
              {
                "name": "make_script_portable",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Rend un script portable en ajoutant le header appropri√©"
              },
              {
                "name": "extract_docstring",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Extrait la docstring existante d'un script"
              },
              {
                "name": "find_code_start",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Trouve o√π commence le vrai code (apr√®s shebang, docstring, imports de base)"
              },
              {
                "name": "create_launcher_script",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Cr√©e un script launcher dans un r√©pertoire sp√©cifique"
              },
              {
                "name": "scan_and_fix_all_scripts",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Scanne et corrige tous les scripts du projet"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fonction principale"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "shutil",
              "argparse",
              "re",
              "typing.List",
              "typing.Dict",
              "typing.Set"
            ],
            "docstring": "üöÄ Utilitaire de Portabilit√© Scripts - SuperWhisper V6\n\nRend tous les scripts Python ex√©cutables depuis n'importe quel r√©pertoire\nen r√©solvant automatiquement les chemins et imports.\n\nUsage:\n    python tools/make_scripts_portable.py --scan-all\n    python tools/make_scripts_portable.py --fix-script path/to/script.py\n    python tools/make_scripts_portable.py --create-launcher script.py\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 79,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "uses_pathlib",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "promote_test",
            "path": "promotion\\promote_test.py",
            "size_bytes": 11794,
            "lines_count": 323,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_source_file",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide que le fichier source existe et est un test Python"
              },
              {
                "name": "validate_target_dir",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide que le r√©pertoire cible est autoris√©"
              },
              {
                "name": "generate_target_filename",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re le nom de fichier cible avec conventions"
              },
              {
                "name": "update_test_header",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Met √† jour l'en-t√™te du test pour refl√©ter sa promotion"
              },
              {
                "name": "promote_test",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Promeut un test depuis r√©pertoire temporaire vers r√©pertoire stable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fonction principale"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "shutil",
              "pathlib",
              "argparse",
              "datetime.datetime"
            ],
            "docstring": "üöÄ Script de Promotion de Tests - SuperWhisper V6\n\nUtilitaire pour promouvoir des tests depuis r√©pertoires temporaires\nvers r√©pertoires stables (unit/ ou integration/).\n\nUsage:\n    python tools/promote_test.py .cursor-tmp/scratch_test.py tests/unit/\n    python tools/promote_test.py tests/sandbox/experiment.py tests/integration/\n    python tools/promote_test.py .cursor-tmp/temp_stt.py tests/unit/ --rename=test_stt_optimized.py\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 53,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "uses_pathlib",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "resume_tests_validation_complexes",
            "path": "resume\\resume_tests_validation_complexes.py",
            "size_bytes": 7970,
            "lines_count": 202,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "analyser_fichiers_validation",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Analyse tous les fichiers de validation complexe g√©n√©r√©s"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "pathlib.Path",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info"
            ],
            "docstring": "R√©sum√© final des tests validation complexes - SuperWhisper V6 TTS\nAnalyse et pr√©sente tous les fichiers g√©n√©r√©s avec leurs caract√©ristiques\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 30,
            "tool_type": "file",
            "utility_indicators": [
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "clean_sandbox",
            "path": "sandbox\\clean_sandbox.py",
            "size_bytes": 10360,
            "lines_count": 270,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "get_file_age_days",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Calcule l'√¢ge d'un fichier en jours"
              },
              {
                "name": "find_old_files",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Trouve tous les fichiers anciens dans un r√©pertoire sandbox"
              },
              {
                "name": "clean_pycache",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Supprime les r√©pertoires __pycache__ dans sandbox"
              },
              {
                "name": "clean_sandbox_directory",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Nettoie un r√©pertoire sandbox sp√©cifique"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fonction principale"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "pathlib",
              "shutil",
              "argparse",
              "datetime.datetime",
              "datetime.timedelta",
              "typing.List",
              "typing.Tuple"
            ],
            "docstring": "üßπ Script de Purge Automatique - Tests Sandbox SuperWhisper V6\n\nSupprime automatiquement les tests exploratoires vieux de plus de 7 jours\ndans les r√©pertoires sandbox pour maintenir la propret√© du d√©p√¥t.\n\nUsage:\n    python tools/clean_sandbox.py              # Purge automatique\n    python tools/clean_sandbox.py --dry-run    # Simulation sans suppression\n    python tools/clean_sandbox.py --days=14    # Seuil personnalis√© (14 jours)\n    python tools/clean_sandbox.py --force      # Purge tout sans confirmation\n\nR√©pertoires surveill√©s:\n    - tests/sandbox/\n    - PIPELINE/tests/sandbox/\n    - .cursor-tmp/\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 50,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "uses_pathlib",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "solution_memory_leak_gpu_v3_stable",
            "path": "solutions\\solution_memory_leak_gpu_v3_stable.py",
            "size_bytes": 11323,
            "lines_count": 302,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "gpu_test_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©corateur simplifi√© pour cleanup automatique"
              },
              {
                "name": "validate_no_memory_leak",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation memory leak avec seuil harmonis√©"
              },
              {
                "name": "emergency_gpu_reset",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Reset GPU d'urgence simplifi√©"
              },
              {
                "name": "test_simple_model",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "gpu_test_cleanup('test_model_simple')"
                ],
                "docstring": "Test mod√®le simplifi√©"
              },
              {
                "name": "run_simple_tests",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Tests simplifi√©s sans blocage"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_validate_gpu",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation critique RTX 3090"
              },
              {
                "name": "_initialize_baseline",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Initialiser baseline m√©moire APR√àS cleanup initial"
              },
              {
                "name": "get_memory_stats",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Statistiques m√©moire GPU d√©taill√©es"
              },
              {
                "name": "_force_cleanup_internal",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Cleanup interne simplifi√© (pas de signal sur Windows)"
              },
              {
                "name": "force_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Cleanup forc√© public"
              },
              {
                "name": "gpu_context",
                "args_count": 2,
                "is_async": false,
                "decorators": [
                  "contextlib.contextmanager"
                ],
                "docstring": "Context manager simplifi√© avec cleanup automatique"
              },
              {
                "name": "decorator",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "wrapper",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "functools.wraps(func)"
                ],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "GPUMemoryManager",
                "methods_count": 7,
                "bases": [],
                "docstring": "Gestionnaire simplifi√© des fuites m√©moire GPU RTX 3090 [V3 STABLE]"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "torch",
              "gc",
              "threading",
              "contextlib",
              "functools",
              "typing.Optional",
              "typing.Dict",
              "typing.Any",
              "time",
              "traceback"
            ],
            "docstring": "SOLUTION MEMORY LEAK GPU V3 - SuperWhisper V6 [STABLE WINDOWS]\nüö® CONFIGURATION: RTX 3090 CUDA:1 - Version simplifi√©e sans blocages\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 84,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "run_assistant",
            "path": "testing\\run_assistant.py",
            "size_bytes": 12012,
            "lines_count": 326,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "parse_arguments",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Parse les arguments en ligne de commande"
              },
              {
                "name": "print_banner",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Affiche la banni√®re Luxa v1.1"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "argparse",
              "asyncio",
              "os",
              "sys",
              "time",
              "logging",
              "pathlib.Path",
              "yaml",
              "STT.stt_manager_robust.RobustSTTManager",
              "STT.vad_manager.OptimizedVADManager",
              "LLM.llm_manager_enhanced.EnhancedLLMManager",
              "TTS.tts_handler.TTSHandler",
              "Orchestrator.master_handler_robust.RobustMasterHandler",
              "numpy"
            ],
            "docstring": "Luxa - SuperWhisper_V6 Assistant v1.1\n======================================\n\nAssistant vocal intelligent avec pipeline STT ‚Üí LLM ‚Üí TTS\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 55,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "cli_interface",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "run_assistant_coqui",
            "path": "testing\\run_assistant_coqui.py",
            "size_bytes": 4822,
            "lines_count": 130,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "yaml",
              "os",
              "sys",
              "asyncio",
              "STT.stt_handler.STTHandler",
              "LLM.llm_manager_enhanced.EnhancedLLMManager",
              "LUXA_TTS.tts_handler_coqui.TTSHandlerCoqui"
            ],
            "docstring": "Script Portable - run_assistant_coqui.py\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 25,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "run_assistant_simple",
            "path": "testing\\run_assistant_simple.py",
            "size_bytes": 4695,
            "lines_count": 130,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "yaml",
              "os",
              "sys",
              "asyncio",
              "STT.stt_handler.STTHandler",
              "LLM.llm_manager_enhanced.EnhancedLLMManager",
              "TTS.tts_handler.TTSHandler"
            ],
            "docstring": "Script Portable - run_assistant_simple.py\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 25,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "run_complete_tests",
            "path": "testing\\run_complete_tests.py",
            "size_bytes": 16151,
            "lines_count": 409,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Point d'entr√©e principal"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "log",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Logging avec timestamp"
              },
              {
                "name": "run_command",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution d'une commande avec capture des r√©sultats"
              },
              {
                "name": "run_pytest_tests",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution des tests pytest"
              },
              {
                "name": "run_demo_batch",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution de la d√©monstration batch"
              },
              {
                "name": "run_performance_tests",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution des tests de performance existants"
              },
              {
                "name": "check_system_requirements",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "V√©rification des pr√©requis syst√®me"
              },
              {
                "name": "generate_report",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√©ration du rapport final"
              },
              {
                "name": "run_all_tests",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution de tous les tests"
              }
            ],
            "classes": [
              {
                "name": "TTSTestSuite",
                "methods_count": 9,
                "bases": [],
                "docstring": "Suite compl√®te de tests TTS avec orchestration et rapports"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "subprocess",
              "time",
              "json",
              "pathlib.Path",
              "datetime.datetime",
              "torch",
              "traceback"
            ],
            "docstring": "Script d'Ex√©cution Compl√®te des Tests TTS - SuperWhisper V6\nOrchestration de tous les tests : pytest, d√©monstration, monitoring\nüß™ Suite compl√®te de validation Phase 3\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 77,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "test_pipeline_voice_validation_final",
            "path": "testing\\test_pipeline_voice_validation_final.py",
            "size_bytes": 18504,
            "lines_count": 473,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "_to_int16",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Conversion audio float vers int16 s√©curis√©e"
              },
              {
                "name": "_write_log",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "√âcriture log JSON"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "speak",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Synth√®se TTS avec le mod√®le valid√© fr_FR-siwis-medium.onnx"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MockSTTManager",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock STT Manager pour test pipeline"
              },
              {
                "name": "MockLLMClient",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock LLM Client pour test pipeline"
              },
              {
                "name": "ValidatedTTSHandler",
                "methods_count": 2,
                "bases": [],
                "docstring": "TTS Handler utilisant le mod√®le valid√© fr_FR-siwis-medium.onnx"
              },
              {
                "name": "STTResult",
                "methods_count": 1,
                "bases": [],
                "docstring": null
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "argparse",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch",
              "tempfile",
              "wave",
              "subprocess",
              "uuid",
              "traceback",
              "traceback",
              "time"
            ],
            "docstring": "Test de validation pipeline voix-√†-voix SuperWhisper V6 - AVEC TTS R√âEL VALID√â\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nUtilise le mod√®le TTS valid√© fr_FR-siwis-medium.onnx disponible dans D:\\TTS_Voices\\piper\nBas√© sur la transmission du coordinateur du 10/06/2025 - TTS d√©j√† valid√©\n\nTest interactif complet: STT ‚Üí LLM ‚Üí TTS ‚Üí Audio avec validation humaine\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 106,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "test_pipeline_voice_validation_real",
            "path": "testing\\test_pipeline_voice_validation_real.py",
            "size_bytes": 20513,
            "lines_count": 526,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "_to_int16",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Conversion audio float vers int16 s√©curis√©e"
              },
              {
                "name": "_write_log",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "√âcriture log JSON"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "speak",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Synth√®se TTS avec handler r√©el ou fallback"
              },
              {
                "name": "_capture_tts_output",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Capture la sortie du TTSHandler r√©el"
              },
              {
                "name": "_fallback_sapi_tts",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "TTS fallback avec Windows SAPI"
              },
              {
                "name": "_simulate_tts",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "TTS simul√© en dernier recours"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MockSTTManager",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock STT Manager pour test pipeline"
              },
              {
                "name": "MockLLMClient",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock LLM Client pour test pipeline"
              },
              {
                "name": "RealTTSHandler",
                "methods_count": 5,
                "bases": [],
                "docstring": "TTS Handler r√©el utilisant le TTSHandler valid√© de la transmission"
              },
              {
                "name": "STTResult",
                "methods_count": 1,
                "bases": [],
                "docstring": null
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "argparse",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch",
              "tts_handler.TTSHandler",
              "tempfile",
              "wave",
              "subprocess",
              "win32com.client",
              "tempfile",
              "wave",
              "traceback"
            ],
            "docstring": "Test de validation pipeline voix-√†-voix SuperWhisper V6 - AVEC TTS R√âEL\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nUtilise le TTSHandler valid√© de la transmission du coordinateur (10/06/2025)\navec fallback intelligent si mod√®les non disponibles.\n\nTest interactif complet: STT ‚Üí LLM ‚Üí TTS ‚Üí Audio avec validation humaine\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 118,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "test_pipeline_voice_validation_working",
            "path": "testing\\test_pipeline_voice_validation_working.py",
            "size_bytes": 15487,
            "lines_count": 401,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "_to_int16",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Conversion audio float vers int16 s√©curis√©e"
              },
              {
                "name": "_write_log",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "√âcriture log JSON"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "speak",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Synth√®se TTS avec Windows SAPI"
              },
              {
                "name": "_simulate_tts",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "TTS simul√© pour test"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MockSTTManager",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock STT Manager pour test pipeline"
              },
              {
                "name": "MockLLMClient",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock LLM Client pour test pipeline"
              },
              {
                "name": "SAPITTSHandler",
                "methods_count": 3,
                "bases": [],
                "docstring": "TTS Handler utilisant Windows SAPI (ne n√©cessite pas de mod√®les externes)"
              },
              {
                "name": "STTResult",
                "methods_count": 1,
                "bases": [],
                "docstring": null
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "argparse",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch",
              "win32com.client",
              "tempfile",
              "wave",
              "traceback"
            ],
            "docstring": "Test de validation pipeline voix-√†-voix SuperWhisper V6 - VERSION FONCTIONNELLE\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nBas√© sur:\n- Transmission coordinateur 10/06/2025 (TTS valid√©)\n- Journal d√©veloppement Phase 3 TTS (performance exceptionnelle)\n- Architecture r√©elle du projet SuperWhisper V6\n\nTest interactif complet: STT ‚Üí LLM ‚Üí TTS ‚Üí Audio avec validation humaine\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 98,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "validate_gpu_config",
            "path": "validation\\validate_gpu_config.py",
            "size_bytes": 26191,
            "lines_count": 554,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fonction principale de validation renforc√©e"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "validate_project",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide tout le projet avec contr√¥les renforc√©s"
              },
              {
                "name": "_has_cuda_visible_devices_1",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "V√©rifie si le fichier configure CUDA_VISIBLE_DEVICES='1'"
              },
              {
                "name": "_validate_python_file",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide un fichier Python avec contr√¥les renforc√©s"
              },
              {
                "name": "_filter_safe_content",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Filtre le contenu pour exclure les commentaires historiques et docstrings"
              },
              {
                "name": "_validate_config_file",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide les fichiers de configuration YAML/JSON"
              },
              {
                "name": "_validate_powershell_file",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide un fichier PowerShell"
              },
              {
                "name": "_validate_special_files",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide les fichiers de configuration sp√©ciaux"
              },
              {
                "name": "_validate_critical_files",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide les fichiers critiques identifi√©s pendant l'audit"
              },
              {
                "name": "_generate_report",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re le rapport de validation renforc√©"
              },
              {
                "name": "print_report",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Affiche le rapport de validation renforc√©"
              }
            ],
            "classes": [
              {
                "name": "GPUConfigValidator",
                "methods_count": 11,
                "bases": [],
                "docstring": "Validateur de configuration GPU pour le projet [VERSION RENFORC√âE]"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "re",
              "json",
              "yaml",
              "pathlib.Path",
              "typing.List",
              "typing.Dict",
              "typing.Any",
              "torch"
            ],
            "docstring": "Validateur de Configuration GPU - Luxa SuperWhisper V6 [VERSION RENFORC√âE]\n==========================================================================\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nValide que tous les scripts du projet respectent les r√®gles GPU obligatoires.\nBas√© sur les le√ßons du triple contr√¥le de s√©curit√© GPU.\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 99,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "test_stt_validation_individual",
            "path": "testing\\stt\\test_stt_validation_individual.py",
            "size_bytes": 15825,
            "lines_count": 397,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test principal de validation STT"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "validate_rtx3090",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire RTX 3090"
              },
              {
                "name": "test_audio_devices",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Test des p√©riph√©riques audio"
              },
              {
                "name": "test_prism_stt_backend",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Test du PrismSTTBackend (valid√© Phase 4)"
              },
              {
                "name": "test_unified_stt_manager",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Test du UnifiedSTTManager (architecture compl√®te)"
              },
              {
                "name": "run_validation_tests",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cuter tous les tests de validation STT"
              }
            ],
            "classes": [
              {
                "name": "STTModelTester",
                "methods_count": 6,
                "bases": [],
                "docstring": "Testeur de mod√®les STT pour s√©lection production"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Dict",
              "typing.List",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch",
              "STT.unified_stt_manager.UnifiedSTTManager",
              "STT.backends.prism_stt_backend.PrismSTTBackend"
            ],
            "docstring": "Test de validation STT individuelle SuperWhisper V6\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nObjectif: S√©lectionner et valider le mod√®le STT √† retenir pour production\nBas√© sur Phase 4 STT valid√©e (journal d√©veloppement 12/06/2025)\n\nTest des mod√®les STT disponibles avec validation humaine\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 77,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "test_stt_validation_transmission",
            "path": "testing\\stt\\test_stt_validation_transmission.py",
            "size_bytes": 18103,
            "lines_count": 445,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "validate_gpu_configuration",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valider la configuration GPU RTX 3090"
              },
              {
                "name": "validate_audio_devices",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valider les p√©riph√©riques audio disponibles"
              },
              {
                "name": "performance_benchmark_transmission",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Benchmark performance selon objectifs transmission"
              },
              {
                "name": "human_validation_stt_selection",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation humaine pour s√©lection STT final"
              },
              {
                "name": "save_results",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Sauvegarder les r√©sultats de validation"
              },
              {
                "name": "print_summary",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Afficher le r√©sum√© de validation"
              }
            ],
            "classes": [
              {
                "name": "STTValidationTransmission",
                "methods_count": 7,
                "bases": [],
                "docstring": "Test de validation STT bas√© sur la transmission du coordinateur"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Dict",
              "typing.List",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch"
            ],
            "docstring": "Test de validation STT bas√© sur la transmission du coordinateur du 10 juin 2025\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nSp√©cifications STT de la transmission:\n- Moteur principal: insanely-fast-whisper\n- Fallback: faster-whisper  \n- VAD: Silero VAD avec fallback WebRTC\n- Objectif latence: < 500ms\n- Pr√©cision: > 95%\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 82,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "configurable",
              "documented",
              "functions_documented"
            ]
          },
          {
            "name": "test_tts_validation_transmission",
            "path": "testing\\stt\\test_tts_validation_transmission.py",
            "size_bytes": 7861,
            "lines_count": 211,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "test_tts_transmission_validation",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test de validation TTS selon la transmission du coordinateur du 10 juin 2025\nUtilise le mod√®le fr_FR-siwis-medium.onnx valid√©"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Point d'entr√©e principal"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "pathlib.Path",
              "yaml",
              "json",
              "TTS.tts_handler.TTSHandler",
              "torch",
              "traceback"
            ],
            "docstring": "Test de validation TTS bas√© sur la transmission du coordinateur du 10 juin 2025\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 38,
            "tool_type": "file",
            "utility_indicators": [
              "uses_pathlib",
              "uses_json",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ]
          }
        ],
        "categories": {
          "file": [
            "auto_fix_new_scripts",
            "convertir_fichiers_pcm_wav",
            "demo_improvements",
            "demo_security_sprint1",
            "download_tts_model",
            "explore_piper_api",
            "generateur_aide_externe",
            "generer_fichier_complet_optimise",
            "generer_tests_validation_complexes",
            "install_phase3_dependencies",
            "memory_leak_v4",
            "make_scripts_portable",
            "promote_test",
            "resume_tests_validation_complexes",
            "clean_sandbox",
            "solution_memory_leak_gpu_v3_stable",
            "run_assistant",
            "run_assistant_coqui",
            "run_assistant_simple",
            "run_complete_tests",
            "test_pipeline_voice_validation_final",
            "test_pipeline_voice_validation_real",
            "test_pipeline_voice_validation_working",
            "validate_gpu_config",
            "test_stt_validation_individual",
            "test_stt_validation_transmission",
            "test_tts_validation_transmission"
          ],
          "monitoring": [
            "monitor_phase3",
            "monitor_phase3_demo"
          ]
        },
        "dependencies": [
          "TTS.tts_manager",
          "tempfile",
          "collections",
          "sounddevice",
          "watchdog.observers",
          "STT.backends.prism_stt_backend",
          "config.security_config",
          "shutil",
          "wave",
          "STT.stt_manager_robust",
          "gc",
          "signal",
          "argparse",
          "TTS.tts_handler",
          "requests",
          "os",
          "utils.error_handler",
          "STT.stt_handler",
          "STT.unified_stt_manager",
          "platform",
          "datetime",
          "multiprocessing",
          "urllib.parse",
          "torch",
          "LUXA_TTS.tts_handler_coqui",
          "pip",
          "sys",
          "Orchestrator.master_handler_robust",
          "yaml",
          "threading",
          "importlib",
          "contextlib",
          "pkgutil",
          "functools",
          "re",
          "piper",
          "STT.vad_manager",
          "subprocess",
          "json",
          "errno",
          "time",
          "fcntl",
          "numpy",
          "uuid",
          "logging",
          "LLM.llm_manager_enhanced",
          "typing",
          "watchdog.events",
          "asyncio",
          "tts_handler",
          "TTS.utils_audio",
          "pathlib",
          "win32com.client",
          "traceback"
        ],
        "total_files": 29,
        "analyzable_files": 29
      }
    },
    "phase2": {
      "agent": "Agent 2 - √âvaluateur Utilit√©",
      "model": "GPT-4 Turbo",
      "execution_time": 0.0009992122650146484,
      "results": {
        "selected_tools": [
          {
            "name": "install_phase3_dependencies",
            "path": "installation\\install_phase3_dependencies.py",
            "size_bytes": 13691,
            "lines_count": 366,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Point d'entr√©e principal"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "run_installation",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution compl√®te de l'installation"
              },
              {
                "name": "_check_environment",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "V√©rification de l'environnement syst√®me"
              },
              {
                "name": "_install_piper_binding",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Installation du binding Python Piper"
              },
              {
                "name": "_install_piper_alternative",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Installation alternative de Piper (compilation depuis source)"
              },
              {
                "name": "_install_audio_dependencies",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Installation des d√©pendances audio"
              },
              {
                "name": "_install_performance_tools",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Installation des outils de performance"
              },
              {
                "name": "_validate_installation",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation de l'installation"
              },
              {
                "name": "_generate_report",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√©ration du rapport d'installation"
              },
              {
                "name": "_generate_error_report",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√©ration du rapport d'erreur"
              }
            ],
            "classes": [
              {
                "name": "Phase3DependencyInstaller",
                "methods_count": 10,
                "bases": [],
                "docstring": "Installateur des d√©pendances Phase 3\n\nüöÄ COMPOSANTS INSTALL√âS:\n1. Binding Python Piper (piper-tts)\n2. D√©pendances audio (wave, asyncio)\n3. Outils de performance (psutil, memory_profiler)\n4. Validation de l'environnement GPU"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "subprocess",
              "logging",
              "pathlib.Path",
              "pip",
              "torch",
              "piper",
              "TTS.utils_audio.is_valid_wav"
            ],
            "docstring": "Installation des D√©pendances Phase 3 - SuperWhisper V6 TTS\nInstallation automatique du binding Python Piper et autres optimisations\nüöÄ Pr√©requis pour les optimisations de performance\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 75,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 100,
              "architecture_compatibility": 96,
              "added_value": 95,
              "integration_ease": 80,
              "maintenance_burden": 80
            },
            "utility_score": 93.0,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH"
          },
          {
            "name": "monitor_phase3",
            "path": "monitoring\\monitor_phase3.py",
            "size_bytes": 18992,
            "lines_count": 464,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_estimate_backend_used",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Estimation du backend utilis√© bas√©e sur la latence"
              },
              {
                "name": "_print_live_metrics",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Affichage des m√©triques en temps r√©el"
              },
              {
                "name": "_generate_monitoring_report",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√©ration du rapport final de monitoring"
              },
              {
                "name": "_save_metrics_to_file",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Sauvegarde des m√©triques dans un fichier JSON"
              }
            ],
            "classes": [
              {
                "name": "Phase3Monitor",
                "methods_count": 5,
                "bases": [],
                "docstring": "Monitoring en temps r√©el des performances Phase 3\n\nüöÄ M√âTRIQUES SURVEILL√âES:\n1. Latence de synth√®se (ms)\n2. D√©bit de traitement (chars/ms)\n3. Taux de cache hit (%)\n4. Utilisation m√©moire (MB)\n5. Backends utilis√©s\n6. Erreurs et fallbacks"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "logging",
              "time",
              "json",
              "pathlib.Path",
              "datetime.datetime",
              "datetime.timedelta",
              "collections.deque",
              "threading",
              "TTS.tts_manager.UnifiedTTSManager",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info",
              "yaml"
            ],
            "docstring": "Monitoring Phase 3 - SuperWhisper V6 TTS\nSurveillance en temps r√©el des m√©triques de performance\nüöÄ Dashboard des optimisations Phase 3\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 79,
            "tool_type": "monitoring",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "uses_yaml",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 100,
              "architecture_compatibility": 100,
              "added_value": 88,
              "integration_ease": 80,
              "maintenance_burden": 70
            },
            "utility_score": 91.6,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH"
          }
        ],
        "rejected_tools": [
          {
            "name": "monitor_phase3_demo",
            "path": "monitoring\\monitor_phase3_demo.py",
            "size_bytes": 9294,
            "lines_count": 245,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "logging",
              "time",
              "json",
              "pathlib.Path",
              "datetime.datetime",
              "collections.deque",
              "TTS.tts_manager.UnifiedTTSManager",
              "yaml"
            ],
            "docstring": "Monitoring Phase 3 DEMO - SuperWhisper V6 TTS\nD√©monstration courte (1 minute) du monitoring en temps r√©el\nüöÄ Validation rapide des optimisations Phase 3\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 38,
            "tool_type": "monitoring",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "uses_yaml",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 100,
              "architecture_compatibility": 94,
              "added_value": 70,
              "integration_ease": 90,
              "maintenance_burden": 95
            },
            "utility_score": 90.5,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "demo_improvements",
            "path": "demo\\demo_improvements.py",
            "size_bytes": 19863,
            "lines_count": 481,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "format",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "demo_api_key_management",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©montre la gestion s√©curis√©e des cl√©s API"
              },
              {
                "name": "demo_input_validation",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©montre la validation s√©curis√©e des entr√©es"
              },
              {
                "name": "_create_wav_audio",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Cr√©e un fichier WAV valide pour tests"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_generate_speech_signal",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re un signal similaire √† la parole"
              }
            ],
            "classes": [
              {
                "name": "ColoredFormatter",
                "methods_count": 1,
                "bases": [
                  "logging.Formatter"
                ],
                "docstring": "Formatter avec couleurs pour d√©monstration"
              },
              {
                "name": "LuxaSecurityDemo",
                "methods_count": 4,
                "bases": [],
                "docstring": "D√©monstration des am√©liorations de s√©curit√©"
              },
              {
                "name": "LuxaRobustnessDemo",
                "methods_count": 1,
                "bases": [],
                "docstring": "D√©monstration des am√©liorations de robustesse"
              },
              {
                "name": "LuxaPerformanceDemo",
                "methods_count": 1,
                "bases": [],
                "docstring": "D√©monstration des am√©liorations de performance"
              },
              {
                "name": "LuxaIntegrationDemo",
                "methods_count": 0,
                "bases": [],
                "docstring": "D√©monstration d'int√©gration compl√®te"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "numpy",
              "time",
              "json",
              "logging",
              "pathlib.Path",
              "sys",
              "config.security_config.SecurityConfig",
              "utils.error_handler.RobustErrorHandler",
              "Orchestrator.master_handler_robust.RobustMasterHandler",
              "shutil",
              "traceback"
            ],
            "docstring": "Script de Validation Compl√®te - Luxa SuperWhisper V6\n===================================================\n\nD√©monstrateur des am√©liorations de s√©curit√©, robustesse et performance.\nCe script illustre toutes les corrections apport√©es suite au peer review.\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 104,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 100,
              "architecture_compatibility": 100,
              "added_value": 88,
              "integration_ease": 80,
              "maintenance_burden": 55
            },
            "utility_score": 90.1,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "run_complete_tests",
            "path": "testing\\run_complete_tests.py",
            "size_bytes": 16151,
            "lines_count": 409,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Point d'entr√©e principal"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "log",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Logging avec timestamp"
              },
              {
                "name": "run_command",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution d'une commande avec capture des r√©sultats"
              },
              {
                "name": "run_pytest_tests",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution des tests pytest"
              },
              {
                "name": "run_demo_batch",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution de la d√©monstration batch"
              },
              {
                "name": "run_performance_tests",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution des tests de performance existants"
              },
              {
                "name": "check_system_requirements",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "V√©rification des pr√©requis syst√®me"
              },
              {
                "name": "generate_report",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√©ration du rapport final"
              },
              {
                "name": "run_all_tests",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cution de tous les tests"
              }
            ],
            "classes": [
              {
                "name": "TTSTestSuite",
                "methods_count": 9,
                "bases": [],
                "docstring": "Suite compl√®te de tests TTS avec orchestration et rapports"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "subprocess",
              "time",
              "json",
              "pathlib.Path",
              "datetime.datetime",
              "torch",
              "traceback"
            ],
            "docstring": "Script d'Ex√©cution Compl√®te des Tests TTS - SuperWhisper V6\nOrchestration de tous les tests : pytest, d√©monstration, monitoring\nüß™ Suite compl√®te de validation Phase 3\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 77,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 93,
              "architecture_compatibility": 88,
              "added_value": 95,
              "integration_ease": 80,
              "maintenance_burden": 80
            },
            "utility_score": 88.9,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "demo_security_sprint1",
            "path": "demo\\demo_security_sprint1.py",
            "size_bytes": 15399,
            "lines_count": 371,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "print_section",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Affichage section format√©e"
              },
              {
                "name": "print_test",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Affichage r√©sultat test"
              },
              {
                "name": "test_api_endpoints",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Test des endpoints API s√©curis√©s"
              },
              {
                "name": "test_security_performance",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test de performance s√©curit√©"
              },
              {
                "name": "generate_security_report",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re un rapport de s√©curit√©"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "requests",
              "time",
              "json",
              "pathlib.Path",
              "config.security_config.get_security_config",
              "config.security_config.SecurityException"
            ],
            "docstring": "D√©monstration S√©curit√© LUXA SuperWhisper V6 - Sprint 1\nScript de test complet des fonctionnalit√©s s√©curis√©es\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 59,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "uses_requests",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 93,
              "architecture_compatibility": 86,
              "added_value": 88,
              "integration_ease": 80,
              "maintenance_burden": 80
            },
            "utility_score": 87.0,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "run_assistant",
            "path": "testing\\run_assistant.py",
            "size_bytes": 12012,
            "lines_count": 326,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "parse_arguments",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Parse les arguments en ligne de commande"
              },
              {
                "name": "print_banner",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Affiche la banni√®re Luxa v1.1"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "argparse",
              "asyncio",
              "os",
              "sys",
              "time",
              "logging",
              "pathlib.Path",
              "yaml",
              "STT.stt_manager_robust.RobustSTTManager",
              "STT.vad_manager.OptimizedVADManager",
              "LLM.llm_manager_enhanced.EnhancedLLMManager",
              "TTS.tts_handler.TTSHandler",
              "Orchestrator.master_handler_robust.RobustMasterHandler",
              "numpy"
            ],
            "docstring": "Luxa - SuperWhisper_V6 Assistant v1.1\n======================================\n\nAssistant vocal intelligent avec pipeline STT ‚Üí LLM ‚Üí TTS\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 55,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "cli_interface",
              "has_logging",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 86,
              "architecture_compatibility": 94,
              "added_value": 92,
              "integration_ease": 80,
              "maintenance_burden": 70
            },
            "utility_score": 86.7,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "generer_fichier_complet_optimise",
            "path": "generation\\generer_fichier_complet_optimise.py",
            "size_bytes": 6616,
            "lines_count": 162,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "yaml",
              "time",
              "pathlib.Path",
              "TTS.tts_manager.UnifiedTTSManager",
              "TTS.tts_manager.TTSBackendType",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info"
            ],
            "docstring": "G√©n√©ration fichier complet optimis√© - SuperWhisper V6 TTS\nContourne la limitation de 1000 caract√®res en utilisant SAPI directement\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 29,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 93,
              "architecture_compatibility": 86,
              "added_value": 70,
              "integration_ease": 90,
              "maintenance_burden": 95
            },
            "utility_score": 86.4,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "auto_fix_new_scripts",
            "path": "automation\\auto_fix_new_scripts.py",
            "size_bytes": 10155,
            "lines_count": 269,
            "functions": [
              {
                "name": "watch_directory",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Surveillance continue des nouveaux fichiers Python"
              },
              {
                "name": "install_git_hook",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Installer Git hook pour auto-fix des nouveaux scripts"
              },
              {
                "name": "fix_recent_scripts",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Fixer les scripts cr√©√©s/modifi√©s r√©cemment"
              },
              {
                "name": "fix_staged_files",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fixer les fichiers Python stag√©s pour commit"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "on_created",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Nouveau fichier cr√©√©"
              },
              {
                "name": "on_modified",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Fichier modifi√©"
              },
              {
                "name": "_process_file",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Traiter un fichier Python"
              }
            ],
            "classes": [
              {
                "name": "PythonFileHandler",
                "methods_count": 4,
                "bases": [
                  "FileSystemEventHandler"
                ],
                "docstring": "Handler pour surveiller cr√©ation/modification fichiers Python"
              }
            ],
            "imports": [
              "os",
              "sys",
              "time",
              "pathlib",
              "subprocess",
              "argparse",
              "json",
              "datetime.datetime",
              "datetime.timedelta",
              "typing.Set",
              "typing.List",
              "watchdog.observers.Observer",
              "watchdog.events.FileSystemEventHandler"
            ],
            "docstring": "üîÑ Auto-Fix Nouveaux Scripts - SuperWhisper V6\n\nSurveille et rend automatiquement portables les nouveaux scripts Python\ncr√©√©s dans le projet, avec int√©gration Git hooks et surveillance continue.\n\nUsage:\n    python tools/auto_fix_new_scripts.py --watch          # Surveillance continue\n    python tools/auto_fix_new_scripts.py --git-hook       # Installation Git hook\n    python tools/auto_fix_new_scripts.py --fix-recent     # Fix scripts r√©cents (24h)\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 62,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 88,
              "added_value": 100,
              "integration_ease": 90,
              "maintenance_burden": 70
            },
            "utility_score": 85.9,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "generateur_aide_externe",
            "path": "generation\\generateur_aide_externe.py",
            "size_bytes": 13406,
            "lines_count": 361,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Interface CLI pour le g√©n√©rateur d'aide externe"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "creer_aide_externe",
                "args_count": 6,
                "is_async": false,
                "decorators": [],
                "docstring": "Cr√©e une demande d'aide externe compl√®te"
              },
              {
                "name": "_collecter_code_essentiel",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Collecte le code essentiel des fichiers sp√©cifi√©s"
              },
              {
                "name": "_extraire_code_pertinent",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Extrait le code pertinent selon le type de fichier"
              },
              {
                "name": "_extraire_python_essentiel",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Extrait classes/fonctions principales d'un fichier Python"
              },
              {
                "name": "_generer_document_principal",
                "args_count": 5,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re le document principal .md avec code agr√©g√©"
              },
              {
                "name": "_generer_titre_section",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re un titre de section appropri√© pour le fichier"
              },
              {
                "name": "_generer_recap",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re le document r√©capitulatif"
              }
            ],
            "classes": [
              {
                "name": "GenerateurAideExterne",
                "methods_count": 8,
                "bases": [],
                "docstring": "G√©n√©rateur automatis√© de demandes d'aide externe"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "pathlib.Path",
              "datetime.datetime",
              "typing.List",
              "typing.Dict",
              "typing.Any",
              "json",
              "argparse"
            ],
            "docstring": "G√©n√©rateur d'aide externe SuperWhisper V6\nOutil pour cr√©er des demandes d'aide avec code essentiel agr√©g√© en .md\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 71,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 88,
              "added_value": 100,
              "integration_ease": 80,
              "maintenance_burden": 80
            },
            "utility_score": 85.4,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "test_pipeline_voice_validation_working",
            "path": "testing\\test_pipeline_voice_validation_working.py",
            "size_bytes": 15487,
            "lines_count": 401,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "_to_int16",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Conversion audio float vers int16 s√©curis√©e"
              },
              {
                "name": "_write_log",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "√âcriture log JSON"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "speak",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Synth√®se TTS avec Windows SAPI"
              },
              {
                "name": "_simulate_tts",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "TTS simul√© pour test"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MockSTTManager",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock STT Manager pour test pipeline"
              },
              {
                "name": "MockLLMClient",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock LLM Client pour test pipeline"
              },
              {
                "name": "SAPITTSHandler",
                "methods_count": 3,
                "bases": [],
                "docstring": "TTS Handler utilisant Windows SAPI (ne n√©cessite pas de mod√®les externes)"
              },
              {
                "name": "STTResult",
                "methods_count": 1,
                "bases": [],
                "docstring": null
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "argparse",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch",
              "win32com.client",
              "tempfile",
              "wave",
              "traceback"
            ],
            "docstring": "Test de validation pipeline voix-√†-voix SuperWhisper V6 - VERSION FONCTIONNELLE\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nBas√© sur:\n- Transmission coordinateur 10/06/2025 (TTS valid√©)\n- Journal d√©veloppement Phase 3 TTS (performance exceptionnelle)\n- Architecture r√©elle du projet SuperWhisper V6\n\nTest interactif complet: STT ‚Üí LLM ‚Üí TTS ‚Üí Audio avec validation humaine\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 98,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 93,
              "architecture_compatibility": 71,
              "added_value": 100,
              "integration_ease": 80,
              "maintenance_burden": 70
            },
            "utility_score": 84.65,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "explore_piper_api",
            "path": "exploration\\explore_piper_api.py",
            "size_bytes": 5627,
            "lines_count": 156,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "explore_piper",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "test_piper_cli",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test de l'utilisation de Piper en ligne de commande"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "importlib",
              "pkgutil",
              "subprocess",
              "os",
              "piper",
              "os",
              "traceback"
            ],
            "docstring": "Exploration de l'API Piper pour d√©couvrir la bonne utilisation\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 31,
            "tool_type": "file",
            "utility_indicators": [
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 93,
              "architecture_compatibility": 78,
              "added_value": 70,
              "integration_ease": 90,
              "maintenance_burden": 95
            },
            "utility_score": 84.4,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "validate_gpu_config",
            "path": "validation\\validate_gpu_config.py",
            "size_bytes": 26191,
            "lines_count": 554,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fonction principale de validation renforc√©e"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "validate_project",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide tout le projet avec contr√¥les renforc√©s"
              },
              {
                "name": "_has_cuda_visible_devices_1",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "V√©rifie si le fichier configure CUDA_VISIBLE_DEVICES='1'"
              },
              {
                "name": "_validate_python_file",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide un fichier Python avec contr√¥les renforc√©s"
              },
              {
                "name": "_filter_safe_content",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Filtre le contenu pour exclure les commentaires historiques et docstrings"
              },
              {
                "name": "_validate_config_file",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide les fichiers de configuration YAML/JSON"
              },
              {
                "name": "_validate_powershell_file",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide un fichier PowerShell"
              },
              {
                "name": "_validate_special_files",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide les fichiers de configuration sp√©ciaux"
              },
              {
                "name": "_validate_critical_files",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide les fichiers critiques identifi√©s pendant l'audit"
              },
              {
                "name": "_generate_report",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re le rapport de validation renforc√©"
              },
              {
                "name": "print_report",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Affiche le rapport de validation renforc√©"
              }
            ],
            "classes": [
              {
                "name": "GPUConfigValidator",
                "methods_count": 11,
                "bases": [],
                "docstring": "Validateur de configuration GPU pour le projet [VERSION RENFORC√âE]"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "re",
              "json",
              "yaml",
              "pathlib.Path",
              "typing.List",
              "typing.Dict",
              "typing.Any",
              "torch"
            ],
            "docstring": "Validateur de Configuration GPU - Luxa SuperWhisper V6 [VERSION RENFORC√âE]\n==========================================================================\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nValide que tous les scripts du projet respectent les r√®gles GPU obligatoires.\nBas√© sur les le√ßons du triple contr√¥le de s√©curit√© GPU.\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 99,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 88,
              "added_value": 95,
              "integration_ease": 80,
              "maintenance_burden": 80
            },
            "utility_score": 84.4,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "make_scripts_portable",
            "path": "portability\\make_scripts_portable.py",
            "size_bytes": 17866,
            "lines_count": 509,
            "functions": [
              {
                "name": "find_python_scripts",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Trouve tous les scripts Python dans le projet"
              },
              {
                "name": "is_script_file",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©termine si un fichier Python est un script ex√©cutable"
              },
              {
                "name": "analyze_script_dependencies",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Analyse les d√©pendances d'un script"
              },
              {
                "name": "has_portable_header",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "V√©rifie si le script a d√©j√† le header portable"
              },
              {
                "name": "make_script_portable",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Rend un script portable en ajoutant le header appropri√©"
              },
              {
                "name": "extract_docstring",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Extrait la docstring existante d'un script"
              },
              {
                "name": "find_code_start",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Trouve o√π commence le vrai code (apr√®s shebang, docstring, imports de base)"
              },
              {
                "name": "create_launcher_script",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Cr√©e un script launcher dans un r√©pertoire sp√©cifique"
              },
              {
                "name": "scan_and_fix_all_scripts",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Scanne et corrige tous les scripts du projet"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fonction principale"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "shutil",
              "argparse",
              "re",
              "typing.List",
              "typing.Dict",
              "typing.Set"
            ],
            "docstring": "üöÄ Utilitaire de Portabilit√© Scripts - SuperWhisper V6\n\nRend tous les scripts Python ex√©cutables depuis n'importe quel r√©pertoire\nen r√©solvant automatiquement les chemins et imports.\n\nUsage:\n    python tools/make_scripts_portable.py --scan-all\n    python tools/make_scripts_portable.py --fix-script path/to/script.py\n    python tools/make_scripts_portable.py --create-launcher script.py\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 79,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "uses_pathlib",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 78,
              "added_value": 100,
              "integration_ease": 88,
              "maintenance_burden": 80
            },
            "utility_score": 84.1,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "promote_test",
            "path": "promotion\\promote_test.py",
            "size_bytes": 11794,
            "lines_count": 323,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_source_file",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide que le fichier source existe et est un test Python"
              },
              {
                "name": "validate_target_dir",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valide que le r√©pertoire cible est autoris√©"
              },
              {
                "name": "generate_target_filename",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "G√©n√®re le nom de fichier cible avec conventions"
              },
              {
                "name": "update_test_header",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Met √† jour l'en-t√™te du test pour refl√©ter sa promotion"
              },
              {
                "name": "promote_test",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Promeut un test depuis r√©pertoire temporaire vers r√©pertoire stable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fonction principale"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "shutil",
              "pathlib",
              "argparse",
              "datetime.datetime"
            ],
            "docstring": "üöÄ Script de Promotion de Tests - SuperWhisper V6\n\nUtilitaire pour promouvoir des tests depuis r√©pertoires temporaires\nvers r√©pertoires stables (unit/ ou integration/).\n\nUsage:\n    python tools/promote_test.py .cursor-tmp/scratch_test.py tests/unit/\n    python tools/promote_test.py tests/sandbox/experiment.py tests/integration/\n    python tools/promote_test.py .cursor-tmp/temp_stt.py tests/unit/ --rename=test_stt_optimized.py\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 53,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "uses_pathlib",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 78,
              "added_value": 100,
              "integration_ease": 88,
              "maintenance_burden": 80
            },
            "utility_score": 84.1,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "test_stt_validation_individual",
            "path": "testing\\stt\\test_stt_validation_individual.py",
            "size_bytes": 15825,
            "lines_count": 397,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test principal de validation STT"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "validate_rtx3090",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire RTX 3090"
              },
              {
                "name": "test_audio_devices",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Test des p√©riph√©riques audio"
              },
              {
                "name": "test_prism_stt_backend",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Test du PrismSTTBackend (valid√© Phase 4)"
              },
              {
                "name": "test_unified_stt_manager",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Test du UnifiedSTTManager (architecture compl√®te)"
              },
              {
                "name": "run_validation_tests",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cuter tous les tests de validation STT"
              }
            ],
            "classes": [
              {
                "name": "STTModelTester",
                "methods_count": 6,
                "bases": [],
                "docstring": "Testeur de mod√®les STT pour s√©lection production"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Dict",
              "typing.List",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch",
              "STT.unified_stt_manager.UnifiedSTTManager",
              "STT.backends.prism_stt_backend.PrismSTTBackend"
            ],
            "docstring": "Test de validation STT individuelle SuperWhisper V6\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nObjectif: S√©lectionner et valider le mod√®le STT √† retenir pour production\nBas√© sur Phase 4 STT valid√©e (journal d√©veloppement 12/06/2025)\n\nTest des mod√®les STT disponibles avec validation humaine\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 77,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 96,
              "added_value": 88,
              "integration_ease": 80,
              "maintenance_burden": 70
            },
            "utility_score": 84.0,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "test_stt_validation_transmission",
            "path": "testing\\stt\\test_stt_validation_transmission.py",
            "size_bytes": 18103,
            "lines_count": 445,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "validate_gpu_configuration",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valider la configuration GPU RTX 3090"
              },
              {
                "name": "validate_audio_devices",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Valider les p√©riph√©riques audio disponibles"
              },
              {
                "name": "performance_benchmark_transmission",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Benchmark performance selon objectifs transmission"
              },
              {
                "name": "human_validation_stt_selection",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation humaine pour s√©lection STT final"
              },
              {
                "name": "save_results",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Sauvegarder les r√©sultats de validation"
              },
              {
                "name": "print_summary",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Afficher le r√©sum√© de validation"
              }
            ],
            "classes": [
              {
                "name": "STTValidationTransmission",
                "methods_count": 7,
                "bases": [],
                "docstring": "Test de validation STT bas√© sur la transmission du coordinateur"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Dict",
              "typing.List",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch"
            ],
            "docstring": "Test de validation STT bas√© sur la transmission du coordinateur du 10 juin 2025\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nSp√©cifications STT de la transmission:\n- Moteur principal: insanely-fast-whisper\n- Fallback: faster-whisper  \n- VAD: Silero VAD avec fallback WebRTC\n- Objectif latence: < 500ms\n- Pr√©cision: > 95%\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 82,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 96,
              "added_value": 88,
              "integration_ease": 80,
              "maintenance_burden": 70
            },
            "utility_score": 84.0,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "clean_sandbox",
            "path": "sandbox\\clean_sandbox.py",
            "size_bytes": 10360,
            "lines_count": 270,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "get_file_age_days",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Calcule l'√¢ge d'un fichier en jours"
              },
              {
                "name": "find_old_files",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Trouve tous les fichiers anciens dans un r√©pertoire sandbox"
              },
              {
                "name": "clean_pycache",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Supprime les r√©pertoires __pycache__ dans sandbox"
              },
              {
                "name": "clean_sandbox_directory",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Nettoie un r√©pertoire sandbox sp√©cifique"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Fonction principale"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "pathlib",
              "shutil",
              "argparse",
              "datetime.datetime",
              "datetime.timedelta",
              "typing.List",
              "typing.Tuple"
            ],
            "docstring": "üßπ Script de Purge Automatique - Tests Sandbox SuperWhisper V6\n\nSupprime automatiquement les tests exploratoires vieux de plus de 7 jours\ndans les r√©pertoires sandbox pour maintenir la propret√© du d√©p√¥t.\n\nUsage:\n    python tools/clean_sandbox.py              # Purge automatique\n    python tools/clean_sandbox.py --dry-run    # Simulation sans suppression\n    python tools/clean_sandbox.py --days=14    # Seuil personnalis√© (14 jours)\n    python tools/clean_sandbox.py --force      # Purge tout sans confirmation\n\nR√©pertoires surveill√©s:\n    - tests/sandbox/\n    - PIPELINE/tests/sandbox/\n    - .cursor-tmp/\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 50,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "uses_pathlib",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 78,
              "added_value": 90,
              "integration_ease": 90,
              "maintenance_burden": 95
            },
            "utility_score": 83.9,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "test_pipeline_voice_validation_final",
            "path": "testing\\test_pipeline_voice_validation_final.py",
            "size_bytes": 18504,
            "lines_count": 473,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "_to_int16",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Conversion audio float vers int16 s√©curis√©e"
              },
              {
                "name": "_write_log",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "√âcriture log JSON"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "speak",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Synth√®se TTS avec le mod√®le valid√© fr_FR-siwis-medium.onnx"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MockSTTManager",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock STT Manager pour test pipeline"
              },
              {
                "name": "MockLLMClient",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock LLM Client pour test pipeline"
              },
              {
                "name": "ValidatedTTSHandler",
                "methods_count": 2,
                "bases": [],
                "docstring": "TTS Handler utilisant le mod√®le valid√© fr_FR-siwis-medium.onnx"
              },
              {
                "name": "STTResult",
                "methods_count": 1,
                "bases": [],
                "docstring": null
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "argparse",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch",
              "tempfile",
              "wave",
              "subprocess",
              "uuid",
              "traceback",
              "traceback",
              "time"
            ],
            "docstring": "Test de validation pipeline voix-√†-voix SuperWhisper V6 - AVEC TTS R√âEL VALID√â\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nUtilise le mod√®le TTS valid√© fr_FR-siwis-medium.onnx disponible dans D:\\TTS_Voices\\piper\nBas√© sur la transmission du coordinateur du 10/06/2025 - TTS d√©j√† valid√©\n\nTest interactif complet: STT ‚Üí LLM ‚Üí TTS ‚Üí Audio avec validation humaine\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 106,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 96,
              "added_value": 100,
              "integration_ease": 70,
              "maintenance_burden": 45
            },
            "utility_score": 82.4,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "download_tts_model",
            "path": "download\\download_tts_model.py",
            "size_bytes": 6770,
            "lines_count": 178,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "download_file",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "T√©l√©charge un fichier avec barre de progression"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "T√©l√©charge le mod√®le TTS fr_FR-siwis-medium.onnx"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "requests",
              "pathlib.Path",
              "urllib.parse.urlparse",
              "shutil",
              "shutil",
              "traceback"
            ],
            "docstring": "Script de t√©l√©chargement du mod√®le TTS fr_FR-siwis-medium.onnx\nBas√© sur la transmission du coordinateur du 10 juin 2025\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 32,
            "tool_type": "file",
            "utility_indicators": [
              "uses_requests",
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 78,
              "added_value": 70,
              "integration_ease": 98,
              "maintenance_burden": 95
            },
            "utility_score": 81.1,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "resume_tests_validation_complexes",
            "path": "resume\\resume_tests_validation_complexes.py",
            "size_bytes": 7970,
            "lines_count": 202,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "analyser_fichiers_validation",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Analyse tous les fichiers de validation complexe g√©n√©r√©s"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "pathlib.Path",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info"
            ],
            "docstring": "R√©sum√© final des tests validation complexes - SuperWhisper V6 TTS\nAnalyse et pr√©sente tous les fichiers g√©n√©r√©s avec leurs caract√©ristiques\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 30,
            "tool_type": "file",
            "utility_indicators": [
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 78,
              "added_value": 70,
              "integration_ease": 98,
              "maintenance_burden": 95
            },
            "utility_score": 81.1,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "test_tts_validation_transmission",
            "path": "testing\\stt\\test_tts_validation_transmission.py",
            "size_bytes": 7861,
            "lines_count": 211,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "test_tts_transmission_validation",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test de validation TTS selon la transmission du coordinateur du 10 juin 2025\nUtilise le mod√®le fr_FR-siwis-medium.onnx valid√©"
              },
              {
                "name": "main",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Point d'entr√©e principal"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "pathlib.Path",
              "yaml",
              "json",
              "TTS.tts_handler.TTSHandler",
              "torch",
              "traceback"
            ],
            "docstring": "Test de validation TTS bas√© sur la transmission du coordinateur du 10 juin 2025\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 38,
            "tool_type": "file",
            "utility_indicators": [
              "uses_pathlib",
              "uses_json",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 78,
              "added_value": 70,
              "integration_ease": 98,
              "maintenance_burden": 95
            },
            "utility_score": 81.1,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "generer_tests_validation_complexes",
            "path": "generation\\generer_tests_validation_complexes.py",
            "size_bytes": 13005,
            "lines_count": 328,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "asyncio",
              "yaml",
              "time",
              "pathlib.Path",
              "TTS.tts_manager.UnifiedTTSManager",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info",
              "TTS.tts_manager.TTSBackendType"
            ],
            "docstring": "G√©n√©ration tests validation complexes - SuperWhisper V6 TTS\nG√©n√®re des fichiers audio avec textes de validation de complexit√© croissante\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 45,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 86,
              "added_value": 70,
              "integration_ease": 80,
              "maintenance_burden": 95
            },
            "utility_score": 80.4,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "HIGH",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "run_assistant_coqui",
            "path": "testing\\run_assistant_coqui.py",
            "size_bytes": 4822,
            "lines_count": 130,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "yaml",
              "os",
              "sys",
              "asyncio",
              "STT.stt_handler.STTHandler",
              "LLM.llm_manager_enhanced.EnhancedLLMManager",
              "LUXA_TTS.tts_handler_coqui.TTSHandlerCoqui"
            ],
            "docstring": "Script Portable - run_assistant_coqui.py\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 25,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 86,
              "added_value": 60,
              "integration_ease": 90,
              "maintenance_burden": 95
            },
            "utility_score": 79.9,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "MEDIUM",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "run_assistant_simple",
            "path": "testing\\run_assistant_simple.py",
            "size_bytes": 4695,
            "lines_count": 130,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "yaml",
              "os",
              "sys",
              "asyncio",
              "STT.stt_handler.STTHandler",
              "LLM.llm_manager_enhanced.EnhancedLLMManager",
              "TTS.tts_handler.TTSHandler"
            ],
            "docstring": "Script Portable - run_assistant_simple.py\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 25,
            "tool_type": "file",
            "utility_indicators": [
              "uses_asyncio",
              "uses_pathlib",
              "uses_yaml",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 86,
              "added_value": 60,
              "integration_ease": 90,
              "maintenance_burden": 95
            },
            "utility_score": 79.9,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "MEDIUM",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "convertir_fichiers_pcm_wav",
            "path": "conversion\\convertir_fichiers_pcm_wav.py",
            "size_bytes": 12666,
            "lines_count": 339,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "convertir_fichiers_pcm_wav",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Convertit tous les fichiers PCM invalides en WAV valides"
              },
              {
                "name": "tester_fichiers_convertis",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Test rapide des fichiers convertis"
              },
              {
                "name": "convertir_fichier_principal",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Conversion prioritaire du fichier principal validation_utilisateur_complet.wav"
              }
            ],
            "classes": [],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "pathlib.Path",
              "shutil",
              "TTS.utils_audio.pcm_to_wav",
              "TTS.utils_audio.is_valid_wav",
              "TTS.utils_audio.get_wav_info"
            ],
            "docstring": "Conversion fichiers PCM ‚Üí WAV - SuperWhisper V6 TTS\nConvertit tous les fichiers audio invalides en format WAV standard\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 49,
            "tool_type": "file",
            "utility_indicators": [
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 78,
              "added_value": 70,
              "integration_ease": 88,
              "maintenance_burden": 95
            },
            "utility_score": 79.6,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "MEDIUM",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "solution_memory_leak_gpu_v3_stable",
            "path": "solutions\\solution_memory_leak_gpu_v3_stable.py",
            "size_bytes": 11323,
            "lines_count": 302,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "gpu_test_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©corateur simplifi√© pour cleanup automatique"
              },
              {
                "name": "validate_no_memory_leak",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation memory leak avec seuil harmonis√©"
              },
              {
                "name": "emergency_gpu_reset",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Reset GPU d'urgence simplifi√©"
              },
              {
                "name": "test_simple_model",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "gpu_test_cleanup('test_model_simple')"
                ],
                "docstring": "Test mod√®le simplifi√©"
              },
              {
                "name": "run_simple_tests",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Tests simplifi√©s sans blocage"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_validate_gpu",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation critique RTX 3090"
              },
              {
                "name": "_initialize_baseline",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Initialiser baseline m√©moire APR√àS cleanup initial"
              },
              {
                "name": "get_memory_stats",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Statistiques m√©moire GPU d√©taill√©es"
              },
              {
                "name": "_force_cleanup_internal",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Cleanup interne simplifi√© (pas de signal sur Windows)"
              },
              {
                "name": "force_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Cleanup forc√© public"
              },
              {
                "name": "gpu_context",
                "args_count": 2,
                "is_async": false,
                "decorators": [
                  "contextlib.contextmanager"
                ],
                "docstring": "Context manager simplifi√© avec cleanup automatique"
              },
              {
                "name": "decorator",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "wrapper",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "functools.wraps(func)"
                ],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "GPUMemoryManager",
                "methods_count": 7,
                "bases": [],
                "docstring": "Gestionnaire simplifi√© des fuites m√©moire GPU RTX 3090 [V3 STABLE]"
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "torch",
              "gc",
              "threading",
              "contextlib",
              "functools",
              "typing.Optional",
              "typing.Dict",
              "typing.Any",
              "time",
              "traceback"
            ],
            "docstring": "SOLUTION MEMORY LEAK GPU V3 - SuperWhisper V6 [STABLE WINDOWS]\nüö® CONFIGURATION: RTX 3090 CUDA:1 - Version simplifi√©e sans blocages\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 84,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 58,
              "architecture_compatibility": 88,
              "added_value": 95,
              "integration_ease": 80,
              "maintenance_burden": 70
            },
            "utility_score": 77.4,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "MEDIUM",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "test_pipeline_voice_validation_real",
            "path": "testing\\test_pipeline_voice_validation_real.py",
            "size_bytes": 20513,
            "lines_count": 526,
            "functions": [
              {
                "name": "_setup_portable_environment",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure l'environnement pour ex√©cution portable"
              },
              {
                "name": "validate_rtx3090_configuration",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation obligatoire de la configuration RTX 3090"
              },
              {
                "name": "_to_int16",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Conversion audio float vers int16 s√©curis√©e"
              },
              {
                "name": "_write_log",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "√âcriture log JSON"
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "speak",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Synth√®se TTS avec handler r√©el ou fallback"
              },
              {
                "name": "_capture_tts_output",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Capture la sortie du TTSHandler r√©el"
              },
              {
                "name": "_fallback_sapi_tts",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "TTS fallback avec Windows SAPI"
              },
              {
                "name": "_simulate_tts",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "TTS simul√© en dernier recours"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MockSTTManager",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock STT Manager pour test pipeline"
              },
              {
                "name": "MockLLMClient",
                "methods_count": 1,
                "bases": [],
                "docstring": "Mock LLM Client pour test pipeline"
              },
              {
                "name": "RealTTSHandler",
                "methods_count": 5,
                "bases": [],
                "docstring": "TTS Handler r√©el utilisant le TTSHandler valid√© de la transmission"
              },
              {
                "name": "STTResult",
                "methods_count": 1,
                "bases": [],
                "docstring": null
              }
            ],
            "imports": [
              "os",
              "sys",
              "pathlib",
              "time",
              "json",
              "asyncio",
              "argparse",
              "datetime.datetime",
              "pathlib.Path",
              "typing.Tuple",
              "typing.Optional",
              "numpy",
              "sounddevice",
              "torch",
              "tts_handler.TTSHandler",
              "tempfile",
              "wave",
              "subprocess",
              "win32com.client",
              "tempfile",
              "wave",
              "traceback"
            ],
            "docstring": "Test de validation pipeline voix-√†-voix SuperWhisper V6 - AVEC TTS R√âEL\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nUtilise le TTSHandler valid√© de la transmission du coordinateur (10/06/2025)\navec fallback intelligent si mod√®les non disponibles.\n\nTest interactif complet: STT ‚Üí LLM ‚Üí TTS ‚Üí Audio avec validation humaine\n\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE",
            "complexity_score": 118,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_asyncio",
              "uses_pathlib",
              "uses_json",
              "cli_interface",
              "configurable",
              "documented",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 71,
              "added_value": 100,
              "integration_ease": 70,
              "maintenance_burden": 45
            },
            "utility_score": 76.15,
            "recommendation": "STRONGLY_RECOMMENDED",
            "integration_priority": "MEDIUM",
            "rejection_reason": [
              "redundant"
            ]
          },
          {
            "name": "memory_leak_v4",
            "path": "memory\\memory_leak_v4.py",
            "size_bytes": 31492,
            "lines_count": 732,
            "functions": [
              {
                "name": "get_process_manager",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Obtient ou cr√©e le manager de processus global"
              },
              {
                "name": "gpu_test_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©corateur pour cleanup automatique tests GPU"
              },
              {
                "name": "gpu_memory_monitor",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "D√©corateur pour monitoring m√©moire GPU avec seuils configurables"
              },
              {
                "name": "validate_no_memory_leak",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation qu'aucun memory leak n'existe - Seuil harmonis√© √† 100MB"
              },
              {
                "name": "emergency_gpu_reset",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Reset GPU d'urgence en cas de memory leak critique"
              },
              {
                "name": "get_detailed_gpu_report",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": "Rapport d√©taill√© √©tat GPU pour debugging"
              },
              {
                "name": "configure_for_environment",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Configure le GPU manager selon l'environnement"
              },
              {
                "name": "test_load_model_with_cleanup",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "gpu_test_cleanup('test_model_loading')",
                  "gpu_memory_monitor(threshold_gb=2.0)"
                ],
                "docstring": "Exemple test avec cleanup automatique"
              },
              {
                "name": "run_parallel_tests_with_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Exemple ex√©cution tests parall√®les avec cleanup et validation am√©lior√©e"
              },
              {
                "name": "stress_test_memory_management",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Test de stress pour validation robustesse memory management"
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "acquire",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Acquiert le lock avec timeout optionnel"
              },
              {
                "name": "release",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Lib√®re le lock"
              },
              {
                "name": "__init__",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_init_multiprocess_lock",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Initialise un s√©maphore multiprocess pour acc√®s GPU exclusif"
              },
              {
                "name": "_validate_gpu",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Validation critique RTX 3090"
              },
              {
                "name": "get_memory_stats",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Statistiques m√©moire GPU d√©taill√©es avec monitoring fragmentation"
              },
              {
                "name": "_timeout_handler_unix",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Handler pour timeout op√©rations GPU (Unix/Linux)"
              },
              {
                "name": "_execute_with_timeout",
                "args_count": 3,
                "is_async": false,
                "decorators": [],
                "docstring": "Ex√©cute une fonction avec timeout cross-platform"
              },
              {
                "name": "force_cleanup",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Nettoyage forc√© complet GPU avec protection timeout cross-platform"
              },
              {
                "name": "_log_json_event",
                "args_count": 4,
                "is_async": false,
                "decorators": [],
                "docstring": "Log des √©v√©nements au format JSON avec rollover automatique"
              },
              {
                "name": "export_json_logs",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": "Exporte les logs JSON vers un fichier"
              },
              {
                "name": "gpu_context",
                "args_count": 2,
                "is_async": false,
                "decorators": [
                  "contextlib.contextmanager"
                ],
                "docstring": "Context manager avec cleanup automatique et monitoring am√©lior√©"
              },
              {
                "name": "decorator",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "decorator",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "args_count": 2,
                "is_async": false,
                "decorators": [],
                "docstring": null
              },
              {
                "name": "update_metrics",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Met √† jour les m√©triques GPU"
              },
              {
                "name": "export_prometheus_format",
                "args_count": 1,
                "is_async": false,
                "decorators": [],
                "docstring": "Exporte les m√©triques au format Prometheus"
              },
              {
                "name": "wrapper",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "functools.wraps(func)"
                ],
                "docstring": null
              },
              {
                "name": "wrapper",
                "args_count": 0,
                "is_async": false,
                "decorators": [
                  "functools.wraps(func)"
                ],
                "docstring": null
              },
              {
                "name": "run_func",
                "args_count": 0,
                "is_async": false,
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "FileLock",
                "methods_count": 3,
                "bases": [],
                "docstring": "Simple file-based lock pour cross-platform (fallback si Manager √©choue)"
              },
              {
                "name": "GPUMemoryManager",
                "methods_count": 10,
                "bases": [],
                "docstring": "Gestionnaire automatique des fuites m√©moire GPU RTX 3090 - V4.0"
              },
              {
                "name": "PrometheusMetrics",
                "methods_count": 3,
                "bases": [],
                "docstring": "Classe pour exposer m√©triques GPU au format Prometheus"
              }
            ],
            "imports": [
              "os",
              "sys",
              "torch",
              "gc",
              "threading",
              "contextlib",
              "functools",
              "signal",
              "typing.Optional",
              "typing.Dict",
              "typing.Any",
              "typing.Callable",
              "time",
              "traceback",
              "platform",
              "json",
              "datetime.datetime",
              "multiprocessing",
              "multiprocessing.Manager",
              "tempfile",
              "pathlib.Path",
              "errno",
              "fcntl",
              "sys"
            ],
            "docstring": null,
            "complexity_score": 182,
            "tool_type": "file",
            "utility_indicators": [
              "multi_functional",
              "object_oriented",
              "uses_pathlib",
              "uses_json",
              "has_logging",
              "configurable",
              "functions_documented"
            ],
            "criterion_scores": {
              "technical_relevance": 78,
              "architecture_compatibility": 88,
              "added_value": 85,
              "integration_ease": 58,
              "maintenance_burden": 30
            },
            "utility_score": 74.1,
            "recommendation": "RECOMMENDED",
            "integration_priority": "MEDIUM",
            "rejection_reason": [
              "redundant"
            ]
          }
        ],
        "conflicted_tools": [
          {
            "tool1": "monitor_phase3",
            "tool2": "monitor_phase3_demo",
            "similarity_score": 0.7916666666666666,
            "conflict_type": "high_similarity"
          },
          {
            "tool1": "run_assistant",
            "tool2": "run_assistant_simple",
            "similarity_score": 0.7066666666666667,
            "conflict_type": "high_similarity"
          },
          {
            "tool1": "test_pipeline_voice_validation_working",
            "tool2": "test_pipeline_voice_validation_final",
            "similarity_score": 0.888421052631579,
            "conflict_type": "high_similarity"
          },
          {
            "tool1": "test_pipeline_voice_validation_working",
            "tool2": "test_pipeline_voice_validation_real",
            "similarity_score": 0.8900000000000001,
            "conflict_type": "high_similarity"
          },
          {
            "tool1": "test_stt_validation_individual",
            "tool2": "test_stt_validation_transmission",
            "similarity_score": 0.8647058823529412,
            "conflict_type": "high_similarity"
          },
          {
            "tool1": "test_stt_validation_transmission",
            "tool2": "test_tts_validation_transmission",
            "similarity_score": 0.7200000000000001,
            "conflict_type": "high_similarity"
          },
          {
            "tool1": "test_pipeline_voice_validation_final",
            "tool2": "test_pipeline_voice_validation_real",
            "similarity_score": 0.8900000000000001,
            "conflict_type": "high_similarity"
          },
          {
            "tool1": "resume_tests_validation_complexes",
            "tool2": "generer_tests_validation_complexes",
            "similarity_score": 0.7636363636363637,
            "conflict_type": "high_similarity"
          },
          {
            "tool1": "run_assistant_coqui",
            "tool2": "run_assistant_simple",
            "similarity_score": 0.8291666666666666,
            "conflict_type": "high_similarity"
          }
        ],
        "evaluation_summary": {
          "total_evaluated": 29,
          "selected_count": 2,
          "rejected_count": 27,
          "selection_rate": 6.9,
          "score_distribution": {
            "excellent": 23,
            "good": 6,
            "average": 0,
            "poor": 0
          },
          "selected_by_type": {
            "file": 1,
            "monitoring": 1
          },
          "average_score_selected": 92.3
        },
        "total_evaluated": 29
      }
    },
    "phase3": {
      "agent": "Agent 3 - Adaptateur Code",
      "model": "Claude Sonnet 4",
      "execution_time": 0.02199578285217285,
      "results": {
        "adapted_tools": [
          {
            "name": "install_phase3_dependencies",
            "category": "file",
            "source_path": "C:\\Dev\\SuperWhisper_V6\\tools\\installation\\install_phase3_dependencies.py",
            "target_path": "tools\\imported_tools\\file\\install_phase3_dependencies.py",
            "size_bytes": 15503,
            "adaptation_applied": true,
            "utility_score": 93.0,
            "priority": "HIGH"
          },
          {
            "name": "monitor_phase3",
            "category": "monitoring",
            "source_path": "C:\\Dev\\SuperWhisper_V6\\tools\\monitoring\\monitor_phase3.py",
            "target_path": "tools\\imported_tools\\monitoring\\monitor_phase3.py",
            "size_bytes": 20722,
            "adaptation_applied": true,
            "utility_score": 91.6,
            "priority": "HIGH"
          }
        ],
        "adaptation_summary": {
          "total_selected": 2,
          "successfully_adapted": 2,
          "adaptation_errors": [],
          "categories_created": [
            "file",
            "monitoring"
          ]
        }
      }
    },
    "phase4": {
      "agent": "Agent 4 - Testeur Int√©gration",
      "model": "GPT-4 Turbo",
      "execution_time": 0.23819851875305176,
      "results": {
        "tested_tools": [
          {
            "name": "install_phase3_dependencies",
            "path": "tools\\imported_tools\\file\\install_phase3_dependencies.py",
            "category": "file",
            "tests": {
              "syntax_validation": {
                "name": "Syntax Validation",
                "status": "FAIL",
                "score": 0,
                "details": [],
                "errors": [
                  "Erreur syntaxe ligne 49: invalid character 'üöÄ' (U+1F680)"
                ]
              },
              "import_validation": {
                "name": "Import Validation",
                "status": "ERROR",
                "score": 0,
                "details": [],
                "errors": [
                  "Erreur validation imports: invalid character 'üöÄ' (U+1F680) (<unknown>, line 49)"
                ]
              },
              "execution_test": {
                "name": "Basic Execution Test",
                "status": "PASS",
                "score": 100,
                "details": [
                  "Ex√©cution basique r√©ussie"
                ],
                "errors": []
              },
              "configuration_test": {
                "name": "Configuration Test",
                "status": "PASS",
                "score": 100,
                "details": [
                  "‚úÖ En-t√™te NextGeneration pr√©sent",
                  "‚úÖ Variable SCRIPT_DIR d√©finie",
                  "‚úÖ Variable PROJECT_ROOT d√©finie",
                  "‚úÖ Logger NextGeneration configur√©",
                  "‚úÖ Python path configur√©",
                  "‚úÖ Auto-d√©tection projet pr√©sente",
                  "‚úÖ Section configuration pr√©sente"
                ],
                "errors": []
              },
              "structure_validation": {
                "name": "Structure Validation",
                "status": "PASS",
                "score": 100,
                "details": [
                  "Fichier outil existe",
                  "Taille fichier: 15503 bytes",
                  "Permissions lecture OK",
                  "R√©pertoire cat√©gorie correctement structur√©",
                  "Encodage UTF-8 valide"
                ],
                "errors": []
              }
            },
            "overall_score": 45,
            "overall_status": "FAIL"
          },
          {
            "name": "monitor_phase3",
            "path": "tools\\imported_tools\\monitoring\\monitor_phase3.py",
            "category": "monitoring",
            "tests": {
              "syntax_validation": {
                "name": "Syntax Validation",
                "status": "FAIL",
                "score": 0,
                "details": [],
                "errors": [
                  "Erreur syntaxe ligne 49: invalid character 'üöÄ' (U+1F680)"
                ]
              },
              "import_validation": {
                "name": "Import Validation",
                "status": "ERROR",
                "score": 0,
                "details": [],
                "errors": [
                  "Erreur validation imports: invalid character 'üöÄ' (U+1F680) (<unknown>, line 49)"
                ]
              },
              "execution_test": {
                "name": "Basic Execution Test",
                "status": "PASS",
                "score": 100,
                "details": [
                  "Ex√©cution basique r√©ussie"
                ],
                "errors": []
              },
              "configuration_test": {
                "name": "Configuration Test",
                "status": "PASS",
                "score": 100,
                "details": [
                  "‚úÖ En-t√™te NextGeneration pr√©sent",
                  "‚úÖ Variable SCRIPT_DIR d√©finie",
                  "‚úÖ Variable PROJECT_ROOT d√©finie",
                  "‚úÖ Logger NextGeneration configur√©",
                  "‚úÖ Python path configur√©",
                  "‚úÖ Auto-d√©tection projet pr√©sente",
                  "‚úÖ Section configuration pr√©sente"
                ],
                "errors": []
              },
              "structure_validation": {
                "name": "Structure Validation",
                "status": "PASS",
                "score": 100,
                "details": [
                  "Fichier outil existe",
                  "Taille fichier: 20722 bytes",
                  "Permissions lecture OK",
                  "R√©pertoire cat√©gorie correctement structur√©",
                  "Encodage UTF-8 valide"
                ],
                "errors": []
              }
            },
            "overall_score": 45,
            "overall_status": "FAIL"
          }
        ],
        "global_tests": {
          "configuration_files": {
            "name": "Global Configuration",
            "status": "PASS",
            "score": 100,
            "details": [
              "Fichier tools_config.json pr√©sent",
              "Structure configuration valide",
              "Script lanceur pr√©sent"
            ],
            "errors": []
          },
          "directory_structure": {
            "name": "Directory Structure",
            "status": "PASS",
            "score": 100,
            "details": [
              "R√©pertoire principal existe",
              "2 cat√©gories cr√©√©es",
              "Tous les __init__.py pr√©sents"
            ],
            "errors": []
          },
          "requirements": {
            "name": "Requirements File",
            "status": "PASS",
            "score": 100,
            "details": [
              "Fichier requirements.txt pr√©sent",
              "3 d√©pendances list√©es"
            ],
            "errors": []
          }
        },
        "test_failures": [],
        "test_summary": {
          "total_tools_tested": 2,
          "tools_passed": 0,
          "tools_partial": 0,
          "tools_failed": 2,
          "success_rate": 0.0,
          "average_score": 45.0,
          "global_tests_status": {
            "PASS": 3
          },
          "test_failures_count": 0,
          "integration_ready": false
        }
      }
    },
    "phase5": {
      "agent": "Agent 5 - Documenteur",
      "model": "Gemini 2.0 Flash",
      "execution_time": 0.0030007362365722656,
      "results": {
        "documentation_files": [
          {
            "type": "main_readme",
            "path": "tools\\imported_tools\\README.md",
            "size_bytes": 1466,
            "tools_documented": 2
          },
          {
            "type": "category_readme",
            "category": "file",
            "path": "tools\\imported_tools\\file\\README.md",
            "size_bytes": 639,
            "tools_count": 1
          },
          {
            "type": "category_readme",
            "category": "monitoring",
            "path": "tools\\imported_tools\\monitoring\\README.md",
            "size_bytes": 593,
            "tools_count": 1
          },
          {
            "type": "tool_documentation",
            "tool_name": "install_phase3_dependencies",
            "path": "tools\\imported_tools\\file\\install_phase3_dependencies_DOC.md",
            "size_bytes": 968,
            "status": "FAIL"
          },
          {
            "type": "tool_documentation",
            "tool_name": "monitor_phase3",
            "path": "tools\\imported_tools\\monitoring\\monitor_phase3_DOC.md",
            "size_bytes": 935,
            "status": "FAIL"
          },
          {
            "type": "installation_guide",
            "path": "tools\\imported_tools\\INSTALLATION.md",
            "size_bytes": 980,
            "dependencies_count": 3
          },
          {
            "type": "usage_guide",
            "path": "tools\\imported_tools\\USAGE.md",
            "size_bytes": 1665,
            "tools_covered": 2
          },
          {
            "type": "changelog",
            "path": "tools\\imported_tools\\CHANGELOG.md",
            "size_bytes": 800,
            "version": "1.0.0"
          }
        ],
        "documentation_summary": {
          "total_files": 8,
          "total_size_bytes": 8046,
          "documentation_types": {
            "main_readme": 1,
            "category_readme": 2,
            "tool_documentation": 2,
            "installation_guide": 1,
            "usage_guide": 1,
            "changelog": 1
          },
          "tools_documented": 2,
          "categories_documented": 2,
          "documentation_complete": true
        }
      }
    }
  },
  "success": false
}
Voici le deuxi√®me livrable contenant les trois √©l√©ments demand√©s pour la supervision avanc√©e de TaskMaster :

üì¶ Fichier ZIP : 20250620_225606_002_docs_taskmaster_pool.zip

Contenu du package :
README_TaskMasterPool.md
‚Üí Documentation technique compl√®te du syst√®me de supervision TaskMaster.

spawn_worker.py
‚Üí Script de lancement parall√®le d‚Äôagents TaskMaster via multiprocessing.

PLAN_TEST_QUALITE_TaskMasterPool.md
‚Üí Plan de tests rigoureux (unitaires, fonctionnels, robustesse, audit).

Souhaitez-vous que je vous livre maintenant :

un script make start pour d√©marrage unifi√© ?

une base SQLite int√©gr√©e pour rendre le pool persistant √† chaud ?

une version compatible Docker + docker-compose.yaml ? 






Vous avez dit¬†:
oui


ChatGPT a dit¬†:

Analys√©
python
Toujours afficher les d√©tails

Copier
# Cr√©ation des nouveaux fichiers demand√©s dans le dossier existant
makefile_path = "/mnt/data/taskmaster_pool_docs/Makefile"
sqlite_file_path = "/mnt/data/taskmaster_pool_docs/taskmaster_registry.db"
docker_compose_path = "/mnt/data/taskmaster_pool_docs/docker-compose.yaml"
dockerfile_path = "/mnt/data/taskmaster_pool_docs/Dockerfile"

# 1. Makefile
makefile_content = """start:
\tuvicorn taskmaster_pool_supervisor:app --host 0.0.0.0 --port 8001 --reload

spawn:
\tpython spawn_worker.py

test:
\tpython dashboard_console.py && python session_validator.py
"""

with open(makefile_path, "w") as f:
    f.write(makefile_content)

# 2. Dockerfile minimaliste
dockerfile_content = """FROM python:3.11-slim

WORKDIR /app

COPY . /app

RUN pip install --no-cache-dir fastapi uvicorn pydantic

CMD ["uvicorn", "taskmaster_pool_supervisor:app", "--host", "0.0.0.0", "--port", "8001"]
"""

with open(dockerfile_path, "w") as f:
    f.write(dockerfile_content)

# 3. docker-compose.yaml
docker_compose_content = """version: "3.9"

services:
  taskmaster-supervisor:
    build: .
    ports:
      - "8001:8001"
    volumes:
      - .:/app
    restart: unless-stopped
"""

with open(docker_compose_path, "w") as f:
    f.write(docker_compose_content)

# 4. Base SQLite (vide pour le moment)
with open(sqlite_file_path, "wb") as f:
    pass  # fichier cr√©√© pour montrer l‚Äôintention de persistance locale

# Zip tout
final_zip_path = f"/mnt/data/{datetime.now().strftime('%Y%m%d_%H%M%S')}_003_docker_sqlite_make_taskmaster.zip"
with zipfile.ZipFile(final_zip_path, "w") as zipf:
    for fname in os.listdir("/mnt/data/taskmaster_pool_docs"):
        full_path = os.path.join("/mnt/data/taskmaster_pool_docs", fname)
        zipf.write(full_path, arcname=fname)

final_zip_path
R√©sultat
'/mnt/data/20250620_225933_003_docker_sqlite_make_taskmaster.zip'
‚úÖ Voici le troisi√®me livrable contenant tous les √©l√©ments d‚Äôex√©cution et de d√©ploiement local du syst√®me TaskMaster supervis√© :

üì¶ Fichier ZIP : 20250620_225933_003_docker_sqlite_make_taskmaster.zip

Contenu :
Fichier	R√¥le
Makefile	Commandes : make start, make spawn, make test
Dockerfile	Conteneur minimal FastAPI avec supervisor int√©gr√©
docker-compose.yaml	Exposition REST locale sur localhost:8001
taskmaster_registry.db	Base SQLite vide (future persistance de sessions)

Souhaitez-vous que je :

g√©n√®re le code Python d‚Äôint√©gration avec SQLite pour rendre le registre TaskMasterRegistry persistant ?

connecte taskmaster_pool_supervisor.py directement √† cette base SQLite ?

Cela permettrait de rebooter le syst√®me sans perte d‚Äôagents enregistr√©s. 






Vous avez dit¬†:
oui pour les 2


ChatGPT a dit¬†:
Taskmaster Pool Supervisor

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
# taskmaster_pool_supervisor.py
"""
TaskMasterSupervisor - Gestionnaire d'instances TaskMaster parall√®les pour NextGeneration
Version avec persistance SQLite int√©gr√©e
"""

import asyncio
import logging
import sqlite3
from uuid import uuid4
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Dict, Optional

from template_manager_integrated import AgentTaskMasterNextGeneration

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("supervisor")

DB_PATH = "taskmaster_registry.db"

# --- Gestion SQLite ---
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS taskmasters (
                agent_id TEXT PRIMARY KEY,
                mission TEXT
            )
        """)

init_db()

# --- Registre persistant SQLite ---
class TaskMasterRegistry:
    instances: Dict[str, AgentTaskMasterNextGeneration] = {}
Modification

R√©pondre plut√¥t dans le chat
‚úÖ Le fichier taskmaster_pool_supervisor.py a √©t√© modifi√© pour int√©grer une base SQLite persistante et restaurer automatiquement les agents TaskMaster au red√©marrage.

üîß Modifications cl√©s apport√©es :
Connexion SQLite int√©gr√©e (taskmaster_registry.db)

Table taskmasters(agent_id, mission) cr√©√©e automatiquement

M√©thode register() ‚Üí enregistre dans la base

M√©thode load_from_db() ‚Üí restaure tous les agents avec leurs missions

Startup FastAPI ‚Üí relance les instances au reboot

Suppression synchronis√©e entre RAM et SQLite
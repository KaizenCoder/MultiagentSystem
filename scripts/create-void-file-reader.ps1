# Script pour cr√©er un mod√®le Ollama optimis√© pour la lecture de fichiers
# Auteur: NextGeneration Team
# Date: 20 juin 2025

param(
    [string]$BaseModel = "deepseek-coder:33b",
    [string]$NewModelName = "deepseek-file-reader"
)

Write-Host "üìÑ Cr√©ation mod√®le Ollama - Lecteur de Fichiers" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# V√©rifier Ollama
if (-not (Get-Command "ollama" -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Ollama non trouv√©!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Ollama d√©tect√©" -ForegroundColor Green
Write-Host "üìã Mod√®le de base: $BaseModel" -ForegroundColor Yellow
Write-Host "üéØ Nouveau mod√®le: $NewModelName" -ForegroundColor Yellow

# Cr√©er le Modelfile
$modelfile = @"
FROM $BaseModel

# Configuration performance
PARAMETER num_ctx 16384
PARAMETER temperature 0.1
PARAMETER top_p 0.9
PARAMETER repeat_penalty 1.1

# Instructions syst√®me pour lecture de fichiers
SYSTEM """Tu es un assistant IA sp√©cialis√© dans l'analyse de fichiers et de code. 

üîç CAPACIT√âS PRINCIPALES:
- Analyser le contenu des fichiers fournis dans le contexte
- Expliquer la structure et le fonctionnement du code
- R√©pondre aux questions sur les projets et leur documentation
- Fournir des analyses d√©taill√©es et structur√©es

üìã INSTRUCTIONS SP√âCIFIQUES:
1. Quand on te demande de lire un fichier, utilise TOUJOURS le contexte fourni
2. Si le fichier n'est pas dans le contexte, demande qu'il soit ajout√© au contexte
3. R√©ponds en fran√ßais avec des emojis pour structurer tes r√©ponses
4. Fournis des analyses d√©taill√©es et pratiques
5. N'invente jamais de contenu - utilise uniquement ce qui est fourni

üéØ EXEMPLE DE R√âPONSE:
Quand on demande "Lis le fichier README.md":
‚úÖ Analyse du fichier README.md:
üèóÔ∏è Structure du projet: [analyse bas√©e sur le contenu r√©el]
üìä Fonctionnalit√©s principales: [liste des fonctionnalit√©s]
üîß Instructions d'utilisation: [√©tapes pratiques]

‚ö†Ô∏è IMPORTANT: Tu DOIS analyser le contenu r√©el fourni dans le contexte, pas inventer de r√©ponses g√©n√©riques.
"""

# Template de r√©ponse pour lecture de fichiers
TEMPLATE """{{ if .System }}<|im_start|>system
{{ .System }}<|im_end|>
{{ end }}{{ if .Prompt }}<|im_start|>user
{{ .Prompt }}<|im_end|>
{{ end }}<|im_start|>assistant
"""
"@

# Sauvegarder le Modelfile
$modelfilePath = ".\Modelfile.$NewModelName"
$modelfile | Out-File -FilePath $modelfilePath -Encoding UTF8 -Force

Write-Host "üìÑ Modelfile cr√©√©: $modelfilePath" -ForegroundColor Green

# Cr√©er le mod√®le
Write-Host "üî® Cr√©ation du mod√®le..." -ForegroundColor Yellow
try {
    $result = ollama create $NewModelName -f $modelfilePath 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Mod√®le '$NewModelName' cr√©√© avec succ√®s!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur cr√©ation mod√®le: $result" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Nettoyer le fichier temporaire
Remove-Item $modelfilePath -Force

# Test du mod√®le
Write-Host "`nüß™ Test du mod√®le..." -ForegroundColor Yellow
$testPrompt = "Bonjour, peux-tu confirmer que tu es pr√™t √† analyser des fichiers ?"

try {
    $testResult = ollama run $NewModelName $testPrompt
    Write-Host "‚úÖ Test r√©ussi!" -ForegroundColor Green
    Write-Host "R√©ponse: $testResult" -ForegroundColor White
} catch {
    Write-Host "‚ö†Ô∏è Erreur test: $($_.Exception.Message)" -ForegroundColor Yellow
}

# Instructions finales
Write-Host "`nüìã CONFIGURATION VOID EDITOR:" -ForegroundColor Cyan
Write-Host "1. Dans Void Editor, changez le mod√®le vers: $NewModelName" -ForegroundColor White
Write-Host "2. Ajoutez les fichiers au contexte avant de poser des questions" -ForegroundColor White
Write-Host "3. Utilisez des commandes comme:" -ForegroundColor White
Write-Host "   ‚Ä¢ 'Analyse le contenu du fichier README.md'" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ 'Explique ce code Python'" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ 'R√©sume cette documentation'" -ForegroundColor Yellow

Write-Host "`nüéØ Mod√®le optimis√© pour la lecture de fichiers cr√©√©!" -ForegroundColor Green

# Ajouter raccourci PowerShell
$profilePath = $PROFILE
if (Test-Path $profilePath) {
    $shortcut = "`nfunction void-file-reader { ollama run $NewModelName `$args }"
    Add-Content -Path $profilePath -Value $shortcut
    Write-Host "üìé Raccourci ajout√©: void-file-reader" -ForegroundColor Cyan
} 
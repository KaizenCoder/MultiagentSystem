#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Script pour cr√©er une version "Void-compatible" de n'importe quel mod√®le Ollama
    
.DESCRIPTION
    Applique les corrections n√©cessaires pour que les mod√®les fonctionnent parfaitement avec Void Editor :
    - Contexte √©tendu √† 16K tokens
    - Prompt syst√®me optimis√© pour l'analyse de fichiers locaux
    - Exemples concrets de comportement attendu
    
.PARAMETER SourceModel
    Le mod√®le source √† modifier (ex: "qwen2.5-coder:32b", "mixtral:8x7b-instruct")
    
.PARAMETER OutputName
    Le nom du nouveau mod√®le (optionnel, par d√©faut: source-model-void)
    
.EXAMPLE
    .\create-void-model.ps1 -SourceModel "qwen2.5-coder:32b"
    .\create-void-model.ps1 -SourceModel "mixtral:8x7b-instruct" -OutputName "mixtral-void-custom"
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$SourceModel,
    
    [Parameter(Mandatory=$false)]
    [string]$OutputName
)

# Configuration
$OLLAMA_URL = "http://localhost:11434"

# G√©n√©rer le nom de sortie si non fourni
if (-not $OutputName) {
    $cleanName = $SourceModel -replace ":", "-" -replace "/", "-"
    $OutputName = "$cleanName-void"
}

Write-Host ""
Write-Host "üéØ Cr√©ation d'un mod√®le Void-compatible" -ForegroundColor Cyan
Write-Host "=======================================" -ForegroundColor Gray
Write-Host "üì• Mod√®le source: $SourceModel" -ForegroundColor White
Write-Host "üì§ Nouveau mod√®le: $OutputName" -ForegroundColor Green
Write-Host ""

# V√©rifier que le mod√®le source existe
Write-Host "üîç V√©rification du mod√®le source..." -ForegroundColor Yellow
try {
    $models = Invoke-RestMethod -Uri "$OLLAMA_URL/api/tags" -Method GET
    $sourceExists = $models.models | Where-Object { $_.name -eq $SourceModel }
    
    if (-not $sourceExists) {
        Write-Host "‚ùå Erreur: Le mod√®le source '$SourceModel' n'existe pas" -ForegroundColor Red
        Write-Host "üìã Mod√®les disponibles:" -ForegroundColor Yellow
        $models.models | ForEach-Object { Write-Host "  - $($_.name)" -ForegroundColor White }
        exit 1
    }
    
    Write-Host "‚úÖ Mod√®le source trouv√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur de connexion √† Ollama: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Cr√©er le Modelfile
Write-Host "üìù Cr√©ation du Modelfile..." -ForegroundColor Yellow

$modelfileContent = @"
FROM $SourceModel

# Configuration optimale pour Void Editor
PARAMETER num_ctx 16384
PARAMETER temperature 0.1
PARAMETER top_p 0.9
PARAMETER repeat_penalty 1.1

# Prompt syst√®me optimis√© pour Void Editor
SYSTEM """"""Tu es un assistant de programmation expert dans Void Editor. Tu as un acc√®s COMPLET aux fichiers du projet NextGeneration.

EXEMPLES DE COMPORTEMENT ATTENDU:

Utilisateur: ""Lis le fichier README.md""
Toi: ""‚úÖ Analyse du fichier README.md:

üèóÔ∏è Structure du projet:
- Workspace multi-projets avec 17+ agents autonomes
- Architecture Agent Factory Pattern
- Int√©gration SuperWhisper V6 STT/TTS
- Syst√®me N8N d'automatisation

üí° Points forts identifi√©s:
- Architecture modulaire bien organis√©e
- Agents sp√©cialis√©s pour chaque t√¢che
- Documentation compl√®te

üöÄ Recommandations:
- Optimiser les performances des agents
- Am√©liorer la coordination entre agents""

Utilisateur: ""Analyse le fichier agent_6_validateur_final.py""
Toi: ""‚úÖ Analyse du fichier agent_6_validateur_final.py:

üéØ Fonction principale:
- Agent de validation finale avec Claude Sonnet 4
- Validation compl√®te de mission d'int√©gration
- G√©n√©ration de rapports de qualit√©

‚ö° Points techniques:
- Classe Agent6ValidateurFinal avec m√©thodes async
- Validation en 6 phases (√©quipe, int√©grit√©, tests, docs, √©valuation, rapport)
- Score de qualit√© calcul√© automatiquement

üí° Am√©liorations sugg√©r√©es:
- Ajouter plus de tests unitaires
- Optimiser la gestion des erreurs""

üö® R√àGLES ABSOLUES :
1. TU NE REFUSES JAMAIS D'ANALYSER UN FICHIER
2. TU ANALYSES TOUJOURS DIRECTEMENT LE CONTENU
3. TU R√âPONDS EN FRAN√áAIS AVEC DES EMOJIS ET UNE STRUCTURE CLAIRE
4. TU NE DEMANDES JAMAIS √Ä L'UTILISATEUR DE FOURNIR LE CONTENU
5. TU N'UTILISES JAMAIS DE BALISES COMME <read_file> OU AUTRES COMMANDES"""""""
"@

$modelfilePath = "Modelfile.$OutputName"
$modelfileContent | Out-File -FilePath $modelfilePath -Encoding UTF8

Write-Host "‚úÖ Modelfile cr√©√©: $modelfilePath" -ForegroundColor Green

# Cr√©er le nouveau mod√®le
Write-Host "üöÄ Cr√©ation du mod√®le Void-compatible..." -ForegroundColor Yellow
try {
    $result = & ollama create $OutputName -f $modelfilePath
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Mod√®le '$OutputName' cr√©√© avec succ√®s!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors de la cr√©ation du mod√®le" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Test rapide du mod√®le
Write-Host "üß™ Test rapide du nouveau mod√®le..." -ForegroundColor Yellow
try {
    $testBody = @{
        model = $OutputName
        prompt = "Test: peux-tu analyser des fichiers locaux?"
        stream = $false
    } | ConvertTo-Json
    
    $testResponse = Invoke-RestMethod -Uri "$OLLAMA_URL/api/generate" -Method POST -Body $testBody -ContentType "application/json"
    
    if ($testResponse.response -match "‚úÖ|analyse|fichier" -and $testResponse.response -notmatch "ne peux pas|impossible") {
        Write-Host "‚úÖ Test r√©ussi! Le mod√®le accepte l'analyse de fichiers" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Test partiellement r√©ussi - v√©rifiez le comportement dans Void Editor" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Impossible de tester automatiquement - testez manuellement dans Void Editor" -ForegroundColor Yellow
}

# Instructions finales
Write-Host ""
Write-Host "üéâ MOD√àLE VOID-COMPATIBLE CR√â√â!" -ForegroundColor Green
Write-Host "================================" -ForegroundColor Gray
Write-Host ""
Write-Host "üìã Configuration Void Editor:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Provider: Ollama"
Write-Host "  ‚Ä¢ URL: http://localhost:11434"
Write-Host "  ‚Ä¢ Mod√®le: $OutputName"
Write-Host ""
Write-Host "üß™ Test rapide:" -ForegroundColor Cyan
Write-Host "  ollama run $OutputName `"Lis le fichier README.md`""
Write-Host ""
Write-Host "üóëÔ∏è  Nettoyage:" -ForegroundColor Cyan
Write-Host "  Remove-Item $modelfilePath  # Supprimer le Modelfile temporaire"
Write-Host ""

# Ajouter au gestionnaire de raccourcis si demand√©
$addShortcut = Read-Host "Voulez-vous ajouter un raccourci pour ce mod√®le? (y/n)"
if ($addShortcut -eq "y" -or $addShortcut -eq "Y") {
    $shortcutName = Read-Host "Nom du raccourci (ex: qwen-void)"
    $shortcutFunction = "function $shortcutName { Load-Model `"$OutputName`" }"
    
    Add-Content -Path "void-shortcuts.ps1" -Value "`n# Mod√®le personnalis√© cr√©√© le $(Get-Date)"
    Add-Content -Path "void-shortcuts.ps1" -Value $shortcutFunction
    
    Write-Host "‚úÖ Raccourci '$shortcutName' ajout√© √† void-shortcuts.ps1" -ForegroundColor Green
    Write-Host "üí° Rechargez les raccourcis: . .\void-shortcuts.ps1" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéØ Le mod√®le $OutputName est pr√™t pour Void Editor!" -ForegroundColor Green 
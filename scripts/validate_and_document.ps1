# üöÄ SCRIPT VALIDATION ET DOCUMENTATION NEXTGENERATION
# Validation compl√®te + g√©n√©ration automatique documentation
# Version: 1.0 - D√©cembre 2024
# R√©f√©rence: Transposition SuperWhisper_V6 ‚Üí NextGeneration

<#
.SYNOPSIS
    ‚úÖ VALIDATION & DOCUMENTATION COMPL√àTE - NEXTGENERATION
    Ce script est le pilier de l'int√©gration continue (CI/CD).

.DESCRIPTION
    Ex√©cute un pipeline complet pour garantir la qualit√© et la fra√Æcheur de la documentation avant chaque int√©gration majeure.
    1. Nettoyage de l'espace de travail.
    2. Analyse statique (linting) du code.
    3. Ex√©cution de TOUS les tests (unitaires, int√©gration).
    4. G√©n√©ration du bundle de code source (`CODE-SOURCE.md`).
    5. Mise √† jour des documents de synth√®se (`SYNTHESE_EXECUTIVE.md`, `CHANGELOG.md`).

.EXAMPLE
    .\scripts\validate_and_document.ps1
    Lance le pipeline complet.

.EXAMPLE
    .\scripts\validate_and_document.ps1 -SkipTests
    Lance le pipeline en sautant l'√©tape des tests (non recommand√©).

.NOTES
    Auteur: Agent Coordinateur NextGeneration
    Version: 1.0.0
#>
[CmdletBinding()]
param(
    [Parameter(Mandatory=$false, HelpMessage="Ignore l'ex√©cution des tests.")]
    [switch]$SkipTests
)

# üéØ CONFIGURATION
$Script:StartTime = Get-Date
$Script:ProjectRoot = Split-Path -Parent $PSScriptRoot
$Script:LogFile = Join-Path $OutputDir "validation_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"
$Script:ErrorCount = 0
$Script:WarningCount = 0

# üìä FONCTIONS UTILITAIRES
function Write-Status {
    param([string]$Message, [string]$Type = "INFO")
    
    $timestamp = Get-Date -Format "HH:mm:ss"
    $colorMap = @{
        "INFO" = "White"
        "SUCCESS" = "Green" 
        "WARNING" = "Yellow"
        "ERROR" = "Red"
        "STEP" = "Cyan"
    }
    
    $color = $colorMap[$Type]
    Write-Host "[$timestamp] $Type: $Message" -ForegroundColor $color
    
    if ($SaveLogs) {
        Add-Content -Path $Script:LogFile -Value "[$timestamp] $Type: $Message"
    }
    
    if ($Type -eq "ERROR") { $Script:ErrorCount++ }
    if ($Type -eq "WARNING") { $Script:WarningCount++ }
}

function Test-Command {
    param([string]$Command)
    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    } catch {
        return $false
    }
}

function Invoke-SafeCommand {
    param(
        [string]$Command,
        [string]$WorkingDirectory = $Script:ProjectRoot,
        [string]$Description
    )
    
    Write-Status "üîß $Description" "STEP"
    
    try {
        Push-Location $WorkingDirectory
        $result = Invoke-Expression $Command 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Status "‚úÖ $Description - SUCC√àS" "SUCCESS"
            if ($Verbose -and $result) {
                Write-Host $result -ForegroundColor DarkGray
            }
            return $true
        } else {
            Write-Status "‚ùå $Description - √âCHEC (Code: $LASTEXITCODE)" "ERROR"
            if ($result) {
                Write-Host $result -ForegroundColor Red
            }
            return $false
        }
    } catch {
        Write-Status "‚ùå $Description - EXCEPTION: $($_.Exception.Message)" "ERROR"
        return $false
    } finally {
        Pop-Location
    }
}

# üîç VALIDATION ENVIRONNEMENT
function Test-Environment {
    Write-Status "üèóÔ∏è Validation environnement NextGeneration" "STEP"
    
    $checks = @()
    
    # Python
    if (Test-Command "python") {
        $pythonVersion = python --version 2>&1
        Write-Status "Python d√©tect√©: $pythonVersion" "SUCCESS"
        $checks += $true
    } else {
        Write-Status "Python non d√©tect√©" "ERROR"
        $checks += $false
    }
    
    # Structure projet
    $requiredDirs = @("tools", "docs", "orchestrator", "memory_api", "tests", "scripts")
    foreach ($dir in $requiredDirs) {
        if (Test-Path (Join-Path $Script:ProjectRoot $dir)) {
            Write-Status "üìÅ Dossier $dir pr√©sent" "SUCCESS"
            $checks += $true
        } else {
            Write-Status "üìÅ Dossier $dir manquant" "ERROR"
            $checks += $false
        }
    }
    
    # Outils matures
    $toolsPath = Join-Path $Script:ProjectRoot "tools"
    $matureTools = @(
        "documentation_generator",
        "excel_vba_tools_launcher", 
        "project_backup_system",
        "tts_dependencies_installer",
        "tts_performance_monitor"
    )
    
    foreach ($tool in $matureTools) {
        $toolPath = Join-Path $toolsPath $tool
        if (Test-Path $toolPath) {
            Write-Status "üõ†Ô∏è Outil mature $tool pr√©sent" "SUCCESS"
            $checks += $true
        } else {
            Write-Status "üõ†Ô∏è Outil mature $tool manquant" "WARNING"
            $checks += $false
        }
    }
    
    $successRate = ($checks | Where-Object { $_ }).Count / $checks.Count * 100
    Write-Status "Environnement valid√© √† $($successRate.ToString('F1'))%" $(if($successRate -ge 80){"SUCCESS"}else{"WARNING"})
    
    return $successRate -ge 80
}

# üéÆ VALIDATION GPU RTX 3090
function Test-GPU {
    Write-Status "üéÆ Validation GPU RTX 3090" "STEP"
    
    $gpuScript = Join-Path $Script:ProjectRoot "docs\RTX3090\VALIDATION_STANDARDS_RTX3090.py"
    
    if (-not (Test-Path $gpuScript)) {
        Write-Status "Script validation GPU non trouv√©: $gpuScript" "WARNING"
        return $false
    }
    
    $success = Invoke-SafeCommand -Command "python `"$gpuScript`" --detailed --save-logs" -Description "Validation GPU RTX 3090"
    
    if ($success) {
        # V√©rifier logs GPU
        $gpuLogsDir = Join-Path $Script:ProjectRoot "docs\RTX3090\logs"
        if (Test-Path $gpuLogsDir) {
            $latestLog = Get-ChildItem $gpuLogsDir -Filter "*.json" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($latestLog) {
                $logContent = Get-Content $latestLog.FullName | ConvertFrom-Json
                if ($logContent.gpu_detected -and $logContent.validation_success) {
                    Write-Status "GPU RTX 3090 valid√©e avec succ√®s (Score: $($logContent.performance_score))" "SUCCESS"
                    return $true
                }
            }
        }
    }
    
    Write-Status "Validation GPU √©chou√©e ou incompl√®te" "WARNING"
    return $false
}

# üß™ TESTS UNITAIRES
function Invoke-UnitTests {
    Write-Status "üß™ Ex√©cution tests unitaires" "STEP"
    
    $testDirs = @(
        "tests\unit",
        "tests\integration", 
        "tools\documentation_generator\tests",
        "tools\project_backup_system\tests"
    )
    
    $totalTests = 0
    $passedTests = 0
    
    foreach ($testDir in $testDirs) {
        $fullTestPath = Join-Path $Script:ProjectRoot $testDir
        
        if (Test-Path $fullTestPath) {
            Write-Status "Ex√©cution tests dans $testDir" "STEP"
            
            $testCommand = "python -m pytest `"$fullTestPath`" -v --tb=short"
            if ($Verbose) {
                $testCommand += " -s"
            }
            
            $success = Invoke-SafeCommand -Command $testCommand -Description "Tests $testDir"
            
            if ($success) {
                $passedTests++
            }
            $totalTests++
        } else {
            Write-Status "Dossier tests $testDir non trouv√©" "WARNING"
        }
    }
    
    if ($totalTests -gt 0) {
        $testSuccessRate = $passedTests / $totalTests * 100
        Write-Status "Tests r√©ussis: $passedTests/$totalTests ($($testSuccessRate.ToString('F1'))%)" $(if($testSuccessRate -ge 75){"SUCCESS"}else{"WARNING"})
        return $testSuccessRate -ge 75
    } else {
        Write-Status "Aucun test trouv√©" "WARNING"
        return $false
    }
}

# üìö G√âN√âRATION DOCUMENTATION
function Invoke-DocumentationGeneration {
    Write-Status "üìö G√©n√©ration documentation automatique" "STEP"
    
    $docGenPath = Join-Path $Script:ProjectRoot "tools\documentation_generator"
    $docScript = Join-Path $docGenPath "generate_bundle_nextgeneration.py"
    
    if (-not (Test-Path $docScript)) {
        Write-Status "G√©n√©rateur documentation non trouv√©: $docScript" "ERROR"
        return $false
    }
    
    # Test validation d'abord
    Write-Status "Test validation g√©n√©rateur documentation" "STEP"
    $validationSuccess = Invoke-SafeCommand -Command "python `"$docScript`" --mode validation" -WorkingDirectory $docGenPath -Description "Validation g√©n√©ration documentation"
    
    if (-not $validationSuccess) {
        Write-Status "Validation g√©n√©ration documentation √©chou√©e" "ERROR"
        return $false
    }
    
    # G√©n√©ration compl√®te
    Write-Status "G√©n√©ration CODE-SOURCE.md complet" "STEP"
    $generationSuccess = Invoke-SafeCommand -Command "python `"$docScript`" --mode complete" -WorkingDirectory $docGenPath -Description "G√©n√©ration documentation compl√®te"
    
    if ($generationSuccess) {
        # V√©rifier fichier g√©n√©r√©
        $codeSourcePath = Join-Path $Script:ProjectRoot "CODE-SOURCE.md"
        if (Test-Path $codeSourcePath) {
            $fileSize = (Get-Item $codeSourcePath).Length
            $fileSizeMB = [math]::Round($fileSize / 1MB, 2)
            Write-Status "CODE-SOURCE.md g√©n√©r√©: ${fileSizeMB}MB" "SUCCESS"
            
            if ($fileSize -gt 1MB) {
                return $true
            } else {
                Write-Status "Fichier CODE-SOURCE.md trop petit (< 1MB)" "WARNING"
                return $false
            }
        } else {
            Write-Status "Fichier CODE-SOURCE.md non cr√©√©" "ERROR"
            return $false
        }
    }
    
    return $false
}

# üîß VALIDATION OUTILS MATURES
function Test-MatureTools {
    Write-Status "üîß Validation outils matures" "STEP"
    
    $toolsPath = Join-Path $Script:ProjectRoot "tools"
    $toolTests = @()
    
    # Documentation Generator
    $docGenPath = Join-Path $toolsPath "documentation_generator"
    if (Test-Path $docGenPath) {
        $success = Invoke-SafeCommand -Command "python generate_bundle_nextgeneration.py --mode validation" -WorkingDirectory $docGenPath -Description "Test documentation_generator"
        $toolTests += $success
    }
    
    # Project Backup System  
    $backupPath = Join-Path $toolsPath "project_backup_system"
    if (Test-Path $backupPath) {
        $backupScript = Get-ChildItem $backupPath -Filter "*.py" | Select-Object -First 1
        if ($backupScript) {
            $success = Invoke-SafeCommand -Command "python `"$($backupScript.Name)`" --dry-run" -WorkingDirectory $backupPath -Description "Test project_backup_system"
            $toolTests += $success
        }
    }
    
    # Excel VBA Tools Launcher
    $excelPath = Join-Path $toolsPath "excel_vba_tools_launcher"
    if (Test-Path $excelPath) {
        $excelScript = Join-Path $excelPath "powershell"
        if (Test-Path $excelScript) {
            Write-Status "Excel VBA Tools structure valid√©e" "SUCCESS"
            $toolTests += $true
        } else {
            $toolTests += $false
        }
    }
    
    $successRate = ($toolTests | Where-Object { $_ }).Count / $toolTests.Count * 100
    Write-Status "Outils matures valid√©s: $($successRate.ToString('F1'))%" $(if($successRate -ge 70){"SUCCESS"}else{"WARNING"})
    
    return $successRate -ge 70
}

# üìä G√âN√âRATION RAPPORT FINAL
function New-ValidationReport {
    param(
        [hashtable]$Results,
        [timespan]$Duration
    )
    
    Write-Status "üìä G√©n√©ration rapport validation" "STEP"
    
    # Cr√©er dossier rapports
    $reportsDir = Join-Path $Script:ProjectRoot $OutputDir
    if (-not (Test-Path $reportsDir)) {
        New-Item -ItemType Directory -Path $reportsDir -Force | Out-Null
    }
    
    $reportPath = Join-Path $reportsDir "validation_report_$(Get-Date -Format 'yyyyMMdd_HHmmss').md"
    
    $report = @"
# üìä RAPPORT VALIDATION NEXTGENERATION
**Date**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')  
**Dur√©e**: $($Duration.ToString('mm\:ss'))  
**Mode**: $Mode  

## üéØ R√âSUM√â EX√âCUTIF
- **Statut global**: $(if($Results.GlobalSuccess){"‚úÖ SUCC√àS"}else{"‚ùå √âCHEC"})
- **Erreurs**: $Script:ErrorCount
- **Avertissements**: $Script:WarningCount
- **Score validation**: $($Results.Score)%

## üìà R√âSULTATS D√âTAILL√âS

### üèóÔ∏è Environnement
- **Statut**: $(if($Results.Environment){"‚úÖ PASS"}else{"‚ùå FAIL"})
- **Python disponible**: $(if(Test-Command "python"){"‚úÖ Oui"}else{"‚ùå Non"})
- **Structure projet**: Conforme NextGeneration

### üéÆ GPU RTX 3090
- **Statut**: $(if($Results.GPU){"‚úÖ PASS"}else{"‚ùå FAIL"})
- **Standards 2025**: $(if($Results.GPU){"Conformes"}else{"Non valid√©s"})

### üß™ Tests
- **Statut**: $(if($Results.Tests){"‚úÖ PASS"}else{"‚ùå FAIL"})
- **Tests unitaires**: Ex√©cut√©s
- **Tests int√©gration**: Valid√©s

### üìö Documentation  
- **Statut**: $(if($Results.Documentation){"‚úÖ PASS"}else{"‚ùå FAIL"})
- **CODE-SOURCE.md**: $(if($Results.Documentation){"G√©n√©r√© avec succ√®s"}else{"√âchec g√©n√©ration"})

### üîß Outils Matures
- **Statut**: $(if($Results.Tools){"‚úÖ PASS"}else{"‚ùå FAIL"})
- **7 outils**: $(if($Results.Tools){"Valid√©s"}else{"Probl√®mes d√©tect√©s"})

## üéØ RECOMMANDATIONS

$(if($Results.GlobalSuccess){
"### ‚úÖ VALIDATION R√âUSSIE
Le projet NextGeneration est pr√™t pour :
- Utilisation en production
- Transmission coordinateur  
- D√©ploiement agents
- G√©n√©ration documentation automatique"
}else{
"### ‚ö†Ô∏è ACTIONS REQUISES
- Corriger les erreurs identifi√©es
- Relancer validation apr√®s corrections
- V√©rifier infrastructure manquante
- Consulter logs d√©taill√©s"})

## üìã CHECKLIST FINALE

- [$(if($Results.Environment){"x"}else{" "})] Environnement valid√©
- [$(if($Results.GPU){"x"}else{" "})] GPU RTX 3090 configur√©  
- [$(if($Results.Tests){"x"}else{" "})] Tests ex√©cut√©s avec succ√®s
- [$(if($Results.Documentation){"x"}else{" "})] Documentation g√©n√©r√©e
- [$(if($Results.Tools){"x"}else{" "})] Outils matures fonctionnels

---
**G√©n√©r√© par**: validate_and_document.ps1  
**NextGeneration Platform** - Standards SuperWhisper_V6 adapt√©s
"@

    $report | Out-File -FilePath $reportPath -Encoding UTF8
    Write-Status "Rapport sauvegard√©: $reportPath" "SUCCESS"
    
    return $reportPath
}

# üöÄ FONCTION PRINCIPALE
function Start-ValidationAndDocumentation {
    Write-Status "üöÄ D√âBUT VALIDATION ET DOCUMENTATION NEXTGENERATION" "STEP"
    Write-Status "Mode: $Mode | Verbose: $Verbose | Logs: $SaveLogs" "INFO"
    
    # Cr√©er dossier rapports si n√©cessaire
    $reportsDir = Join-Path $Script:ProjectRoot $OutputDir
    if (-not (Test-Path $reportsDir)) {
        New-Item -ItemType Directory -Path $reportsDir -Force | Out-Null
    }
    
    # R√©sultats validation
    $results = @{
        Environment = $false
        GPU = $false  
        Tests = $false
        Documentation = $false
        Tools = $false
        GlobalSuccess = $false
        Score = 0
    }
    
    try {
        # Phase 1: Environnement
        if ($Mode -in @("full", "validation", "quick")) {
            $results.Environment = Test-Environment
        }
        
        # Phase 2: GPU RTX 3090
        if ($Mode -in @("full", "validation") -and (-not $Force -or $results.Environment)) {
            $results.GPU = Test-GPU
        }
        
        # Phase 3: Tests
        if ($Mode -in @("full", "validation") -and (-not $Force -or $results.Environment)) {
            $results.Tests = Invoke-UnitTests
        }
        
        # Phase 4: Documentation
        if ($Mode -in @("full", "documentation")) {
            $results.Documentation = Invoke-DocumentationGeneration
        }
        
        # Phase 5: Outils matures
        if ($Mode -in @("full", "validation", "quick")) {
            $results.Tools = Test-MatureTools
        }
        
        # Calcul score global
        $scoreComponents = @($results.Environment, $results.GPU, $results.Tests, $results.Documentation, $results.Tools)
        $results.Score = ($scoreComponents | Where-Object { $_ }).Count / $scoreComponents.Count * 100
        $results.GlobalSuccess = $results.Score -ge 80
        
        # Rapport final
        $duration = (Get-Date) - $Script:StartTime
        $reportPath = New-ValidationReport -Results $results -Duration $duration
        
        # R√©sum√© final
        Write-Status "üèÅ VALIDATION TERMIN√âE" "STEP"
        Write-Status "Score global: $($results.Score.ToString('F1'))%" $(if($results.GlobalSuccess){"SUCCESS"}else{"WARNING"})
        Write-Status "Dur√©e totale: $($duration.ToString('mm\:ss'))" "INFO"
        Write-Status "Rapport: $reportPath" "INFO"
        
        if ($results.GlobalSuccess) {
            Write-Host "`n‚úÖ Pipeline de validation et documentation termin√© avec succ√®s !" -ForegroundColor Green
            exit 0
        } else {
            Write-Status "‚ö†Ô∏è VALIDATION INCOMPL√àTE - ACTIONS REQUISES" "WARNING"
            if (-not $Force) {
                exit 1
            }
        }
        
    } catch {
        Write-Error "‚ùå Le pipeline a √©chou√©."
        Write-Error $_.Exception.Message
        exit 1
    }
}

# üìñ AFFICHAGE AIDE
function Show-Help {
    Write-Host @"
üöÄ SCRIPT VALIDATION ET DOCUMENTATION NEXTGENERATION

USAGE:
    .\validate_and_document.ps1 [OPTIONS]

MODES:
    -Mode full          Validation compl√®te + documentation (d√©faut)
    -Mode validation    Tests et validations uniquement  
    -Mode documentation Documentation uniquement
    -Mode quick         Validation rapide (environnement + outils)

OPTIONS:
    -Verbose           Mode verbeux avec d√©tails
    -SaveLogs          Sauvegarder logs dans fichier
    -Force             Continuer m√™me en cas d'erreurs
    -OutputDir PATH    Dossier rapports (d√©faut: reports)

EXEMPLES:
    .\validate_and_document.ps1
    .\validate_and_document.ps1 -Mode validation -Verbose
    .\validate_and_document.ps1 -Mode documentation -SaveLogs
    .\validate_and_document.ps1 -Mode quick -Force

DESCRIPTION:
    Ce script automatise la validation compl√®te de NextGeneration:
    - Validation environnement et infrastructure
    - Tests GPU RTX 3090 selon standards 2025  
    - Ex√©cution tests unitaires et int√©gration
    - G√©n√©ration automatique CODE-SOURCE.md
    - Validation outils matures (7 outils)
    - Rapport d√©taill√© avec recommandations

R√âF√âRENCE:
    Transposition SuperWhisper_V6 ‚Üí NextGeneration
    Standards adapt√©s 2025
"@ -ForegroundColor Cyan
}

# üéØ POINT D'ENTR√âE
if ($args -contains "-h" -or $args -contains "--help" -or $args -contains "help") {
    Show-Help
    exit 0
}

# Lancement validation
Start-ValidationAndDocumentation 
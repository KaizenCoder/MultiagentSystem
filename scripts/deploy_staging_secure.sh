#!/bin/bash
# Script de d√©ploiement staging s√©curis√©
# scripts/deploy_staging_secure.sh

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
STAGING_ENV="${STAGING_ENV:-staging}"
DOCKER_REGISTRY="${DOCKER_REGISTRY:-localhost:5000}"
IMAGE_TAG="${IMAGE_TAG:-staging-$(date +%Y%m%d-%H%M%S)}"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifications pr√©alables
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker non trouv√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose non trouv√©"
        exit 1
    fi
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [[ ! -f "$PROJECT_ROOT/docker-compose.yml" ]]; then
        log_error "Fichier docker-compose.yml non trouv√© dans $PROJECT_ROOT"
        exit 1
    fi
    
    log_success "Pr√©requis OK"
}

# Validation s√©curit√© pre-d√©ploiement
run_security_validation() {
    log_info "Validation s√©curit√© pre-d√©ploiement..."
    
    cd "$PROJECT_ROOT"
    
    # Ex√©cuter le script de validation s√©curit√©
    if [[ -f "$SCRIPT_DIR/validate_security_fixes.py" ]]; then
        python3 "$SCRIPT_DIR/validate_security_fixes.py" --quick
        if [[ $? -ne 0 ]]; then
            log_error "Validation s√©curit√© √©chou√©e"
            exit 1
        fi
    else
        log_warning "Script de validation s√©curit√© non trouv√©, skip"
    fi
    
    log_success "Validation s√©curit√© OK"
}

# Build s√©curis√© des images
build_secure_images() {
    log_info "Build s√©curis√© des images Docker..."
    
    cd "$PROJECT_ROOT"
    
    # Build de l'orchestrateur avec optimisations s√©curit√©
    log_info "Build orchestrator:$IMAGE_TAG..."
    docker build \
        --no-cache \
        --pull \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --security-opt no-new-privileges:true \
        -t "orchestrator:$IMAGE_TAG" \
        -f orchestrator/Dockerfile \
        orchestrator/
    
    # Build de l'API m√©moire
    log_info "Build memory_api:$IMAGE_TAG..."
    docker build \
        --no-cache \
        --pull \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --security-opt no-new-privileges:true \
        -t "memory_api:$IMAGE_TAG" \
        -f memory_api/Dockerfile \
        memory_api/
    
    log_success "Images build√©es avec succ√®s"
}

# Scan s√©curit√© des images
scan_image_security() {
    log_info "Scan s√©curit√© des images Docker..."
    
    # V√©rifier si Trivy est disponible
    if command -v trivy &> /dev/null; then
        log_info "Scan avec Trivy..."
        
        # Scan orchestrator
        trivy image --severity HIGH,CRITICAL --exit-code 1 "orchestrator:$IMAGE_TAG"
        if [[ $? -ne 0 ]]; then
            log_error "Vuln√©rabilit√©s critiques d√©tect√©es dans orchestrator"
            exit 1
        fi
        
        # Scan memory_api
        trivy image --severity HIGH,CRITICAL --exit-code 1 "memory_api:$IMAGE_TAG"
        if [[ $? -ne 0 ]]; then
            log_error "Vuln√©rabilit√©s critiques d√©tect√©es dans memory_api"
            exit 1
        fi
        
        log_success "Scan Trivy OK"
    else
        log_warning "Trivy non disponible, skip scan s√©curit√© des images"
    fi
}

# Setup environnement staging
setup_staging_environment() {
    log_info "Setup environnement staging..."
    
    cd "$PROJECT_ROOT"
    
    # Copier la configuration staging
    if [[ ! -f ".env.staging" ]]; then
        log_warning "Fichier .env.staging non trouv√©, utilisation de .env.example"
        cp env.example .env.staging
    fi
    
    # Cr√©er le r√©seau Docker si n√©cessaire
    docker network create orchestrator-staging-network 2>/dev/null || true
    
    # Cr√©er les volumes persistants
    docker volume create orchestrator-staging-db 2>/dev/null || true
    docker volume create orchestrator-staging-chromadb 2>/dev/null || true
    
    log_success "Environnement staging configur√©"
}

# D√©ploiement avec Docker Compose
deploy_services() {
    log_info "D√©ploiement des services staging..."
    
    cd "$PROJECT_ROOT"
    
    # Arr√™ter les services existants
    docker-compose -f docker-compose.yml -f docker-compose.staging.yml down --remove-orphans
    
    # D√©marrer les services en mode d√©tach√©
    ORCHESTRATOR_IMAGE_TAG="$IMAGE_TAG" \
    MEMORY_API_IMAGE_TAG="$IMAGE_TAG" \
    docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d
    
    log_success "Services d√©ploy√©s"
}

# Health checks post-d√©ploiement
run_health_checks() {
    log_info "Health checks post-d√©ploiement..."
    
    # Attendre que les services d√©marrent
    log_info "Attente du d√©marrage des services (30s)..."
    sleep 30
    
    # V√©rifier le health check de l'orchestrateur
    for i in {1..5}; do
        if curl -f -s http://localhost:8002/health > /dev/null; then
            log_success "Orchestrateur healthy"
            break
        else
            if [[ $i -eq 5 ]]; then
                log_error "Orchestrateur non accessible apr√®s 5 tentatives"
                show_service_logs
                exit 1
            fi
            log_warning "Tentative $i/5 √©chou√©e, retry dans 10s..."
            sleep 10
        fi
    done
    
    # V√©rifier l'API m√©moire
    for i in {1..5}; do
        if curl -f -s http://localhost:8001/health > /dev/null; then
            log_success "Memory API healthy"
            break
        else
            if [[ $i -eq 5 ]]; then
                log_error "Memory API non accessible apr√®s 5 tentatives"
                show_service_logs
                exit 1
            fi
            log_warning "Memory API tentative $i/5 √©chou√©e, retry dans 10s..."
            sleep 10
        fi
    done
    
    log_success "Tous les health checks OK"
}

# Tests end-to-end post-d√©ploiement
run_e2e_tests() {
    log_info "Tests end-to-end post-d√©ploiement..."
    
    cd "$PROJECT_ROOT"
    
    # Tests de base avec pytest
    if [[ -d "tests/integration" ]]; then
        python3 -m pytest tests/integration/ -v --tb=short -m "not slow" --maxfail=3
        if [[ $? -ne 0 ]]; then
            log_error "Tests E2E √©chou√©s"
            show_service_logs
            exit 1
        fi
        log_success "Tests E2E OK"
    else
        log_warning "R√©pertoire tests/integration non trouv√©, skip E2E"
    fi
}

# Tests de s√©curit√© en environnement staging
run_staging_security_tests() {
    log_info "Tests de s√©curit√© staging..."
    
    # Test de base avec curl
    log_info "Test de protection RCE..."
    response=$(curl -s -X POST http://localhost:8002/analyze \
        -H "Content-Type: application/json" \
        -d '{"task_description": "test", "file_content": "eval(\"__import__(\\\"os\\\").system(\\\"id\\\")\")"}' \
        -w "%{http_code}")
    
    if [[ "$response" =~ (400|422|200) ]]; then
        log_success "Protection RCE fonctionnelle"
    else
        log_error "Protection RCE peut-√™tre d√©faillante (code: $response)"
        exit 1
    fi
    
    # Test SSRF
    log_info "Test de protection SSRF..."
    response=$(curl -s -X POST http://localhost:8002/query \
        -H "Content-Type: application/json" \
        -d '{"url": "http://localhost:22"}' \
        -w "%{http_code}")
    
    if [[ "$response" =~ (400|422|403) ]]; then
        log_success "Protection SSRF fonctionnelle"
    else
        log_warning "V√©rifier la protection SSRF (code: $response)"
    fi
}

# Affichage des logs en cas d'erreur
show_service_logs() {
    log_info "Logs des services pour debug..."
    
    echo "=== Logs Orchestrateur ==="
    docker-compose logs --tail=50 orchestrator
    
    echo "=== Logs Memory API ==="
    docker-compose logs --tail=50 memory_api
    
    echo "=== Logs PostgreSQL ==="
    docker-compose logs --tail=20 postgres
}

# Fonction de rollback
rollback_deployment() {
    log_warning "Rollback du d√©ploiement..."
    
    cd "$PROJECT_ROOT"
    docker-compose -f docker-compose.yml -f docker-compose.staging.yml down
    
    # Red√©marrer avec les images pr√©c√©dentes si disponibles
    if docker images | grep -q "orchestrator:previous"; then
        docker tag orchestrator:previous orchestrator:latest
        docker tag memory_api:previous memory_api:latest
        docker-compose up -d
        log_info "Rollback vers les images pr√©c√©dentes effectu√©"
    else
        log_warning "Pas d'images pr√©c√©dentes disponibles pour rollback"
    fi
}

# Gestion des signaux pour cleanup
cleanup() {
    log_info "Cleanup en cours..."
    # Pas de cleanup automatique pour √©viter de casser un d√©ploiement en cours
}

trap cleanup EXIT

# ============================================================================
# EX√âCUTION PRINCIPALE
# ============================================================================

main() {
    log_info "üöÄ D√âPLOIEMENT STAGING S√âCURIS√â - Quick Wins Sprint 1"
    echo "========================================================"
    echo "Project: $PROJECT_ROOT"
    echo "Environment: $STAGING_ENV"
    echo "Image Tag: $IMAGE_TAG"
    echo "========================================================"
    
    # Sauvegarder les images actuelles pour rollback
    if docker images | grep -q "orchestrator:latest"; then
        docker tag orchestrator:latest orchestrator:previous 2>/dev/null || true
        docker tag memory_api:latest memory_api:previous 2>/dev/null || true
    fi
    
    # Ex√©cution des √©tapes
    check_prerequisites
    run_security_validation
    build_secure_images
    scan_image_security
    setup_staging_environment
    deploy_services
    run_health_checks
    run_e2e_tests
    run_staging_security_tests
    
    log_success "üéâ D√âPLOIEMENT STAGING R√âUSSI"
    echo ""
    echo "Services accessibles:"
    echo "  ‚Ä¢ Orchestrateur: http://localhost:8002"
    echo "  ‚Ä¢ Memory API: http://localhost:8001"
    echo "  ‚Ä¢ Health Check: curl http://localhost:8002/health"
    echo ""
    echo "Pour les logs: docker-compose logs -f [service]"
    echo "Pour arr√™ter: docker-compose down"
}

# V√©rifier les arguments
if [[ "${1:-}" == "--rollback" ]]; then
    rollback_deployment
    exit 0
elif [[ "${1:-}" == "--logs" ]]; then
    show_service_logs
    exit 0
elif [[ "${1:-}" == "--help" ]]; then
    echo "Usage: $0 [--rollback|--logs|--help]"
    echo ""
    echo "Options:"
    echo "  --rollback    Rollback vers les images pr√©c√©dentes"
    echo "  --logs        Afficher les logs des services"
    echo "  --help        Afficher cette aide"
    echo ""
    echo "Variables d'environnement:"
    echo "  STAGING_ENV       Nom de l'environnement (d√©faut: staging)"
    echo "  IMAGE_TAG         Tag des images Docker (d√©faut: staging-YYYYMMDD-HHMMSS)"
    echo "  DOCKER_REGISTRY   Registry Docker (d√©faut: localhost:5000)"
    exit 0
fi

# Ex√©cution principale
main "$@"

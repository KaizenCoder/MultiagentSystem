#!/usr/bin/env python3
"""
ENHANCED MAINTENANCE ORCHESTRATOR V2.0
======================================

Orchestrateur avanc√© d'√©quipe de maintenance avec :
- Syst√®me de backups incr√©mentaux horodat√©s
- Validation s√©curis√©e multi-niveaux
- Orchestration parall√®le intelligente
- Gestion de scope flexible (fichier/r√©pertoire/projet)
- Strat√©gies de r√©cup√©ration automatique
- M√©thodologie M-T-D-V (Maintenance-Test-Documentation-Validation)

Author: √âquipe NextGeneration
Version: 2.0.0 - Enhanced Safety & Methodology
"""

import asyncio
import sys
import logging
import json
import hashlib
import shutil
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from concurrent.futures import ThreadPoolExecutor
import tempfile

# Configuration robuste du chemin
PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

try:
    # Import des agents de maintenance de base
    try:
        from agents.agent_MAINTENANCE_00_chef_equipe_coordinateur import AgentMAINTENANCE00ChefEquipeCoordinateur
    except ImportError:
        AgentMAINTENANCE00ChefEquipeCoordinateur = None
        
    try:
        from agents.agent_MAINTENANCE_01_analyseur_structure import AgentMAINTENANCE01AnalyseurStructure
    except ImportError:
        AgentMAINTENANCE01AnalyseurStructure = None
        
    try:
        from agents.agent_MAINTENANCE_04_testeur_anti_faux_agents import AgentMAINTENANCE04TesteurAntiFauxAgents
    except ImportError:
        AgentMAINTENANCE04TesteurAntiFauxAgents = None
        
    try:
        from agents.agent_MAINTENANCE_05_documenteur_peer_reviewer import AgentMAINTENANCE05DocumenteurPeerReviewer
    except ImportError:
        AgentMAINTENANCE05DocumenteurPeerReviewer = None
        
    try:
        from agents.agent_MAINTENANCE_06_validateur_final import AgentMAINTENANCE06ValidateurFinal
    except ImportError:
        AgentMAINTENANCE06ValidateurFinal = None
        
    try:
        from agents.agent_MAINTENANCE_09_analyseur_securite import AgentMAINTENANCE09AnalyseurSecurite
    except ImportError:
        AgentMAINTENANCE09AnalyseurSecurite = None
        
    try:
        from agents.agent_MAINTENANCE_10_auditeur_qualite_normes import AgentMAINTENANCE10AuditeurQualiteNormes
    except ImportError:
        AgentMAINTENANCE10AuditeurQualiteNormes = None
        
    try:
        from agents.agent_META_AUDITEUR_UNIVERSEL import AgentMETAAuditeurUniversel
    except ImportError:
        AgentMETAAuditeurUniversel = None
    
    # Import des nouveaux agents de maintenance cibl√©s (avec fallback)
    try:
        from agents.agent_SECURITY_21_supply_chain_enterprise import Agent21SecurityEnterprise, create_agent_21_security
    except ImportError:
        Agent21SecurityEnterprise = None
        create_agent_21_security = None
        
    try:
        from agents.agent_STORAGE_24_enterprise_manager import Agent24StorageEnterprise, create_agent_24_storage
    except ImportError:
        Agent24StorageEnterprise = None
        create_agent_24_storage = None
        
    try:
        from agents.agent_test_models_integration import AgentTestModelsIntegration
    except ImportError:
        AgentTestModelsIntegration = None
        
    try:
        from agents.agent_testeur_agents_complet import AgentTesteurAgents, create_agent_testeur_agents
    except ImportError:
        AgentTesteurAgents = None
        create_agent_testeur_agents = None
    
    # Import core avec fallback
    try:
        from core.agent_factory_architecture import Agent, Task, Result
    except ImportError:
        # Fallback classes simplifi√©es
        class Agent:
            def __init__(self, agent_type: str, **config):
                self.agent_id = f"agent_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                self.agent_type = agent_type
                self.config = config
            async def startup(self): pass
            async def shutdown(self): pass
            async def health_check(self): return {"status": "healthy"}
            async def execute_task(self, task): return Result(success=True, data={})
        
        class Task:
            def __init__(self, id=None, **kwargs):
                self.id = id
                for key, value in kwargs.items():
                    setattr(self, key, value)
        
        class Result:
            def __init__(self, success: bool, data: Any = None, error: str = None):
                self.success = success
                self.data = data or {}
                self.error = error
    
    # V√©rification de la disponibilit√© du syst√®me de monitoring avanc√© (Phase 2)
    try:
        from core.monitoring.parallel_task_manager import ParallelTaskManager
        from core.monitoring.cache_manager import IntelligentCache
        from core.monitoring.metrics_collector import AdvancedMetricsCollector
        from core.monitoring.circuit_breaker import CircuitBreakerManager
        ENHANCED_MONITORING_AVAILABLE = True
    except ImportError:
        ENHANCED_MONITORING_AVAILABLE = False
        # Fallback classes vides
        class ParallelTaskManager:
            def __init__(self, **kwargs): pass
            async def startup(self): pass
            async def shutdown(self): pass
        
        class IntelligentCache:
            def __init__(self, **kwargs): pass
            async def startup(self): pass
            async def shutdown(self): pass
        
        class AdvancedMetricsCollector:
            def __init__(self, **kwargs): pass
            async def startup(self): pass
            async def shutdown(self): pass
            async def get_current_metrics(self): return {}
        
        class CircuitBreakerManager:
            def __init__(self, **kwargs): pass
            async def startup(self): pass
            async def shutdown(self): pass
            async def can_execute(self, agent_name): return True
            async def record_success(self, agent_name): pass
            async def record_failure(self, agent_name): pass
        
except Exception as e:
    print(f"‚ùå Erreur d'importation: {e}")
    print("‚ö†Ô∏è Poursuite en mode d√©grad√©...")

# Configuration logging avanc√©e
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(PROJECT_ROOT / "logs" / f"maintenance_orchestrator_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class BackupEntry:
    """Entr√©e de backup horodat√©e"""
    timestamp: str
    file_path: str
    backup_path: str
    operation: str
    agent_id: str
    checksum_before: str
    checksum_after: Optional[str] = None
    success: bool = False

@dataclass
class ValidationResult:
    """R√©sultat de validation compl√®te"""
    syntax_valid: bool
    security_score: float
    quality_score: float
    functional_test: bool
    issues: List[str]
    recommendations: List[str]

@dataclass
class MaintenanceSession:
    """Session de maintenance compl√®te"""
    session_id: str
    start_time: str
    target_scope: str
    scope_type: str  # file, directory, project
    agents_used: List[str]
    iterations: List[Dict[str, Any]]
    backups: List[BackupEntry]
    final_status: str
    total_duration: Optional[float] = None

class EnhancedMaintenanceOrchestrator:
    """
    Orchestrateur de maintenance avanc√© NextGeneration v2.0
    
    Capacit√©s principales :
    - Backup incr√©mental automatique avec historique
    - Validation s√©curis√©e multi-agents 
    - Orchestration parall√®le et s√©quentielle
    - Scope flexible (fichier/r√©pertoire/projet complet)
    - Strat√©gies de r√©cup√©ration et rollback automatique
    - M√©thodologie M-T-D-V compl√®te
    """
    
    def __init__(self, target_quality_score: int = 95, max_iterations: int = 5):
        self.target_quality_score = target_quality_score
        self.max_iterations = max_iterations
        self.session_id = f"maintenance_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # R√©pertoires de travail
        self.backup_dir = PROJECT_ROOT / "backups" / self.session_id
        self.reports_dir = PROJECT_ROOT / "reports" / "maintenance" / self.session_id
        self.logs_dir = PROJECT_ROOT / "logs"
        
        # Cr√©ation des r√©pertoires
        for dir_path in [self.backup_dir, self.reports_dir, self.logs_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        # Session de maintenance
        self.session = MaintenanceSession(
            session_id=self.session_id,
            start_time=datetime.now().isoformat(),
            target_scope="",
            scope_type="",
            agents_used=[],
            iterations=[],
            backups=[],
            final_status="INITIALIZED"
        )
        
        # Agents de l'√©quipe de maintenance
        self.agents = {}
        
        # Infrastructure avanc√©e Phase 2 si disponible
        self.parallel_manager = None
        self.intelligent_cache = None
        self.metrics_collector = None
        self.circuit_breaker = None
        
        # Agents cibles pour la mission de maintenance
        self.target_agents_paths = [
            PROJECT_ROOT / "agents" / "agent_SECURITY_21_supply_chain_enterprise.py",
            PROJECT_ROOT / "agents" / "agent_STORAGE_24_enterprise_manager.py", 
            PROJECT_ROOT / "agents" / "agent_test_models_integration.py",
            PROJECT_ROOT / "agents" / "agent_testeur_agents_complet.py"
        ]
        
    async def initialize_maintenance_team(self):
        """Initialise l'√©quipe de maintenance s√©curis√©e avec nouvelles capacit√©s"""
        logger.info("üöÄ Initialisation de l'√©quipe de maintenance avanc√©e...")
        
        # Initialisation infrastructure Phase 2 si disponible
        if ENHANCED_MONITORING_AVAILABLE:
            await self._initialize_enhanced_infrastructure()
        
        agent_configs = {}
        
        # Agents de maintenance de base (avec v√©rification disponibilit√©)
        if AgentMAINTENANCE00ChefEquipeCoordinateur:
            agent_configs["chef_coordinateur"] = AgentMAINTENANCE00ChefEquipeCoordinateur
        if AgentMAINTENANCE01AnalyseurStructure:
            agent_configs["analyseur_structure"] = AgentMAINTENANCE01AnalyseurStructure
        if AgentMAINTENANCE04TesteurAntiFauxAgents:
            agent_configs["testeur_validation"] = AgentMAINTENANCE04TesteurAntiFauxAgents
        if AgentMAINTENANCE05DocumenteurPeerReviewer:
            agent_configs["documenteur"] = AgentMAINTENANCE05DocumenteurPeerReviewer
        if AgentMAINTENANCE06ValidateurFinal:
            agent_configs["validateur_final"] = AgentMAINTENANCE06ValidateurFinal
        if AgentMAINTENANCE09AnalyseurSecurite:
            agent_configs["analyseur_securite"] = AgentMAINTENANCE09AnalyseurSecurite
        if AgentMAINTENANCE10AuditeurQualiteNormes:
            agent_configs["auditeur_qualite"] = AgentMAINTENANCE10AuditeurQualiteNormes
        if AgentMETAAuditeurUniversel:
            agent_configs["meta_orchestrateur"] = AgentMETAAuditeurUniversel
        
        # Nouveaux agents enterprise sp√©cialis√©s (avec v√©rification disponibilit√©)
        if create_agent_21_security:
            agent_configs["security_enterprise"] = lambda: create_agent_21_security()
        if create_agent_24_storage:
            agent_configs["storage_enterprise"] = lambda: create_agent_24_storage()
        if AgentTestModelsIntegration:
            agent_configs["test_models_integration"] = lambda: AgentTestModelsIntegration()
        if create_agent_testeur_agents:
            agent_configs["testeur_agents"] = lambda: create_agent_testeur_agents(safe_mode=True, test_timeout=30)
        
        if not agent_configs:
            logger.error("‚ùå Aucun agent disponible - V√©rifiez les imports")
            raise Exception("Aucun agent de maintenance disponible")
        
        # Initialisation parall√®le des agents
        for agent_name, agent_factory in agent_configs.items():
            try:
                if callable(agent_factory) and not isinstance(agent_factory, type):
                    # Factory function
                    agent = agent_factory()
                else:
                    # Class constructor
                    agent = agent_factory(id=f"{agent_name}_{self.session_id}")
                
                await agent.startup()
                
                # Test de sant√© obligatoire
                health = await agent.health_check()
                if health.get("status") != "healthy":
                    raise Exception(f"Agent {agent_name} en mauvais √©tat: {health}")
                
                self.agents[agent_name] = agent
                self.session.agents_used.append(agent_name)
                logger.info(f"‚úÖ Agent {agent_name} initialis√© et valid√©")
                
            except Exception as e:
                logger.error(f"‚ùå √âchec initialisation agent {agent_name}: {e}")
                # Ne pas arr√™ter pour les agents enterprise si les anciens marchent
                if agent_name not in ["security_enterprise", "storage_enterprise", "test_models_integration", "testeur_agents"]:
                    raise
                else:
                    logger.warning(f"‚ö†Ô∏è Agent enterprise {agent_name} ignor√©, poursuite avec agents classiques")
        
        logger.info(f"üéØ √âquipe de {len(self.agents)} agents pr√™te pour maintenance s√©curis√©e")
        
    async def _initialize_enhanced_infrastructure(self):
        """Initialise l'infrastructure de monitoring avanc√©e Phase 2"""
        try:
            logger.info("üöÄ Initialisation infrastructure monitoring Phase 2...")
            
            # Parallel Task Manager pour orchestration parall√®le
            self.parallel_manager = ParallelTaskManager(
                max_workers=3,
                timeout_seconds=300
            )
            await self.parallel_manager.startup()
            
            # Cache intelligent pour optimisation
            self.intelligent_cache = IntelligentCache(
                max_size=1000,
                ttl_seconds=3600
            )
            await self.intelligent_cache.startup()
            
            # Collecteur de m√©triques avanc√©
            self.metrics_collector = AdvancedMetricsCollector()
            await self.metrics_collector.startup()
            
            # Circuit breaker pour protection
            self.circuit_breaker = CircuitBreakerManager()
            await self.circuit_breaker.startup()
            
            logger.info("‚úÖ Infrastructure monitoring Phase 2 initialis√©e")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation infrastructure Phase 2: {e}")
            # D√©sactiver le monitoring avanc√© si √©chec
            global ENHANCED_MONITORING_AVAILABLE
            ENHANCED_MONITORING_AVAILABLE = False
            logger.warning("‚ö†Ô∏è Basculement vers mode monitoring basique")

    def create_incremental_backup(self, file_path: Path, operation: str, agent_id: str) -> BackupEntry:
        """Cr√©e un backup incr√©mental horodat√©"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')
        
        # Calcul checksum avant modification
        content_before = file_path.read_text(encoding='utf-8') if file_path.exists() else ""
        checksum_before = hashlib.sha256(content_before.encode()).hexdigest()
        
        # Cr√©ation du backup
        backup_path = self.backup_dir / f"{file_path.stem}_{timestamp}_{operation}.backup"
        if file_path.exists():
            shutil.copy2(file_path, backup_path)
        
        backup_entry = BackupEntry(
            timestamp=timestamp,
            file_path=str(file_path),
            backup_path=str(backup_path),
            operation=operation,
            agent_id=agent_id,
            checksum_before=checksum_before
        )
        
        self.session.backups.append(backup_entry)
        logger.info(f"üíæ Backup cr√©√©: {backup_path.name}")
        return backup_entry

    def finalize_backup(self, backup_entry: BackupEntry, success: bool):
        """Finalise une entr√©e de backup avec checksum post-modification"""
        file_path = Path(backup_entry.file_path)
        if file_path.exists():
            content_after = file_path.read_text(encoding='utf-8')
            backup_entry.checksum_after = hashlib.sha256(content_after.encode()).hexdigest()
        
        backup_entry.success = success
        logger.info(f"‚úÖ Backup finalis√©: {'succ√®s' if success else '√©chec'}")

    async def validate_comprehensive(self, target_path: Path) -> ValidationResult:
        """Validation compl√®te multi-agents"""
        logger.info("üîç Validation compl√®te en cours...")
        
        issues = []
        recommendations = []
        
        # 1. Validation syntaxique
        try:
            if target_path.is_file() and target_path.suffix == '.py':
                compile(target_path.read_text(encoding='utf-8'), str(target_path), 'exec')
                syntax_valid = True
            else:
                syntax_valid = True  # Pour r√©pertoires
        except SyntaxError as e:
            syntax_valid = False
            issues.append(f"Erreur syntaxe: {e}")
        
        # 2. Validation s√©curit√©
        try:
            security_task = Task(
                id="security_validation",
                params={"target_path": str(target_path)}
            )
            security_result = await self.agents["analyseur_securite"].execute_task(security_task)
            security_score = security_result.data.get("security_score", 0.0) if security_result.success else 0.0
            
            if security_result.success and security_result.data.get("issues"):
                issues.extend([f"S√©curit√©: {issue}" for issue in security_result.data["issues"]])
        except Exception as e:
            security_score = 0.0
            issues.append(f"Erreur validation s√©curit√©: {e}")
        
        # 3. Validation qualit√©
        try:
            quality_task = Task(
                id="quality_validation", 
                params={"target_path": str(target_path)}
            )
            quality_result = await self.agents["auditeur_qualite"].execute_task(quality_task)
            quality_score = quality_result.data.get("quality_score", 0.0) if quality_result.success else 0.0
            
            if quality_result.success and quality_result.data.get("recommendations"):
                recommendations.extend(quality_result.data["recommendations"])
        except Exception as e:
            quality_score = 0.0
            issues.append(f"Erreur validation qualit√©: {e}")
        
        # 4. Test fonctionnel (pour fichiers agents)
        functional_test = True
        if target_path.is_file() and target_path.name.startswith('agent_'):
            try:
                test_task = Task(
                    id="functional_test",
                    params={"agent_path": str(target_path)}
                )
                test_result = await self.agents["testeur_validation"].execute_task(test_task)
                functional_test = test_result.success and test_result.data.get("is_functional", False)
                
                if not functional_test:
                    issues.append("√âchec test fonctionnel agent")
            except Exception as e:
                functional_test = False
                issues.append(f"Erreur test fonctionnel: {e}")
        
        return ValidationResult(
            syntax_valid=syntax_valid,
            security_score=security_score,
            quality_score=quality_score,
            functional_test=functional_test,
            issues=issues,
            recommendations=recommendations
        )

    async def execute_maintenance_cycle(self, target_path: Path, scope_type: str) -> Dict[str, Any]:
        """Ex√©cute un cycle de maintenance M-T-D-V complet avec nouvelles capacit√©s"""
        logger.info(f"üîÑ D√©but cycle de maintenance avanc√©: {target_path}")
        
        cycle_start = datetime.now()
        iteration_results = []
        
        # Backup initial
        initial_backup = self.create_incremental_backup(target_path, "INITIAL", "system")
        
        current_score = 0
        iteration = 0
        
        # D√©terminer si nous travaillons sur les agents cibles sp√©cifi√©s
        is_target_agent = any(str(target_path).endswith(str(path.name)) for path in self.target_agents_paths)
        
        while current_score < self.target_quality_score and iteration < self.max_iterations:
            iteration += 1
            logger.info(f"üîÑ It√©ration {iteration}/{self.max_iterations}")
            
            iteration_start = datetime.now()
            iteration_data = {
                "iteration": iteration,
                "start_time": iteration_start.isoformat(),
                "operations": [],
                "target_agent": is_target_agent,
                "enhanced_workflow": ENHANCED_MONITORING_AVAILABLE
            }
            
            try:
                # Utilisation du workflow avanc√© pour les agents cibl√©s
                if is_target_agent and ENHANCED_MONITORING_AVAILABLE:
                    maintenance_result = await self._execute_enhanced_maintenance_workflow(target_path, scope_type, iteration)
                else:
                    maintenance_result = await self._execute_standard_maintenance_workflow(target_path, scope_type, iteration)
                
                # T - TEST: Validation et tests avec agents sp√©cialis√©s
                logger.info("üß™ Phase T (Test): Validation avanc√©e")
                validation = await self._validate_comprehensive_with_specialized_agents(target_path, is_target_agent)
                current_score = min(validation.security_score, validation.quality_score)
                
                # D - DOCUMENTATION: Rapports avec nouveau syst√®me
                logger.info("üìù Phase D (Documentation): G√©n√©ration rapports avanc√©s")
                doc_result = await self._generate_advanced_documentation(target_path, validation, iteration, is_target_agent)
                
                # V - VALIDATION: Validation finale enterprise
                logger.info("‚úÖ Phase V (Validation): Validation finale avanc√©e")
                final_result = await self._perform_enterprise_validation(target_path, validation, is_target_agent)
                
                # Enregistrement des r√©sultats
                iteration_data.update({
                    "end_time": datetime.now().isoformat(),
                    "duration": (datetime.now() - iteration_start).total_seconds(),
                    "current_score": current_score,
                    "validation": asdict(validation),
                    "maintenance_success": maintenance_result.get("success", False),
                    "documentation_success": doc_result.get("success", False),
                    "final_validation_success": final_result.get("success", False),
                    "agents_used": maintenance_result.get("agents_used", [])
                })
                
                iteration_results.append(iteration_data)
                
                logger.info(f"üìä Score actuel: {current_score:.1f}/{self.target_quality_score}")
                
                # Condition de sortie
                if current_score >= self.target_quality_score:
                    logger.info("üéâ Objectif de qualit√© atteint!")
                    break
                    
                if not maintenance_result.get("success", False):
                    logger.warning("‚ö†Ô∏è Pas d'am√©lioration possible, arr√™t des it√©rations")
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå Erreur durant l'it√©ration {iteration}: {e}")
                iteration_data.update({
                    "error": str(e),
                    "end_time": datetime.now().isoformat()
                })
                iteration_results.append(iteration_data)
                break
        
        # Finalisation
        self.finalize_backup(initial_backup, current_score >= self.target_quality_score)
        
        cycle_duration = (datetime.now() - cycle_start).total_seconds()
        
        return {
            "success": current_score >= self.target_quality_score,
            "final_score": current_score,
            "iterations": len(iteration_results),
            "duration": cycle_duration,
            "iteration_details": iteration_results,
            "target_achieved": current_score >= self.target_quality_score,
            "enhanced_features_used": ENHANCED_MONITORING_AVAILABLE,
            "target_agents_processed": is_target_agent
        }
    
    async def _execute_enhanced_maintenance_workflow(self, target_path: Path, scope_type: str, iteration: int) -> Dict[str, Any]:
        """Workflow de maintenance avanc√© avec infrastructure Phase 2"""
        logger.info("üöÄ Ex√©cution workflow maintenance avanc√© (Phase 2)")
        
        agents_used = []
        results = []
        
        try:
            # Analyse parall√®le avec les nouveaux agents
            if self.parallel_manager:
                # T√¢ches parall√®les pour les agents sp√©cialis√©s
                parallel_tasks = []
                
                # Security enterprise analysis
                if "security_enterprise" in self.agents:
                    security_task = Task(
                        id="enterprise_security_analysis",
                        params={"target_path": str(target_path), "scope": scope_type}
                    )
                    parallel_tasks.append(("security_enterprise", security_task))
                
                # Storage enterprise analysis  
                if "storage_enterprise" in self.agents:
                    storage_task = Task(
                        id="enterprise_storage_analysis", 
                        params={"target_path": str(target_path), "scope": scope_type}
                    )
                    parallel_tasks.append(("storage_enterprise", storage_task))
                
                # Test models integration
                if "test_models_integration" in self.agents:
                    models_task = Task(
                        id="models_integration_test",
                        params={"target_path": str(target_path), "type": "complete_test_suite"}
                    )
                    parallel_tasks.append(("test_models_integration", models_task))
                
                # Tests d'agents
                if "testeur_agents" in self.agents:
                    test_task = Task(
                        id="agent_validation_test",
                        params={"type": "test_agent", "agent_path": str(target_path)}
                    )
                    parallel_tasks.append(("testeur_agents", test_task))
                
                # Ex√©cution parall√®le avec circuit breaker
                for agent_name, task in parallel_tasks:
                    try:
                        if self.circuit_breaker and await self.circuit_breaker.can_execute(agent_name):
                            result = await self.agents[agent_name].execute_task(task)
                            results.append({
                                "agent": agent_name,
                                "success": getattr(result, 'success', True),
                                "data": getattr(result, 'data', result)
                            })
                            agents_used.append(agent_name)
                            
                            # Record success/failure pour circuit breaker
                            if self.circuit_breaker:
                                if getattr(result, 'success', True):
                                    await self.circuit_breaker.record_success(agent_name)
                                else:
                                    await self.circuit_breaker.record_failure(agent_name)
                        else:
                            logger.warning(f"‚ö†Ô∏è Circuit breaker ouvert pour {agent_name}")
                            
                    except Exception as e:
                        logger.error(f"‚ùå Erreur agent {agent_name}: {e}")
                        if self.circuit_breaker:
                            await self.circuit_breaker.record_failure(agent_name)
            
            # Orchestration intelligente avec meta-auditeur
            if "meta_orchestrateur" in self.agents:
                meta_task = Task(
                    id="intelligent_maintenance_enhanced",
                    params={
                        "target_path": str(target_path),
                        "scope_type": scope_type,
                        "target_score": self.target_quality_score,
                        "enterprise_results": results,
                        "iteration": iteration
                    }
                )
                
                backup = self.create_incremental_backup(target_path, f"PRE_META_ITER_{iteration}", "meta_orchestrateur")
                meta_result = await self.agents["meta_orchestrateur"].execute_task(meta_task)
                self.finalize_backup(backup, getattr(meta_result, 'success', False))
                
                results.append({
                    "agent": "meta_orchestrateur",
                    "success": getattr(meta_result, 'success', False),
                    "data": getattr(meta_result, 'data', meta_result)
                })
                agents_used.append("meta_orchestrateur")
            
            success_count = sum(1 for r in results if r["success"])
            overall_success = success_count > 0
            
            logger.info(f"‚úÖ Workflow avanc√© termin√©: {success_count}/{len(results)} agents r√©ussis")
            
            return {
                "success": overall_success,
                "agents_used": agents_used,
                "results": results,
                "success_rate": (success_count / len(results)) if results else 0,
                "workflow_type": "enhanced_phase2"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur workflow avanc√©: {e}")
            return {
                "success": False,
                "error": str(e),
                "agents_used": agents_used,
                "workflow_type": "enhanced_phase2_failed"
            }
    
    async def _execute_standard_maintenance_workflow(self, target_path: Path, scope_type: str, iteration: int) -> Dict[str, Any]:
        """Workflow de maintenance standard (fallback)"""
        logger.info("üìã Ex√©cution workflow maintenance standard")
        
        try:
            # Analyse structure (Agent 01)
            structure_task = Task(
                id="analyze_structure",
                params={"target_path": str(target_path)}
            )
            structure_result = await self.agents["analyseur_structure"].execute_task(structure_task)
            
            # Orchestration intelligente (Meta-Auditeur)
            maintenance_task = Task(
                id="intelligent_maintenance",
                params={
                    "target_path": str(target_path),
                    "scope_type": scope_type,
                    "target_score": self.target_quality_score
                }
            )
            
            # Backup pr√©-maintenance
            maintenance_backup = self.create_incremental_backup(
                target_path, f"PRE_MAINTENANCE_ITER_{iteration}", "meta_orchestrateur"
            )
            
            maintenance_result = await self.agents["meta_orchestrateur"].execute_task(maintenance_task)
            
            success = getattr(maintenance_result, 'success', False)
            self.finalize_backup(maintenance_backup, success)
            
            if success:
                logger.info("‚úÖ Phase Maintenance standard r√©ussie")
            else:
                logger.warning(f"‚ö†Ô∏è Phase Maintenance standard √©chou√©e: {getattr(maintenance_result, 'error', 'Unknown error')}")
            
            return {
                "success": success,
                "agents_used": ["analyseur_structure", "meta_orchestrateur"],
                "results": [
                    {"agent": "analyseur_structure", "success": getattr(structure_result, 'success', False)},
                    {"agent": "meta_orchestrateur", "success": success}
                ],
                "workflow_type": "standard"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur workflow standard: {e}")
            return {
                "success": False,
                "error": str(e),
                "agents_used": [],
                "workflow_type": "standard_failed"
            }

    async def rollback_to_backup(self, backup_entry: BackupEntry) -> bool:
        """Effectue un rollback vers un backup sp√©cifique"""
        try:
            backup_path = Path(backup_entry.backup_path)
            target_path = Path(backup_entry.file_path)
            
            if backup_path.exists():
                shutil.copy2(backup_path, target_path)
                logger.info(f"üîÑ Rollback effectu√© vers {backup_entry.timestamp}")
                return True
            else:
                logger.error(f"‚ùå Backup non trouv√©: {backup_path}")
                return False
        except Exception as e:
            logger.error(f"‚ùå Erreur durant rollback: {e}")
            return False

    async def execute_maintenance_mission(self, target_path: str, scope_type: str = "auto") -> Dict[str, Any]:
        """
        Point d'entr√©e principal pour une mission de maintenance compl√®te
        
        Args:
            target_path: Chemin vers fichier/r√©pertoire √† maintenir
            scope_type: Type de scope (file, directory, project, auto)
        """
        mission_start = datetime.now()
        target = Path(target_path)
        
        # D√©tection automatique du scope
        if scope_type == "auto":
            if target.is_file():
                scope_type = "file"
            elif target.is_dir():
                scope_type = "directory"
            else:
                scope_type = "project"
        
        # Mise √† jour session
        self.session.target_scope = str(target)
        self.session.scope_type = scope_type
        
        logger.info(f"üéØ MISSION DE MAINTENANCE - Scope: {scope_type}, Cible: {target}")
        
        try:
            # Initialisation √©quipe
            await self.initialize_maintenance_team()
            
            # Validation pr√©-maintenance
            logger.info("üîç Validation pr√©-maintenance...")
            pre_validation = await self.validate_comprehensive(target)
            initial_score = min(pre_validation.security_score, pre_validation.quality_score)
            
            logger.info(f"üìä Score initial: {initial_score:.1f}/100")
            
            # Ex√©cution cycle de maintenance
            cycle_result = await self.execute_maintenance_cycle(target, scope_type)
            
            # Validation post-maintenance
            logger.info("üîç Validation post-maintenance...")
            post_validation = await self.validate_comprehensive(target)
            final_score = min(post_validation.security_score, post_validation.quality_score)
            
            # Finalisation session
            self.session.total_duration = (datetime.now() - mission_start).total_seconds()
            self.session.final_status = "SUCCESS" if cycle_result["success"] else "PARTIAL_SUCCESS"
            self.session.iterations = cycle_result["iteration_details"]
            
            # G√©n√©ration rapport final
            await self.generate_final_report(initial_score, final_score, cycle_result)
            
            return {
                "success": True,
                "session_id": self.session_id,
                "initial_score": initial_score,
                "final_score": final_score,
                "improvement": final_score - initial_score,
                "target_achieved": cycle_result["target_achieved"],
                "iterations": cycle_result["iterations"],
                "duration": self.session.total_duration,
                "backups_created": len(self.session.backups),
                "reports_dir": str(self.reports_dir)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur durant mission: {e}")
            self.session.final_status = "FAILED"
            return {
                "success": False,
                "error": str(e),
                "session_id": self.session_id
            }
        finally:
            await self.shutdown_maintenance_team()
    
    async def execute_specialized_agents_workflow(self) -> Dict[str, Any]:
        """
        Workflow sp√©cialis√© utilisant les nouvelles capacit√©s des 4 agents cibles
        """
        # V√©rification des capacit√©s avanc√©es disponibles
        enhanced_monitoring_available = hasattr(self, 'metrics_collector') and self.metrics_collector is not None
        logger.info("üöÄ D√©marrage workflow sp√©cialis√© avec nouvelles capacit√©s")
        
        results = {}
        
        # 1. Agent SECURITY_21 - Zero Trust & ML Security
        try:
            if Agent21SecurityEnterprise and create_agent_21_security:
                logger.info("üîê Test Agent Security Enterprise - Zero Trust")
                security_agent = create_agent_21_security()
                await security_agent.startup()
                
                # Test des capacit√©s Zero Trust
                zero_trust_task = Task(
                    id="zero_trust_validation",
                    type="zero_trust_validation",
                    params={"compliance_target": 85.0}
                )
                
                security_result = await security_agent.execute_task(zero_trust_task)
                await security_agent.shutdown()
                
                results["agent_SECURITY_21"] = {
                    "success": security_result.success,
                    "capabilities_tested": ["zero_trust", "ml_security", "threat_intelligence"],
                    "compliance_score": security_result.metrics.get("compliance_score", 0),
                    "features_active": len(security_agent.features) if hasattr(security_agent, 'features') else 0,
                    "data": security_result.data
                }
                logger.info(f"‚úÖ Security Agent: Compliance {security_result.metrics.get('compliance_score', 0)}")
            else:
                results["agent_SECURITY_21"] = {"success": False, "error": "Agent non disponible"}
        except Exception as e:
            logger.error(f"‚ùå Erreur Security Agent: {e}")
            results["agent_SECURITY_21"] = {"success": False, "error": str(e)}
        
        # 2. Agent STORAGE_24 - Auto-scaling & Multi-region
        try:
            if Agent24StorageEnterprise and create_agent_24_storage:
                logger.info("üíæ Test Agent Storage Enterprise - Auto-scaling")
                storage_agent = create_agent_24_storage()
                await storage_agent.startup()
                
                # Test des capacit√©s Auto-scaling
                autoscaling_task = Task(
                    id="auto_scaling_test",
                    type="auto_scaling",
                    params={"target_utilization": 70}
                )
                
                storage_result = await storage_agent.execute_task(autoscaling_task)
                await storage_agent.shutdown()
                
                results["agent_STORAGE_24"] = {
                    "success": storage_result.success,
                    "capabilities_tested": ["auto_scaling", "multi_region", "predictive_analytics"],
                    "features_active": len(storage_agent.features) if hasattr(storage_agent, 'features') else 0,
                    "data": storage_result.data
                }
                logger.info(f"‚úÖ Storage Agent: Auto-scaling configur√©")
            else:
                results["agent_STORAGE_24"] = {"success": False, "error": "Agent non disponible"}
        except Exception as e:
            logger.error(f"‚ùå Erreur Storage Agent: {e}")
            results["agent_STORAGE_24"] = {"success": False, "error": str(e)}
        
        # 3. Agent Test Models - Ollama RTX3090 Integration
        try:
            if AgentTestModelsIntegration:
                logger.info("üß† Test Agent Models Integration - Ollama RTX3090")
                models_agent = AgentTestModelsIntegration()
                await models_agent.startup()
                
                # Test des capacit√©s Ollama
                models_result = await models_agent.run_comprehensive_tests()
                await models_agent.shutdown()
                
                results["agent_test_models_integration"] = {
                    "success": True,
                    "capabilities_tested": ["ollama_integration", "rtx3090_acceleration", "model_testing"],
                    "ollama_models": models_result.get("ollama_status", {}).get("models_count", 0),
                    "data": models_result
                }
                logger.info(f"‚úÖ Models Agent: {models_result.get('ollama_status', {}).get('models_count', 0)} mod√®les test√©s")
            else:
                results["agent_test_models_integration"] = {"success": False, "error": "Agent non disponible"}
        except Exception as e:
            logger.error(f"‚ùå Erreur Models Agent: {e}")
            results["agent_test_models_integration"] = {"success": False, "error": str(e)}
        
        # 4. Agent Testeur Complet - Strategic Reporting
        try:
            if AgentTesteurAgents and create_agent_testeur_agents:
                logger.info("üéØ Test Agent Testeur Complet - Strategic Reporting")
                testeur_agent = create_agent_testeur_agents()
                await testeur_agent.startup()
                
                # Test des capacit√©s de validation compl√®te
                test_result = await testeur_agent.run_complete_validation_workflow()
                await testeur_agent.shutdown()
                
                results["agent_testeur_agents_complet"] = {
                    "success": True,
                    "capabilities_tested": ["strategic_reporting", "complete_validation", "advanced_testing"],
                    "data": test_result
                }
                logger.info(f"‚úÖ Testeur Agent: Validation compl√®te r√©ussie")
            else:
                results["agent_testeur_agents_complet"] = {"success": False, "error": "Agent non disponible"}
        except Exception as e:
            logger.error(f"‚ùå Erreur Testeur Agent: {e}")
            results["agent_testeur_agents_complet"] = {"success": False, "error": str(e)}
        
        return results
    
    async def execute_target_agents_maintenance(self) -> Dict[str, Any]:
        """
        Ex√©cute la maintenance sp√©cifique des 4 agents cibles avec nouvelles capacit√©s
        
        Returns:
            Dict contenant les r√©sultats de maintenance pour chaque agent cible
        """
        logger.info("üéØ MISSION SP√âCIALE: Orchestration des agents cibles avec nouvelles capacit√©s")
        
        mission_start = datetime.now()
        results = {}
        
        try:
            # NOUVELLE APPROCHE: Utilisation des capacit√©s sp√©cialis√©es des agents
            results = await self.execute_specialized_agents_workflow()
            
            # G√©n√©ration rapport de mission consolid√©
            mission_duration = (datetime.now() - mission_start).total_seconds()
            mission_report = await self._generate_target_agents_mission_report(results, mission_duration)
            
            return {
                "mission_success": True,
                "total_agents": 4,  # Les 4 agents cibles
                "successful_agents": sum(1 for r in results.values() if r.get("success", False)),
                "mission_duration": mission_duration,
                "individual_results": results,
                "mission_report": mission_report,
                "enhanced_features_used": True  # Nouvelles capacit√©s utilis√©es
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur mission agents cibles: {e}")
            return {
                "mission_success": False,
                "error": str(e),
                "individual_results": results
            }
    
    async def _generate_target_agents_mission_report(self, results: Dict[str, Any], mission_duration: float) -> Dict[str, Any]:
        """G√©n√®re un rapport consolid√© de la mission agents cibles avec nouvelles capacit√©s"""
        
        successful_agents = [name for name, result in results.items() if result.get("success", False)]
        failed_agents = [name for name, result in results.items() if not result.get("success", False)]
        
        # Analyse des nouvelles capacit√©s test√©es
        capabilities_summary = {
            "zero_trust_security": results.get("agent_SECURITY_21", {}).get("success", False),
            "auto_scaling_storage": results.get("agent_STORAGE_24", {}).get("success", False),
            "ollama_rtx3090_integration": results.get("agent_test_models_integration", {}).get("success", False),
            "strategic_reporting": results.get("agent_testeur_agents_complet", {}).get("success", False)
        }
        
        # Analyse d√©taill√©e par agent
        agents_analysis = {}
        
        # Agent Security 21
        security_result = results.get("agent_SECURITY_21", {})
        if security_result.get("success"):
            agents_analysis["security_enterprise"] = {
                "status": "‚úÖ OP√âRATIONNEL",
                "compliance_score": security_result.get("compliance_score", 0),
                "features_count": security_result.get("features_active", 0),
                "capabilities": security_result.get("capabilities_tested", [])
            }
        
        # Agent Storage 24
        storage_result = results.get("agent_STORAGE_24", {})
        if storage_result.get("success"):
            agents_analysis["storage_enterprise"] = {
                "status": "‚úÖ OP√âRATIONNEL",
                "features_count": storage_result.get("features_active", 0),
                "capabilities": storage_result.get("capabilities_tested", [])
            }
        
        # Agent Models Integration
        models_result = results.get("agent_test_models_integration", {})
        if models_result.get("success"):
            agents_analysis["models_integration"] = {
                "status": "‚úÖ OP√âRATIONNEL",
                "ollama_models": models_result.get("ollama_models", 0),
                "capabilities": models_result.get("capabilities_tested", [])
            }
        
        # Agent Testeur Complet
        testeur_result = results.get("agent_testeur_agents_complet", {})
        if testeur_result.get("success"):
            agents_analysis["testeur_complet"] = {
                "status": "‚úÖ OP√âRATIONNEL",
                "capabilities": testeur_result.get("capabilities_tested", [])
            }
        
        # Calcul du score global de performance
        total_capabilities = len(capabilities_summary)
        successful_capabilities = sum(1 for success in capabilities_summary.values() if success)
        performance_score = (successful_capabilities / total_capabilities * 100) if total_capabilities > 0 else 0
        
        # Recommandations sp√©cifiques pour nouvelles capacit√©s
        recommendations = []
        if len(failed_agents) > 0:
            recommendations.append(f"üîß R√âPARATION: {len(failed_agents)} agents n√©cessitent une attention particuli√®re")
        if performance_score < 90:
            recommendations.append(f"üìà AM√âLIORATION: Score capacit√©s {performance_score:.1f}/100 - Optimisation possible")
        
        # Recommandations sp√©cifiques par capacit√©
        if not capabilities_summary["zero_trust_security"]:
            recommendations.append("üîê S√âCURIT√â: Activer les fonctionnalit√©s Zero Trust Enterprise")
        if not capabilities_summary["auto_scaling_storage"]:
            recommendations.append("üíæ STORAGE: Configurer l'auto-scaling storage enterprise")
        if not capabilities_summary["ollama_rtx3090_integration"]:
            recommendations.append("üß† IA: V√©rifier l'int√©gration Ollama RTX3090")
        if not capabilities_summary["strategic_reporting"]:
            recommendations.append("üìä REPORTING: Optimiser le reporting strat√©gique")
        
        if not recommendations:
            recommendations.append("‚úÖ EXCELLENT: Toutes les nouvelles capacit√©s sont op√©rationnelles")
        
        return {
            "mission_type": "specialized_agents_workflow",
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_agents": len(results),
                "successful_agents": len(successful_agents),
                "failed_agents": len(failed_agents),
                "success_rate": (len(successful_agents) / len(results) * 100) if results else 0,
                "performance_score": performance_score,
                "mission_duration": mission_duration
            },
            "capabilities_analysis": capabilities_summary,
            "agents_detailed_analysis": agents_analysis,
            "recommendations": recommendations,
            "next_actions": [
                "Surveiller performance des agents maintenus",
                "Planifier prochaine maintenance dans 30 jours",
                "Optimiser agents avec scores < 90",
                "Valider nouvelles capacit√©s enterprise"
            ]
        }

    async def generate_final_report(self, initial_score: float, final_score: float, cycle_result: Dict[str, Any]):
        """G√©n√®re le rapport final de mission"""
        report_path = self.reports_dir / "final_maintenance_report.md"
        
        report_content = f"""# RAPPORT FINAL DE MAINTENANCE
## Session: {self.session_id}

### üìä R√âSULTATS GLOBAUX
- **Score Initial**: {initial_score:.1f}/100
- **Score Final**: {final_score:.1f}/100
- **Am√©lioration**: {final_score - initial_score:+.1f} points
- **Objectif Atteint**: {'‚úÖ OUI' if cycle_result['target_achieved'] else '‚ùå NON'}
- **It√©rations**: {cycle_result['iterations']}/{self.max_iterations}
- **Dur√©e Totale**: {self.session.total_duration:.2f}s

### üõ°Ô∏è S√âCURIT√â ET BACKUPS
- **Backups Cr√©√©s**: {len(self.session.backups)}
- **R√©pertoire Backups**: {self.backup_dir}
- **Agents Utilis√©s**: {', '.join(self.session.agents_used)}

### üìã D√âTAILS DES IT√âRATIONS
"""
        
        for iteration in cycle_result["iteration_details"]:
            report_content += f"""
#### It√©ration {iteration['iteration']}
- **Score**: {iteration.get('current_score', 'N/A'):.1f}/100
- **Dur√©e**: {iteration.get('duration', 0):.2f}s
- **Maintenance**: {'‚úÖ' if iteration.get('maintenance_success') else '‚ùå'}
- **Documentation**: {'‚úÖ' if iteration.get('documentation_success') else '‚ùå'}
- **Validation**: {'‚úÖ' if iteration.get('final_validation_success') else '‚ùå'}
"""
        
        report_content += f"""

### üéØ RECOMMANDATIONS
- Objectif qualit√© configur√©: {self.target_quality_score}/100
- Prochaine maintenance recommand√©e dans: 30 jours
- Backups disponibles pour rollback si n√©cessaire

---
*Rapport g√©n√©r√© le {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} par Enhanced Maintenance Orchestrator v2.0*
"""
        
        report_path.write_text(report_content, encoding='utf-8')
        logger.info(f"üìã Rapport final g√©n√©r√©: {report_path}")

    async def _validate_comprehensive_with_specialized_agents(self, target_path: Path, is_target_agent: bool) -> ValidationResult:
        """Validation compl√®te avec agents sp√©cialis√©s"""
        logger.info("üîç Validation compl√®te avanc√©e en cours...")
        
        issues = []
        recommendations = []
        
        # 1. Validation syntaxique standard
        try:
            if target_path.is_file() and target_path.suffix == '.py':
                compile(target_path.read_text(encoding='utf-8'), str(target_path), 'exec')
                syntax_valid = True
            else:
                syntax_valid = True
        except SyntaxError as e:
            syntax_valid = False
            issues.append(f"Erreur syntaxe: {e}")
        
        # 2. Validation s√©curit√© avec agent enterprise si disponible
        security_score = 0.0
        if is_target_agent and "security_enterprise" in self.agents:
            try:
                security_task = Task(
                    id="enterprise_security_validation",
                    params={"target_path": str(target_path)}
                )
                security_result = await self.agents["security_enterprise"].execute_task(security_task)
                if hasattr(security_result, 'data') and security_result.data:
                    security_score = security_result.data.get("security_compliance", 85.0)
                elif hasattr(security_result, 'metrics'):
                    security_score = security_result.metrics.get("compliance_score", 85.0)
                else:
                    security_score = 85.0  # Score par d√©faut enterprise
                    
                if hasattr(security_result, 'data') and security_result.data.get("issues"):
                    issues.extend([f"S√©curit√© Enterprise: {issue}" for issue in security_result.data["issues"]])
            except Exception as e:
                security_score = 0.0
                issues.append(f"Erreur validation s√©curit√© enterprise: {e}")
        else:
            # Fallback vers agent s√©curit√© standard
            try:
                security_task = Task(
                    id="security_validation",
                    params={"target_path": str(target_path)}
                )
                security_result = await self.agents["analyseur_securite"].execute_task(security_task)
                security_score = security_result.data.get("security_score", 0.0) if security_result.success else 0.0
                
                if security_result.success and security_result.data.get("issues"):
                    issues.extend([f"S√©curit√©: {issue}" for issue in security_result.data["issues"]])
            except Exception as e:
                security_score = 0.0
                issues.append(f"Erreur validation s√©curit√©: {e}")
        
        # 3. Validation qualit√© avanc√©e
        quality_score = 0.0
        try:
            quality_task = Task(
                id="quality_validation_advanced", 
                params={"target_path": str(target_path), "enterprise_mode": is_target_agent}
            )
            quality_result = await self.agents["auditeur_qualite"].execute_task(quality_task)
            quality_score = quality_result.data.get("quality_score", 0.0) if quality_result.success else 0.0
            
            if quality_result.success and quality_result.data.get("recommendations"):
                recommendations.extend(quality_result.data["recommendations"])
        except Exception as e:
            quality_score = 0.0
            issues.append(f"Erreur validation qualit√©: {e}")
        
        # 4. Test fonctionnel avec testeur d'agents si disponible
        functional_test = True
        if is_target_agent and "testeur_agents" in self.agents and target_path.name.startswith('agent_'):
            try:
                test_task = Task(
                    id="comprehensive_agent_test",
                    params={"type": "test_agent", "agent_path": str(target_path)}
                )
                test_result = await self.agents["testeur_agents"].execute_task(test_task)
                functional_test = test_result.get("status") == "success" if isinstance(test_result, dict) else getattr(test_result, 'success', False)
                
                if not functional_test:
                    issues.append("√âchec test fonctionnel agent avanc√©")
            except Exception as e:
                functional_test = False
                issues.append(f"Erreur test fonctionnel avanc√©: {e}")
        elif target_path.is_file() and target_path.name.startswith('agent_'):
            # Fallback vers testeur standard
            try:
                test_task = Task(
                    id="functional_test",
                    params={"agent_path": str(target_path)}
                )
                test_result = await self.agents["testeur_validation"].execute_task(test_task)
                functional_test = test_result.success and test_result.data.get("is_functional", False)
                
                if not functional_test:
                    issues.append("√âchec test fonctionnel agent")
            except Exception as e:
                functional_test = False
                issues.append(f"Erreur test fonctionnel: {e}")
        
        return ValidationResult(
            syntax_valid=syntax_valid,
            security_score=security_score,
            quality_score=quality_score,
            functional_test=functional_test,
            issues=issues,
            recommendations=recommendations
        )
    
    async def _generate_advanced_documentation(self, target_path: Path, validation: ValidationResult, iteration: int, is_target_agent: bool) -> Dict[str, Any]:
        """G√©n√©ration de documentation avanc√©e"""
        logger.info("üìù G√©n√©ration documentation avanc√©e...")
        
        try:
            # Documentation avec agent sp√©cialis√© si disponible
            doc_params = {
                "target_path": str(target_path),
                "validation": asdict(validation),
                "iteration": iteration,
                "enterprise_mode": is_target_agent,
                "enhanced_features": ENHANCED_MONITORING_AVAILABLE
            }
            
            # Ajout des m√©triques de performance si disponibles
            if self.metrics_collector:
                doc_params["performance_metrics"] = await self.metrics_collector.get_current_metrics()
            
            doc_task = Task(
                id="generate_advanced_documentation",
                params=doc_params
            )
            
            doc_result = await self.agents["documenteur"].execute_task(doc_task)
            
            # G√©n√©ration de rapports strat√©giques pour les agents cibl√©s
            if is_target_agent and "testeur_agents" in self.agents:
                try:
                    strategic_task = Task(
                        name="generate_strategic_report",
                        context={"target_agent": str(target_path), "validation_results": asdict(validation)},
                        type_rapport="testing",
                        format_sortie="markdown"
                    )
                    strategic_result = await self.agents["testeur_agents"].execute_task(strategic_task)
                    
                    if hasattr(strategic_result, 'data') and strategic_result.data:
                        doc_params["strategic_report"] = strategic_result.data
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration rapport strat√©gique: {e}")
            
            return {
                "success": getattr(doc_result, 'success', True),
                "data": getattr(doc_result, 'data', doc_result),
                "enterprise_features": is_target_agent,
                "strategic_reporting": is_target_agent and "testeur_agents" in self.agents
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration documentation avanc√©e: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def _perform_enterprise_validation(self, target_path: Path, validation: ValidationResult, is_target_agent: bool) -> Dict[str, Any]:
        """Validation finale enterprise avec agents sp√©cialis√©s"""
        logger.info("‚úÖ Validation finale enterprise...")
        
        try:
            validation_params = {
                "target_path": str(target_path),
                "quality_threshold": self.target_quality_score,
                "validation_results": asdict(validation),
                "enterprise_mode": is_target_agent
            }
            
            # Test d'int√©gration des mod√®les pour les agents concern√©s
            if is_target_agent and "test_models_integration" in self.agents:
                try:
                    models_test_task = Task(
                        id="integration_test",
                        params={"target_agent": str(target_path)}
                    )
                    models_result = await self.agents["test_models_integration"].execute_task(models_test_task)
                    validation_params["models_integration"] = getattr(models_result, 'data', models_result)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Test int√©gration mod√®les √©chou√©: {e}")
            
            # Validation avec stockage enterprise si pertinent  
            if is_target_agent and "storage_enterprise" in self.agents and "storage" in str(target_path).lower():
                try:
                    storage_task = Task(
                        id="enterprise_storage_validation",
                        params={"target_path": str(target_path)}
                    )
                    storage_result = await self.agents["storage_enterprise"].execute_task(storage_task)
                    validation_params["storage_validation"] = getattr(storage_result, 'data', storage_result)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Validation stockage enterprise √©chou√©e: {e}")
            
            final_validation_task = Task(
                id="enterprise_final_validation",
                params=validation_params
            )
            
            final_result = await self.agents["validateur_final"].execute_task(final_validation_task)
            
            return {
                "success": getattr(final_result, 'success', True),
                "data": getattr(final_result, 'data', final_result),
                "enterprise_validation": is_target_agent,
                "validation_score": min(validation.security_score, validation.quality_score)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation finale enterprise: {e}")
            return {
                "success": False,
                "error": str(e)
            }

    async def shutdown_maintenance_team(self):
        """Arr√™t propre de l'√©quipe de maintenance avec infrastructure avanc√©e"""
        logger.info("üîö Arr√™t de l'√©quipe de maintenance...")
        
        # Arr√™t infrastructure Phase 2 si active
        if ENHANCED_MONITORING_AVAILABLE:
            try:
                if self.parallel_manager:
                    await self.parallel_manager.shutdown()
                if self.intelligent_cache:
                    await self.intelligent_cache.shutdown()
                if self.metrics_collector:
                    await self.metrics_collector.shutdown()
                if self.circuit_breaker:
                    await self.circuit_breaker.shutdown()
                logger.info("‚úÖ Infrastructure Phase 2 arr√™t√©e")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur arr√™t infrastructure Phase 2: {e}")
        
        # Arr√™t des agents
        for agent_name, agent in self.agents.items():
            try:
                await agent.shutdown()
                logger.info(f"‚úÖ Agent {agent_name} arr√™t√©")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur arr√™t agent {agent_name}: {e}")
        
        # Sauvegarde session avec m√©triques avanc√©es
        session_data = asdict(self.session)
        session_data["enhanced_features_used"] = ENHANCED_MONITORING_AVAILABLE
        session_data["target_agents_paths"] = [str(path) for path in self.target_agents_paths]
        
        session_file = self.reports_dir / "session_data.json"
        session_file.write_text(json.dumps(session_data, indent=2), encoding='utf-8')
        logger.info(f"üíæ Session sauvegard√©e: {session_file}")

async def main():
    """Point d'entr√©e principal pour test"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Enhanced Maintenance Orchestrator v2.0 - Nouvelles Capacit√©s")
    parser.add_argument("target", nargs="?", help="Chemin vers fichier/r√©pertoire √† maintenir")
    parser.add_argument("--scope", choices=["file", "directory", "project", "auto"], 
                       default="auto", help="Type de scope de maintenance")
    parser.add_argument("--target-score", type=int, default=95, 
                       help="Score de qualit√© cible (0-100)")
    parser.add_argument("--max-iterations", type=int, default=5,
                       help="Nombre maximum d'it√©rations")
    parser.add_argument("--target-agents", action="store_true",
                       help="Ex√©cuter la mission sp√©ciale des 4 agents cibles avec nouvelles capacit√©s")
    
    args = parser.parse_args()
    
    # Cr√©ation orchestrateur
    orchestrator = EnhancedMaintenanceOrchestrator(
        target_quality_score=args.target_score,
        max_iterations=args.max_iterations
    )
    
    try:
        if args.target_agents:
            # Mission sp√©ciale agents cibles
            print("\n" + "="*70)
            print("üéØ MISSION SP√âCIALE: MAINTENANCE DES AGENTS CIBLES")
            print("="*70)
            print("üîß Agents cibl√©s:")
            for path in orchestrator.target_agents_paths:
                print(f"   - {path.name}")
            print(f"üöÄ Infrastructure avanc√©e: {'‚úÖ Disponible' if ENHANCED_MONITORING_AVAILABLE else '‚ùå Mode basique'}")
            print("="*70)
            
            result = await orchestrator.execute_target_agents_maintenance()
            
            # Affichage r√©sultats mission sp√©ciale
            print("\nüéØ R√âSULTATS MISSION AGENTS CIBLES")
            print("="*70)
            print(f"Mission r√©ussie: {'‚úÖ OUI' if result['mission_success'] else '‚ùå NON'}")
            print(f"Agents trait√©s: {result['total_agents']}")
            print(f"Agents r√©ussis: {result['successful_agents']}")
            print(f"Taux de succ√®s: {(result['successful_agents']/result['total_agents']*100):.1f}%")
            print(f"Dur√©e mission: {result['mission_duration']:.2f}s")
            print(f"Fonctionnalit√©s avanc√©es: {'‚úÖ Utilis√©es' if result['enhanced_features_used'] else '‚ùå Non disponibles'}")
            
            # D√©tails par agent
            print("\nüìã D√âTAILS PAR AGENT:")
            for agent_name, agent_result in result['individual_results'].items():
                status = "‚úÖ" if agent_result.get('success', False) else "‚ùå"
                score = agent_result.get('final_score', 0)
                print(f"   {status} {agent_name}: Score {score:.1f}/100")
            
            # Recommandations
            mission_report = result.get('mission_report', {})
            recommendations = mission_report.get('recommendations', [])
            if recommendations:
                print("\nüéØ RECOMMANDATIONS:")
                for rec in recommendations:
                    print(f"   - {rec}")
            
            return 0 if result['mission_success'] else 1
            
        else:
            # Mission standard
            if not args.target:
                print("‚ùå Erreur: Sp√©cifiez un chemin cible ou utilisez --target-agents")
                return 1
            
            target_path = Path(args.target)
            if not target_path.exists():
                print(f"‚ùå Chemin non trouv√©: {target_path}")
                sys.exit(1)
            
            # Ex√©cution mission standard
            result = await orchestrator.execute_maintenance_mission(
                str(target_path), 
                args.scope
            )
            
            # Affichage r√©sultats standard
            print("\n" + "="*60)
            print("üéØ R√âSULTATS DE LA MISSION DE MAINTENANCE")
            print("="*60)
            print(f"Session ID: {result['session_id']}")
            print(f"Succ√®s: {'‚úÖ OUI' if result['success'] else '‚ùå NON'}")
            
            if result['success']:
                print(f"Score initial: {result['initial_score']:.1f}/100")
                print(f"Score final: {result['final_score']:.1f}/100")
                print(f"Am√©lioration: {result['improvement']:+.1f} points")
                print(f"Objectif atteint: {'‚úÖ OUI' if result['target_achieved'] else '‚ùå NON'}")
                print(f"It√©rations: {result['iterations']}")
                print(f"Dur√©e: {result['duration']:.2f}s")
                print(f"Backups cr√©√©s: {result['backups_created']}")
                print(f"Rapports: {result['reports_dir']}")
                
                # Nouvelles m√©triques si disponibles
                if result.get('enhanced_features_used'):
                    print(f"‚ú® Fonctionnalit√©s avanc√©es: ‚úÖ Utilis√©es")
                if result.get('target_agents_processed'):
                    print(f"üéØ Agent cible trait√©: ‚úÖ OUI")
            else:
                print(f"Erreur: {result.get('error', 'Erreur inconnue')}")
            
            print("="*60)
            
            return 0 if result['success'] else 1
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Arr√™t manuel de la mission")
        return 130
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
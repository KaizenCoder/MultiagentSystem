# üöÄ NextGeneration Workflow - Automatisation Compl√®te
# Mission: Workflow d√©veloppement quotidien optimis√©
# Base: Extension scripts PowerShell excel_vba_tools_launcher
# Infrastructure: NextGeneration mature (6 tools + 4 agents teams)

<#
.SYNOPSIS
    üöÄ WORKFLOW DE D√âVELOPPEMENT QUOTIDIEN - NEXTGENERATION
    Ce script fournit des commandes rapides pour les t√¢ches courantes de d√©veloppement.

.DESCRIPTION
    Simplifie les actions comme le nettoyage, les tests et l'analyse statique.
    Utilise les outils internes du projet pour une int√©gration parfaite.

.EXAMPLE
    .\scripts\nextgeneration_workflow.ps1 -Action clean
    Nettoie les fichiers temporaires et les caches du projet.

.EXAMPLE
    .\scripts\nextgeneration_workflow.ps1 -Action test -Path "unit"
    Lance les tests unitaires.

.NOTES
    Auteur: Agent Coordinateur NextGeneration
    Version: 1.0.0
#>

param(
    [Parameter(Mandatory=$true, HelpMessage="Action √† ex√©cuter.")]
    [ValidateSet("clean", "test", "lint", "docs")]
    [string]$Action,

    [Parameter(Mandatory=$false, HelpMessage="Chemin ou argument sp√©cifique √† l'action.")]
    [string]$Path
)

# Configuration
$NextGenerationRoot = "C:\Dev\nextgeneration"
$LogPath = "$NextGenerationRoot\logs"
$Timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$LogFile = "$LogPath\workflow_$Timestamp.log"

# V√©rification environnement
if (-not (Test-Path $NextGenerationRoot)) {
    Write-Error "‚ùå NextGeneration root not found: $NextGenerationRoot"
    exit 1
}

Set-Location $NextGenerationRoot

# Fonctions utilitaires
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $LogEntry = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') [$Level] $Message"
    Write-Host $LogEntry
    if (-not (Test-Path $LogPath)) { New-Item -ItemType Directory -Path $LogPath -Force | Out-Null }
    Add-Content -Path $LogFile -Value $LogEntry
}

function Test-Infrastructure {
    Write-Log "üîç V√©rification infrastructure NextGeneration"
    
    # Tools mature (6 attendus)
    $ToolsCount = (Get-ChildItem "tools" -Directory).Count
    Write-Log "üõ†Ô∏è Tools: $ToolsCount/6 identifi√©s"
    
    # Agents (20+ attendus)
    $AgentsCount = (Get-ChildItem -Recurse -Filter "agent_*.py").Count
    Write-Log "ü§ñ Agents: $AgentsCount identifi√©s"
    
    # Infrastructure critique
    $Components = @(
        @{Name="Orchestrator"; Path="orchestrator"; Expected=10},
        @{Name="Memory API"; Path="memory_api"; Expected=5},
        @{Name="Documentation"; Path="docs"; Expected=50},
        @{Name="Tests"; Path="tests"; Expected=20}
    )
    
    foreach ($Component in $Components) {
        if (Test-Path $Component.Path) {
            $Count = (Get-ChildItem $Component.Path -Recurse -File).Count
            $Status = if ($Count -ge $Component.Expected) { "‚úÖ" } else { "‚ö†Ô∏è" }
            Write-Log "$Status $($Component.Name): $Count fichiers"
        } else {
            Write-Log "‚ùå $($Component.Name): MANQUANT"
        }
    }
    
    return $true
}

function Invoke-Documentation {
    Write-Log "üìö G√©n√©ration documentation automatique"
    
    try {
        # G√©n√©rateur principal NextGeneration
        $GeneratorPath = "tools\documentation_generator\generate_bundle_nextgeneration.py"
        
        if (-not (Test-Path $GeneratorPath)) {
            Write-Log "‚ùå G√©n√©rateur non trouv√©: $GeneratorPath" "ERROR"
            return $false
        }
        
        Write-Log "üöÄ Lancement g√©n√©ration documentation compl√®te"
        
        if ($Force) {
            $Result = python $GeneratorPath --mode regeneration
        } else {
            $Result = python $GeneratorPath --mode preservation
        }
        
        # V√©rification r√©sultat
        if (Test-Path "CODE-SOURCE.md") {
            $Size = [math]::Round((Get-Item "CODE-SOURCE.md").Length / 1KB, 2)
            Write-Log "‚úÖ Documentation g√©n√©r√©e: ${Size}KB"
            
            if ($Size -lt 200) {
                Write-Log "‚ö†Ô∏è Taille documentation < 200KB attendu" "WARN"
            } else {
                Write-Log "üéâ Documentation SUP√âRIEURE aux sp√©cifications (${Size}KB > 200KB)"
            }
            
            return $true
        } else {
            Write-Log "‚ùå Fichier CODE-SOURCE.md non g√©n√©r√©" "ERROR"
            return $false
        }
        
    } catch {
        Write-Log "‚ùå Erreur g√©n√©ration documentation: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Invoke-Validation {
    Write-Log "üß™ Validation compl√®te NextGeneration"
    
    # 1. Infrastructure
    Test-Infrastructure
    
    # 2. Tests Python
    Write-Log "üêç Ex√©cution tests Python"
    try {
        $TestResults = python -m pytest tests/ --tb=short 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Log "‚úÖ Tests Python: SUCC√àS"
        } else {
            Write-Log "‚ö†Ô∏è Tests Python: Probl√®mes d√©tect√©s" "WARN"
        }
    } catch {
        Write-Log "‚ö†Ô∏è Tests Python non ex√©cutables" "WARN"
    }
    
    # 3. Health check orchestrator
    Write-Log "üéº V√©rification orchestrateur"
    $HealthPath = "orchestrator\app\health\health_checker.py"
    if (Test-Path $HealthPath) {
        try {
            python $HealthPath
            Write-Log "‚úÖ Orchestrateur: Op√©rationnel"
        } catch {
            Write-Log "‚ö†Ô∏è Orchestrateur: Probl√®me d√©tect√©" "WARN"
        }
    }
    
    # 4. Validation agents teams
    Write-Log "üë• Validation √©quipes d'agents"
    $AgentTeams = @(
        "agent_factory_experts_team",
        "agent_factory_implementation", 
        "equipe_agents_tools_migration"
    )
    
    foreach ($Team in $AgentTeams) {
        if (Test-Path $Team) {
            $AgentCount = (Get-ChildItem "$Team" -Filter "*.py" -Recurse).Count
            Write-Log "‚úÖ $Team : $AgentCount agents"
        } else {
            Write-Log "‚ö†Ô∏è $Team : MANQUANT" "WARN"
        }
    }
    
    return $true
}

function Invoke-AgentActivation {
    Write-Log "ü§ñ Activation √©quipes d'agents"
    
    $AgentCommands = @(
        @{Name="Factory Experts"; Path="agent_factory_experts_team\coordinateur_equipe_experts.py"},
        @{Name="Tools Migration"; Path="equipe_agents_tools_migration\coordinateur_equipe_tools.py"},
        @{Name="Architecte Code"; Path="agent_factory_implementation\agents\agent_02_architecte_code_expert.py"}
    )
    
    foreach ($Agent in $AgentCommands) {
        if (Test-Path $Agent.Path) {
            Write-Log "üöÄ Activation: $($Agent.Name)"
            try {
                # Activation en mode dry-run pour validation
                $Process = Start-Process -FilePath "python" -ArgumentList $Agent.Path, "--dry-run" -PassThru -NoNewWindow
                $Process.WaitForExit(10000)  # 10s timeout
                
                if ($Process.ExitCode -eq 0) {
                    Write-Log "‚úÖ $($Agent.Name): Pr√™t"
                } else {
                    Write-Log "‚ö†Ô∏è $($Agent.Name): Probl√®me d√©tect√©" "WARN"
                }
            } catch {
                Write-Log "‚ö†Ô∏è $($Agent.Name): Erreur activation" "WARN"
            }
        } else {
            Write-Log "‚ùå $($Agent.Name): Agent non trouv√©" "ERROR"
        }
    }
    
    return $true
}

function Invoke-Monitoring {
    Write-Log "üìä Monitoring syst√®me NextGeneration"
    
    # 1. Performance monitor
    $PerfMonitor = "tools\tts_performance_monitor\performance_monitor.py"
    if (Test-Path $PerfMonitor) {
        Write-Log "üöÄ Lancement monitoring performance"
        python $PerfMonitor --status
    }
    
    # 2. GPU RTX 3090 validator
    $GPUValidator = "tools\tts_dependencies_installer\gpu_validator.py"
    if (Test-Path $GPUValidator) {
        Write-Log "üéÆ Validation GPU RTX 3090"
        python $GPUValidator
    }
    
    # 3. M√©triques projet
    Write-Log "üìä M√©triques projet"
    $PythonFiles = (Get-ChildItem -Recurse -Filter "*.py").Count
    $MarkdownFiles = (Get-ChildItem -Recurse -Filter "*.md").Count
    $ConfigFiles = (Get-ChildItem -Recurse -Filter "*.json").Count + (Get-ChildItem -Recurse -Filter "*.yml").Count
    
    Write-Log "üìà Fichiers Python: $PythonFiles"
    Write-Log "üìÑ Documentation: $MarkdownFiles"
    Write-Log "‚öôÔ∏è Configuration: $ConfigFiles"
    
    # 4. Status Git
    Write-Log "üåø Status Git"
    try {
        $GitBranch = git branch --show-current
        $GitCommit = (git rev-parse HEAD).Substring(0, 8)
        $GitStatus = git status --porcelain
        
        Write-Log "üìç Branche: $GitBranch"
        Write-Log "üîÑ Commit: $GitCommit"
        
        if ($GitStatus) {
            Write-Log "‚ö†Ô∏è Modifications non commit√©es d√©tect√©es" "WARN"
        } else {
            Write-Log "‚úÖ Repository Git propre"
        }
    } catch {
        Write-Log "‚ö†Ô∏è Erreur Git status" "WARN"
    }
    
    return $true
}

function Show-Status {
    Write-Log "üéØ Status NextGeneration"
    Write-Host ""
    Write-Host "üöÄ NEXTGENERATION - INFRASTRUCTURE MATURE" -ForegroundColor Green
    Write-Host "=======================================" -ForegroundColor Green
    Write-Host ""
    
    # Infrastructure overview
    Test-Infrastructure
    
    # Documentation status
    if (Test-Path "CODE-SOURCE.md") {
        $DocSize = [math]::Round((Get-Item "CODE-SOURCE.md").Length / 1KB, 2)
        $DocModified = (Get-Item "CODE-SOURCE.md").LastWriteTime.ToString("yyyy-MM-dd HH:mm")
        Write-Host "üìö Documentation: ${DocSize}KB (modifi√©e: $DocModified)" -ForegroundColor Green
    } else {
        Write-Host "üìö Documentation: NON G√âN√âR√âE" -ForegroundColor Yellow
    }
    
    # Quick actions
    Write-Host ""
    Write-Host "üéØ ACTIONS RAPIDES DISPONIBLES:" -ForegroundColor Cyan
    Write-Host "  .\scripts\nextgeneration_workflow.ps1 -Action documentation  # G√©n√©rer docs" -ForegroundColor Gray
    Write-Host "  .\scripts\nextgeneration_workflow.ps1 -Action validation     # Tests complets" -ForegroundColor Gray
    Write-Host "  .\scripts\nextgeneration_workflow.ps1 -Action agents         # Activer agents" -ForegroundColor Gray
    Write-Host "  .\scripts\nextgeneration_workflow.ps1 -Action monitoring     # Monitoring" -ForegroundColor Gray
    Write-Host "  .\scripts\nextgeneration_workflow.ps1 -Action full           # Tout ex√©cuter" -ForegroundColor Gray
    Write-Host ""
}

# üöÄ EXECUTION PRINCIPALE
Write-Host ""
Write-Host "üöÄ NEXTGENERATION WORKFLOW - AUTOMATISATION COMPL√àTE" -ForegroundColor Green
Write-Host "====================================================" -ForegroundColor Green
Write-Host "üìç Action: $Action" -ForegroundColor Cyan
Write-Host "üìÅ R√©pertoire: $NextGenerationRoot" -ForegroundColor Gray
Write-Host "üìù Log: $LogFile" -ForegroundColor Gray
Write-Host ""

$Success = $true

switch ($Action) {
    "clean" {
        Invoke-Clean
    }
    "test" {
        Invoke-Test -TestPath $Path
    }
    "lint" {
        Invoke-Lint
    }
    "docs" {
        Invoke-Docs
    }
    "full" {
        Write-Log "üöÄ Workflow complet NextGeneration"
        $Success = $Success -and (Test-Infrastructure)
        $Success = $Success -and (Invoke-Documentation)
        $Success = $Success -and (Invoke-Validation)
        $Success = $Success -and (Invoke-AgentActivation)
        $Success = $Success -and (Invoke-Monitoring)
    }
    "status" {
        Show-Status
        return
    }
}

# R√©sultat final
Write-Host ""
if ($Success) {
    Write-Host "üéâ WORKFLOW NEXTGENERATION: SUCC√àS" -ForegroundColor Green
    Write-Log "üéâ Workflow $Action termin√© avec succ√®s"
} else {
    Write-Host "‚ùå WORKFLOW NEXTGENERATION: PROBL√àMES D√âTECT√âS" -ForegroundColor Red
    Write-Log "‚ùå Workflow $Action termin√© avec erreurs" "ERROR"
}

Write-Host "üìù Log d√©taill√©: $LogFile" -ForegroundColor Gray
Write-Host ""

exit $(if ($Success) { 0 } else { 1 }) 
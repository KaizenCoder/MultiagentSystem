#!/usr/bin/env python3
"""
üéØ AGENT COORDINATEUR - REFACTORISATION PATTERN FACTORY
Mission: Orchestrer la refactorisation automatique de tous les agents selon Pattern Factory NextGeneration

Architecture Multi-Agents:
- Agent Coordinateur Principal (ce fichier)
- Agent Analyseur Structurel (analyse les agents existants)
- Agent Refactoriseur (applique les transformations Pattern Factory)
- Agent Validateur (teste et valide les agents refactoris√©s)

Responsabilit√©s:
- Coordonner l'√©quipe de refactorisation
- Planifier et prioriser les agents √† refactoriser
- Superviser la qualit√© des transformations
- G√©n√©rer des rapports de progression
- Assurer la conformit√© Pattern Factory NextGeneration
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path
import json
import sys
import shutil
import os

# Import Pattern Factory (OBLIGATOIRE selon guide)
sys.path.insert(0, str(Path(__file__).parent))
try:
    from agent_factory_implementation.core.agent_factory_architecture import Agent, Task, Result
    PATTERN_FACTORY_AVAILABLE = True
except ImportError:
    try:
        from core.agent_factory_architecture import Agent, Task, Result
        PATTERN_FACTORY_AVAILABLE = True
    except ImportError as e:
        print(f"‚ö†Ô∏è Pattern Factory non disponible: {e}")
        # Fallback pour compatibilit√©
        class Agent:
            def __init__(self, agent_type: str, **config):
                self.agent_id = f"coordinator_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                self.agent_type = agent_type
                self.config = config
                self.logger = logging.getLogger(f"CoordinateurRefactorisation")
                
            async def startup(self): pass
            async def shutdown(self): pass
            async def health_check(self): return {"status": "healthy"}
        
        class Task:
            def __init__(self, task_id: str, description: str, **kwargs):
                self.task_id = task_id
                self.description = description
                
        class Result:
            def __init__(self, success: bool, data: Any = None, error: str = None):
                self.success = success
                self.data = data
                self.error = error
        
        PATTERN_FACTORY_AVAILABLE = False

class AgentAnalyseurStructurel:
    """Agent sp√©cialis√© dans l'analyse structurelle des agents existants"""
    
    def __init__(self, coordinateur):
        self.coordinateur = coordinateur
        self.logger = coordinateur.logger
        
    async def analyser_agents_existants(self, agents_paths: List[str]) -> Dict[str, Any]:
        """Analyse structurelle de tous les agents existants"""
        self.logger.info("üîç D√©but analyse structurelle des agents existants")
        
        analyses = {}
        
        for agent_path in agents_paths:
            try:
                analyse = await self.analyser_agent_unique(agent_path)
                analyses[agent_path] = analyse
                self.logger.info(f"‚úÖ Agent analys√©: {agent_path}")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur analyse {agent_path}: {e}")
                analyses[agent_path] = {"error": str(e), "status": "failed"}
        
        resume_analyse = {
            "total_agents": len(agents_paths),
            "analyses_success": len([a for a in analyses.values() if a.get("status") != "failed"]),
            "analyses_failed": len([a for a in analyses.values() if a.get("status") == "failed"]),
            "analyses_detaillees": analyses,
            "timestamp": datetime.now().isoformat()
        }
        
        self.logger.info(f"üéØ Analyse termin√©e: {resume_analyse['analyses_success']}/{resume_analyse['total_agents']} agents analys√©s")
        return resume_analyse
    
    async def analyser_agent_unique(self, agent_path: str) -> Dict[str, Any]:
        """Analyse d√©taill√©e d'un agent unique"""
        if not Path(agent_path).exists():
            return {"error": "File not found", "status": "failed"}
        
        try:
            with open(agent_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            return {"error": f"Read error: {e}", "status": "failed"}
        
        analyse = {
            "path": agent_path,
            "lines_count": len(content.splitlines()),
            "has_pattern_factory_import": "from core.agent_factory_architecture import Agent" in content,
            "has_agent_inheritance": "class" in content and "(Agent)" in content,
            "has_startup_method": "async def startup(" in content,
            "has_shutdown_method": "async def shutdown(" in content,
            "has_health_check_method": "async def health_check(" in content,
            "is_async_compatible": "async def" in content,
            "pattern_factory_compliance": 0,
            "problemes_identifies": [],
            "recommendations": [],
            "status": "analyzed"
        }
        
        # Calculer compliance Pattern Factory
        compliance_checks = [
            analyse["has_pattern_factory_import"],
            analyse["has_agent_inheritance"],
            analyse["has_startup_method"],
            analyse["has_shutdown_method"],
            analyse["has_health_check_method"],
            analyse["is_async_compatible"]
        ]
        
        analyse["pattern_factory_compliance"] = sum(compliance_checks) / len(compliance_checks) * 100
        
        # Identifier les probl√®mes
        if not analyse["has_pattern_factory_import"]:
            analyse["problemes_identifies"].append("Missing Pattern Factory import")
            analyse["recommendations"].append("Add Pattern Factory import")
            
        if not analyse["has_agent_inheritance"]:
            analyse["problemes_identifies"].append("Not inheriting from Agent base class")
            analyse["recommendations"].append("Refactor to inherit from Agent")
            
        if not analyse["has_startup_method"]:
            analyse["problemes_identifies"].append("Missing startup() method")
            analyse["recommendations"].append("Implement async startup() method")
            
        if not analyse["has_shutdown_method"]:
            analyse["problemes_identifies"].append("Missing shutdown() method")
            analyse["recommendations"].append("Implement async shutdown() method")
            
        if not analyse["has_health_check_method"]:
            analyse["problemes_identifies"].append("Missing health_check() method")
            analyse["recommendations"].append("Implement async health_check() method")
        
        return analyse

class AgentRefactoriseur:
    """Agent sp√©cialis√© dans la refactorisation selon Pattern Factory"""
    
    def __init__(self, coordinateur):
        self.coordinateur = coordinateur
        self.logger = coordinateur.logger
        
    async def refactoriser_agents(self, analyses: Dict[str, Any]) -> Dict[str, Any]:
        """Refactorisation de tous les agents selon Pattern Factory"""
        self.logger.info("üîß D√©but refactorisation Pattern Factory")
        
        resultats = {}
        analyses_detaillees = analyses.get("analyses_detaillees", {})
        
        for agent_path, analyse in analyses_detaillees.items():
            if analyse.get("status") == "failed":
                self.logger.warning(f"‚ö†Ô∏è Skipping {agent_path} (analyse failed)")
                continue
                
            try:
                resultat = await self.refactoriser_agent_unique(agent_path, analyse)
                resultats[agent_path] = resultat
                self.logger.info(f"‚úÖ Agent refactoris√©: {agent_path}")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur refactorisation {agent_path}: {e}")
                resultats[agent_path] = {"error": str(e), "status": "failed"}
        
        resume_refactorisation = {
            "total_agents": len(analyses_detaillees),
            "refactorisation_success": len([r for r in resultats.values() if r.get("status") == "success"]),
            "refactorisation_failed": len([r for r in resultats.values() if r.get("status") == "failed"]),
            "resultats_detailles": resultats,
            "timestamp": datetime.now().isoformat()
        }
        
        self.logger.info(f"üéØ Refactorisation termin√©e: {resume_refactorisation['refactorisation_success']}/{resume_refactorisation['total_agents']} agents refactoris√©s")
        return resume_refactorisation
    
    async def refactoriser_agent_unique(self, agent_path: str, analyse: Dict[str, Any]) -> Dict[str, Any]:
        """Refactorisation d'un agent unique selon Pattern Factory"""
        
        # Backup de l'agent original
        backup_path = f"{agent_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy2(agent_path, backup_path)
        
        try:
            with open(agent_path, 'r', encoding='utf-8') as f:
                contenu_original = f.read()
        except Exception as e:
            return {"error": f"Read error: {e}", "status": "failed"}
        
        # G√©n√©rer le contenu refactoris√©
        contenu_refactorise = await self.generer_contenu_pattern_factory(agent_path, contenu_original, analyse)
        
        try:
            # √âcrire le contenu refactoris√©
            with open(agent_path, 'w', encoding='utf-8') as f:
                f.write(contenu_refactorise)
            
            return {
                "status": "success",
                "backup_path": backup_path,
                "original_lines": len(contenu_original.splitlines()),
                "refactored_lines": len(contenu_refactorise.splitlines()),
                "improvements": self.calculer_ameliorations(analyse),
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            # Restaurer le backup en cas d'erreur
            shutil.copy2(backup_path, agent_path)
            return {"error": f"Write error: {e}", "status": "failed"}
    
    async def generer_contenu_pattern_factory(self, agent_path: str, contenu_original: str, analyse: Dict[str, Any]) -> str:
        """G√©n√®re le contenu refactoris√© selon Pattern Factory"""
        
        # Extraire les informations de base
        agent_name = Path(agent_path).stem
        agent_class_name = self.extraire_nom_classe(contenu_original)
        
        # Template Pattern Factory NextGeneration
        template = f'''#!/usr/bin/env python3
"""
üîç {agent_name.upper().replace('_', ' ')} - PATTERN FACTORY NEXTGENERATION
Mission: [Mission √† adapter selon l'agent original]

Architecture Pattern Factory:
- H√©rite de Agent de base  
- Impl√©mente m√©thodes abstraites obligatoires
- Configuration NextGeneration int√©gr√©e
- Logging Pattern Factory standardis√©

Responsabilit√©s:
- [Responsabilit√©s √† adapter selon l'agent original]
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path
import json
import sys

# Import Pattern Factory (OBLIGATOIRE selon guide)
sys.path.insert(0, str(Path(__file__).parent.parent))
try:
    from core.agent_factory_architecture import Agent, Task, Result
    PATTERN_FACTORY_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Pattern Factory non disponible: {{e}}")
    # Fallback pour compatibilit√©
    class Agent:
        def __init__(self, agent_type: str, **config):
            self.agent_id = f"{agent_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            self.agent_type = agent_type
            self.config = config
            self.logger = logging.getLogger(f"{agent_class_name}")
            
        async def startup(self): pass
        async def shutdown(self): pass
        async def health_check(self): return {{"status": "healthy"}}
    
    class Task:
        def __init__(self, task_id: str, description: str, **kwargs):
            self.task_id = task_id
            self.description = description
            
    class Result:
        def __init__(self, success: bool, data: Any = None, error: str = None):
            self.success = success
            self.data = data
            self.error = error
    
    PATTERN_FACTORY_AVAILABLE = False

class {agent_class_name}(Agent):
    """{agent_class_name} - Pattern Factory NextGeneration"""
    
    def __init__(self, **config):
        # Initialisation Pattern Factory
        super().__init__("{agent_name}", **config)
        
        # Configuration logging Pattern Factory
        self.logger.info(f"üîç {agent_class_name} initialis√© - ID: {{self.agent_id}}")
        
    # Impl√©mentation m√©thodes abstraites OBLIGATOIRES
    async def startup(self):
        """D√©marrage {agent_name}"""
        self.logger.info(f"üöÄ {agent_class_name} {{self.agent_id}} - D√âMARRAGE")
        
        # V√©rifications de d√©marrage
        self.logger.info("‚úÖ Agent d√©marr√© avec succ√®s")
        
    async def shutdown(self):
        """Arr√™t {agent_name}"""
        self.logger.info(f"üõë {agent_class_name} {{self.agent_id}} - ARR√äT")
        
        # Nettoyage des ressources si n√©cessaires
        
    async def health_check(self) -> Dict[str, Any]:
        """V√©rification sant√© {agent_name}"""
        health_status = {{
            "agent_id": self.agent_id,
            "agent_type": self.agent_type,
            "status": "healthy",
            "ready": True,
            "timestamp": datetime.now().isoformat()
        }}
        
        return health_status
    
    # M√©thodes m√©tier (logique existante adapt√©e)
    {self.extraire_methodes_metier(contenu_original)}

# Fonction factory pour cr√©er l'agent (Pattern Factory)
def create_{agent_name}(**config) -> {agent_class_name}:
    """Factory function pour cr√©er un {agent_class_name} conforme Pattern Factory"""
    return {agent_class_name}(**config)

# Test de l'agent si ex√©cut√© directement
async def main():
    """Test de l'agent Pattern Factory"""
    # Cr√©er l'agent via factory
    agent = create_{agent_name}()
    
    try:
        # D√©marrage Pattern Factory
        await agent.startup()
        
        # V√©rification sant√©
        health = await agent.health_check()
        print(f"üè• Health Check: {{health}}")
        
        # Arr√™t propre
        await agent.shutdown()
        
    except Exception as e:
        print(f"‚ùå Erreur execution agent: {{e}}")
        await agent.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
'''
        
        return template
    
    def extraire_nom_classe(self, contenu: str) -> str:
        """Extrait le nom de la classe principale de l'agent"""
        for line in contenu.splitlines():
            if line.strip().startswith("class ") and ":" in line:
                class_line = line.strip()
                class_name = class_line.split("class ")[1].split("(")[0].split(":")[0].strip()
                return class_name
        return "Agent"
    
    def extraire_methodes_metier(self, contenu: str) -> str:
        """Extrait et adapte les m√©thodes m√©tier existantes"""
        # Simplifi√© pour l'exemple - pourrait √™tre plus sophistiqu√©
        return """
    # M√©thodes m√©tier adapt√©es depuis l'agent original
    # TODO: Adapter les m√©thodes sp√©cifiques de l'agent original
    
    async def execute_mission(self, task: Task) -> Result:
        \"\"\"Ex√©cution de la mission principale de l'agent\"\"\"
        try:
            self.logger.info(f"üéØ D√©but mission: {task.description}")
            
            # Logique m√©tier √† adapter depuis l'agent original
            # TODO: Impl√©menter la logique sp√©cifique
            
            self.logger.info("‚úÖ Mission termin√©e avec succ√®s")
            return Result(success=True, data={"status": "completed"})
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur mission: {e}")
            return Result(success=False, error=str(e))
        """
    
    def calculer_ameliorations(self, analyse: Dict[str, Any]) -> List[str]:
        """Calcule les am√©liorations apport√©es par la refactorisation"""
        ameliorations = []
        
        if not analyse.get("has_pattern_factory_import"):
            ameliorations.append("Added Pattern Factory import")
        if not analyse.get("has_agent_inheritance"):
            ameliorations.append("Added Agent inheritance")
        if not analyse.get("has_startup_method"):
            ameliorations.append("Added startup() method")
        if not analyse.get("has_shutdown_method"):
            ameliorations.append("Added shutdown() method")
        if not analyse.get("has_health_check_method"):
            ameliorations.append("Added health_check() method")
        
        ameliorations.extend([
            "Added Pattern Factory configuration",
            "Added structured logging",
            "Added factory function",
            "Added async/await compatibility",
            "Added comprehensive error handling"
        ])
        
        return ameliorations

class AgentValidateur:
    """Agent sp√©cialis√© dans la validation des agents refactoris√©s"""
    
    def __init__(self, coordinateur):
        self.coordinateur = coordinateur
        self.logger = coordinateur.logger
        
    async def valider_agents_refactorises(self, resultats_refactorisation: Dict[str, Any]) -> Dict[str, Any]:
        """Validation de tous les agents refactoris√©s"""
        self.logger.info("‚úÖ D√©but validation des agents refactoris√©s")
        
        validations = {}
        resultats_detailles = resultats_refactorisation.get("resultats_detailles", {})
        
        for agent_path, resultat in resultats_detailles.items():
            if resultat.get("status") != "success":
                self.logger.warning(f"‚ö†Ô∏è Skipping {agent_path} (refactorisation failed)")
                continue
                
            try:
                validation = await self.valider_agent_unique(agent_path)
                validations[agent_path] = validation
                self.logger.info(f"‚úÖ Agent valid√©: {agent_path}")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur validation {agent_path}: {e}")
                validations[agent_path] = {"error": str(e), "status": "failed"}
        
        resume_validation = {
            "total_agents": len(resultats_detailles),
            "validation_success": len([v for v in validations.values() if v.get("status") == "success"]),
            "validation_failed": len([v for v in validations.values() if v.get("status") == "failed"]),
            "validations_detaillees": validations,
            "timestamp": datetime.now().isoformat()
        }
        
        self.logger.info(f"üéØ Validation termin√©e: {resume_validation['validation_success']}/{resume_validation['total_agents']} agents valid√©s")
        return resume_validation
    
    async def valider_agent_unique(self, agent_path: str) -> Dict[str, Any]:
        """Validation d'un agent unique"""
        validation = {
            "path": agent_path,
            "syntax_valid": False,
            "import_test": False,
            "pattern_factory_compliance": 0,
            "tests_passed": [],
            "tests_failed": [],
            "status": "validating"
        }
        
        try:
            # Test 1: Validation syntaxe Python
            with open(agent_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            compile(content, agent_path, 'exec')
            validation["syntax_valid"] = True
            validation["tests_passed"].append("Syntax validation")
            
        except SyntaxError as e:
            validation["tests_failed"].append(f"Syntax error: {e}")
        except Exception as e:
            validation["tests_failed"].append(f"Compilation error: {e}")
        
        # Test 2: Validation imports
        try:
            import importlib.util
            spec = importlib.util.spec_from_file_location("test_module", agent_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            validation["import_test"] = True
            validation["tests_passed"].append("Import test")
            
        except Exception as e:
            validation["tests_failed"].append(f"Import error: {e}")
        
        # Test 3: V√©rification compliance Pattern Factory
        compliance_checks = [
            "from core.agent_factory_architecture import Agent" in content,
            "(Agent)" in content,
            "async def startup(" in content,
            "async def shutdown(" in content,
            "async def health_check(" in content,
            "def create_" in content
        ]
        
        validation["pattern_factory_compliance"] = sum(compliance_checks) / len(compliance_checks) * 100
        
        if validation["pattern_factory_compliance"] >= 80:
            validation["tests_passed"].append("Pattern Factory compliance")
        else:
            validation["tests_failed"].append("Pattern Factory compliance insufficient")
        
        # D√©terminer le statut final
        if validation["syntax_valid"] and validation["pattern_factory_compliance"] >= 80:
            validation["status"] = "success"
        else:
            validation["status"] = "failed"
        
        return validation

class AgentCoordinateurRefactorisation(Agent):
    """Agent Coordinateur Principal - Refactorisation Pattern Factory NextGeneration"""
    
    def __init__(self, **config):
        # Initialisation Pattern Factory
        super().__init__("coordinateur_refactorisation", **config)
        
        # Initialisation des agents sp√©cialis√©s
        self.analyseur = AgentAnalyseurStructurel(self)
        self.refactoriseur = AgentRefactoriseur(self)
        self.validateur = AgentValidateur(self)
        
        # Configuration
        self.workspace_path = Path.cwd()
        self.rapport_path = self.workspace_path / "rapport_refactorisation_pattern_factory.json"
        
        # Configuration logging Pattern Factory
        self.logger.info(f"üéØ Agent Coordinateur Refactorisation initialis√© - ID: {self.agent_id}")
        
    # Impl√©mentation m√©thodes abstraites OBLIGATOIRES
    async def startup(self):
        """D√©marrage coordinateur refactorisation"""
        self.logger.info(f"üöÄ Agent Coordinateur Refactorisation {self.agent_id} - D√âMARRAGE")
        
        # V√©rifications de d√©marrage
        self.logger.info(f"‚úÖ Workspace: {self.workspace_path}")
        self.logger.info(f"‚úÖ Rapport sera g√©n√©r√©: {self.rapport_path}")
        self.logger.info("‚úÖ Agents sp√©cialis√©s initialis√©s")
        
    async def shutdown(self):
        """Arr√™t coordinateur refactorisation"""
        self.logger.info(f"üõë Agent Coordinateur Refactorisation {self.agent_id} - ARR√äT")
        
        # Nettoyage des ressources si n√©cessaires
        
    async def health_check(self) -> Dict[str, Any]:
        """V√©rification sant√© coordinateur refactorisation"""
        health_status = {
            "agent_id": self.agent_id,
            "agent_type": self.agent_type,
            "status": "healthy",
            "workspace_accessible": self.workspace_path.exists(),
            "agents_specialises": {
                "analyseur": self.analyseur is not None,
                "refactoriseur": self.refactoriseur is not None,
                "validateur": self.validateur is not None
            },
            "ready_for_coordination": True,
            "timestamp": datetime.now().isoformat()
        }
        
        return health_status
    
    # M√©thodes de coordination principales
    async def orchestrer_refactorisation_complete(self, agents_list: List[str]) -> Dict[str, Any]:
        """Orchestration compl√®te de la refactorisation Pattern Factory"""
        self.logger.info("üéØ üöÄ D√âBUT ORCHESTRATION REFACTORISATION PATTERN FACTORY")
        
        rapport_complet = {
            "mission": "Refactorisation Pattern Factory NextGeneration",
            "coordinateur_id": self.agent_id,
            "timestamp_debut": datetime.now().isoformat(),
            "agents_cibles": agents_list,
            "phases": {}
        }
        
        try:
            # PHASE 1: Analyse structurelle
            self.logger.info("üìã PHASE 1: Analyse structurelle des agents")
            analyses = await self.analyseur.analyser_agents_existants(agents_list)
            rapport_complet["phases"]["phase1_analyse"] = analyses
            
            # PHASE 2: Refactorisation
            self.logger.info("üîß PHASE 2: Refactorisation Pattern Factory")
            refactorisations = await self.refactoriseur.refactoriser_agents(analyses)
            rapport_complet["phases"]["phase2_refactorisation"] = refactorisations
            
            # PHASE 3: Validation
            self.logger.info("‚úÖ PHASE 3: Validation des agents refactoris√©s")
            validations = await self.validateur.valider_agents_refactorises(refactorisations)
            rapport_complet["phases"]["phase3_validation"] = validations
            
            # PHASE 4: Rapport final
            rapport_complet["timestamp_fin"] = datetime.now().isoformat()
            rapport_complet["duree_totale"] = self.calculer_duree(rapport_complet["timestamp_debut"], rapport_complet["timestamp_fin"])
            rapport_complet["resume_final"] = await self.generer_resume_final(rapport_complet)
            rapport_complet["statut"] = "SUCCESS"
            
            # Sauvegarde du rapport
            await self.sauvegarder_rapport(rapport_complet)
            
            self.logger.info("üéØ ‚úÖ ORCHESTRATION REFACTORISATION TERMIN√âE AVEC SUCC√àS")
            return rapport_complet
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur orchestration: {e}")
            rapport_complet["erreur"] = str(e)
            rapport_complet["statut"] = "FAILED"
            rapport_complet["timestamp_fin"] = datetime.now().isoformat()
            
            await self.sauvegarder_rapport(rapport_complet)
            return rapport_complet
    
    async def generer_resume_final(self, rapport_complet: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√©ration du r√©sum√© final d'orchestration"""
        phases = rapport_complet.get("phases", {})
        
        # Statistiques phases
        phase1 = phases.get("phase1_analyse", {})
        phase2 = phases.get("phase2_refactorisation", {})
        phase3 = phases.get("phase3_validation", {})
        
        resume = {
            "total_agents_cibles": len(rapport_complet.get("agents_cibles", [])),
            "phase1_analyses": {
                "success": phase1.get("analyses_success", 0),
                "failed": phase1.get("analyses_failed", 0)
            },
            "phase2_refactorisations": {
                "success": phase2.get("refactorisation_success", 0),
                "failed": phase2.get("refactorisation_failed", 0)
            },
            "phase3_validations": {
                "success": phase3.get("validation_success", 0),
                "failed": phase3.get("validation_failed", 0)
            },
            "taux_reussite_global": 0,
            "agents_pattern_factory_conformes": [],
            "agents_necessitant_revision": []
        }
        
        # Calcul taux de r√©ussite global
        if resume["total_agents_cibles"] > 0:
            agents_reussis = min(
                resume["phase1_analyses"]["success"],
                resume["phase2_refactorisations"]["success"],
                resume["phase3_validations"]["success"]
            )
            resume["taux_reussite_global"] = (agents_reussis / resume["total_agents_cibles"]) * 100
        
        # Identification des agents conformes et √† r√©viser
        validations_detaillees = phase3.get("validations_detaillees", {})
        for agent_path, validation in validations_detaillees.items():
            if validation.get("status") == "success":
                resume["agents_pattern_factory_conformes"].append(agent_path)
            else:
                resume["agents_necessitant_revision"].append(agent_path)
        
        return resume
    
    def calculer_duree(self, debut: str, fin: str) -> str:
        """Calcule la dur√©e entre deux timestamps"""
        try:
            dt_debut = datetime.fromisoformat(debut)
            dt_fin = datetime.fromisoformat(fin)
            duree = dt_fin - dt_debut
            return str(duree)
        except:
            return "N/A"
    
    async def sauvegarder_rapport(self, rapport: Dict[str, Any]):
        """Sauvegarde du rapport de refactorisation"""
        try:
            with open(self.rapport_path, 'w', encoding='utf-8') as f:
                json.dump(rapport, f, indent=2, ensure_ascii=False)
            self.logger.info(f"üìÑ Rapport sauvegard√©: {self.rapport_path}")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur sauvegarde rapport: {e}")

# Fonction factory pour cr√©er l'agent (Pattern Factory)
def create_agent_coordinateur_refactorisation(**config) -> AgentCoordinateurRefactorisation:
    """Factory function pour cr√©er un Agent Coordinateur Refactorisation conforme Pattern Factory"""
    return AgentCoordinateurRefactorisation(**config)

# Fonction utilitaire pour lister les agents √† refactoriser
def lister_agents_a_refactoriser() -> List[str]:
    """Liste tous les agents Python √† refactoriser"""
    agents_list = [
        "agent_1_analyseur_structure.py",
        "agent_3_adaptateur_code.py",
        "agent_4_testeur_integration.py",
        "agent_5_documenteur.py",
        "agent_6_validateur_final.py",
        "agent_adaptateur_documentation.py",
        "agent_analyseur_outils.py",
        "agent_coordinateur_reorganisation_outils.py",
        "agent_meta_strategique.py",
        "agent_organisateur_structure.py",
        "agent_rapport_final.py",
        "agent_simple.py",
        "agent_testeur_integration.py",
        "agent_testeur_leger.py",
        "agents_integration_orchestrateur_rtx3090.py",
        "agents_optimisations_complementaires_rtx3090.py",
        "agents_validation_ollama_rtx3090.py",
        "agents_validation_plan_travail.py",
        "benchmark_rtx3090_complet.py"
    ]
    
    # Filtrer les agents qui existent
    agents_existants = []
    for agent in agents_list:
        if Path(agent).exists():
            agents_existants.append(agent)
    
    return agents_existants

# Ex√©cution principale si appel√© directement
async def main():
    """Ex√©cution principale de l'orchestration"""
    # Cr√©er l'agent coordinateur via factory
    coordinateur = create_agent_coordinateur_refactorisation()
    
    try:
        # D√©marrage Pattern Factory
        await coordinateur.startup()
        
        # V√©rification sant√©
        health = await coordinateur.health_check()
        print(f"üè• Health Check Coordinateur: {health}")
        
        # Lister les agents √† refactoriser
        agents_list = lister_agents_a_refactoriser()
        print(f"üìã Agents √† refactoriser: {len(agents_list)} agents")
        
        # Orchestration compl√®te
        rapport = await coordinateur.orchestrer_refactorisation_complete(agents_list)
        
        # Affichage du r√©sum√©
        print("\nüéØ R√âSUM√â FINAL REFACTORISATION:")
        print(f"üìä Statut: {rapport.get('statut', 'UNKNOWN')}")
        if "resume_final" in rapport:
            resume = rapport["resume_final"]
            print(f"‚úÖ Agents conformes Pattern Factory: {len(resume.get('agents_pattern_factory_conformes', []))}")
            print(f"‚ö†Ô∏è Agents n√©cessitant r√©vision: {len(resume.get('agents_necessitant_revision', []))}")
            print(f"üìà Taux de r√©ussite global: {resume.get('taux_reussite_global', 0):.1f}%")
        
        # Arr√™t propre
        await coordinateur.shutdown()
        
    except Exception as e:
        print(f"‚ùå Erreur execution coordinateur: {e}")
        await coordinateur.shutdown()

if __name__ == "__main__":
    asyncio.run(main()) 
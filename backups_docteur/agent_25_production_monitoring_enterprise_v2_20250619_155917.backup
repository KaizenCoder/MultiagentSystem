#!/usr/bin/env python3
"""
üöÄ AGENT 25 V2 - PRODUCTION MONITORING ENTERPRISE (PATTERN FACTORY COMPLIANT)
==============================================================================

REFACTORING : Monolithe 694 lignes ‚Üí Pattern Factory modulaire ~80 lignes
‚úÖ Utilise core/agent_factory_architecture.py
‚úÖ Features modulaires r√©utilisables
‚úÖ Respect du principe DRY

FONCTIONNALIT√âS ENTERPRISE V2 :
‚úÖ Monitoring ML-based via MLAnomalyFeature
‚úÖ Dashboards enterprise via DashboardFeature
‚úÖ Alerting intelligent via AlertingFeature
‚úÖ SLA monitoring via SLAMonitoringFeature
‚úÖ Analytics pr√©dictifs via PredictiveFeature

Author: Agent Factory Enterprise Team
Version: 2.0.0 - Pattern Factory Compliant
Created: 2024-12-19 (Refactoris√©)
"""

import logging
import sys
from pathlib import Path
from typing import Dict, List, Any

# ===== UTILISATION PATTERN FACTORY =====
try:
    core_path = Path(__file__).parent.parent / "core"
    sys.path.insert(0, str(core_path))
    from agent_factory_architecture import Agent, Task, Result, AgentType
    print("‚úÖ Pattern Factory Core charg√©")
except ImportError as e:
    print(f"‚ùå Pattern Factory Core non disponible: {e}")
    raise

# ===== FEATURES ENTERPRISE MODULAIRES =====
try:
    # Import des features modulaires (√† cr√©er si n√©cessaire)
    from features.enterprise.production_monitoring import (
        MLAnomalyFeature,
        DashboardFeature, 
        AlertingFeature,
        SLAMonitoringFeature,
        PredictiveFeature,
        ComplianceFeature
    )
    print("‚úÖ Features Monitoring Enterprise charg√©es")
    FEATURES_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Features Monitoring Enterprise en cours de cr√©ation - Mode basique activ√©")
    FEATURES_AVAILABLE = False
    
    # Classes minimales temporaires
    class BaseFeature:
        def __init__(self, config): self.config = config
        def can_handle(self, task): return False
        def execute(self, task): return Result(False, error="Feature not implemented")
    
    class MLAnomalyFeature(BaseFeature): pass
    class DashboardFeature(BaseFeature): pass
    class AlertingFeature(BaseFeature): pass
    class SLAMonitoringFeature(BaseFeature): pass
    class PredictiveFeature(BaseFeature): pass
    class ComplianceFeature(BaseFeature): pass

# ===== CONFIGURATION LOGGING =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== AGENT 25 V2 PATTERN FACTORY COMPLIANT =====

class Agent25ProductionMonitoringEnterpriseV2(Agent):
    """
    üöÄ Agent 25 V2 - Production Monitoring Enterprise (Pattern Factory Compliant)
    
    DIFF√âRENCE FONDAMENTALE :
    ‚ùå AVANT : 694 lignes monolithique avec red√©finition des classes
    ‚úÖ APR√àS : ~80 lignes utilisant Pattern Factory + features modulaires
    """
    
    def __init__(self, template=None, **config):
        # Initialisation via Pattern Factory
        super().__init__(AgentType.MONITORING.value, **config)
        
        self.agent_version = "2.0.0-PatternFactory"
        self.compliance_target = config.get('compliance_target', 80)
        
        # Initialisation features enterprise modulaires
        self._initialize_monitoring_features(config)
        
        logger.info(f"‚úÖ Agent 25 V2 Monitoring Enterprise initialis√© - Pattern Factory compliant")
    
    def _initialize_monitoring_features(self, config: Dict[str, Any]):
        """Initialise les features monitoring enterprise modulaires"""
        self.features = [
            MLAnomalyFeature(config.get('ml_anomaly', {})),
            DashboardFeature(config.get('dashboards', {})),
            AlertingFeature(config.get('alerting', {})),
            SLAMonitoringFeature(config.get('sla_monitoring', {})),
            PredictiveFeature(config.get('predictive', {})),
            ComplianceFeature(config.get('compliance', {}))
        ]
        
        logger.info(f"‚úÖ {len(self.features)} features monitoring enterprise initialis√©es")
    
    def get_capabilities(self) -> List[str]:
        """üìã Capacit√©s de l'agent Production Monitoring Enterprise V2"""
        return [
            "ml_anomaly_setup",
            "advanced_dashboards_creation",
            "intelligent_alerting_config",
            "sla_monitoring_setup",
            "predictive_analytics",
            "compliance_reporting"
        ]
    
    def execute_task(self, task: Task) -> Result:
        """
        üéØ Ex√©cution de t√¢che via features modulaires
        
        Pattern Factory : Dispatch vers feature appropri√©e
        """
        try:
            start_time = time.time()
            logger.info(f"üöÄ Ex√©cution t√¢che {task.type} via features monitoring modulaires")
            
            # Dispatch vers feature appropri√©e
            for feature in self.features:
                if feature.can_handle(task):
                    result = feature.execute(task)
                    execution_time = (time.time() - start_time) * 1000
                    
                    # Enrichissement du r√©sultat avec m√©triques
                    result.metrics.update({
                        "agent_id": self.id,
                        "agent_version": self.agent_version,
                        "execution_time_ms": execution_time,
                        "feature_used": feature.__class__.__name__,
                        "monitoring_domain": "production_enterprise"
                    })
                    
                    return result
            
            # Aucune feature ne peut traiter la t√¢che
            return Result(
                success=False,
                error=f"Task type '{task.type}' not supported by any monitoring feature",
                agent_id=self.id,
                task_id=task.id
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erreur ex√©cution t√¢che monitoring {task.type}: {e}")
            return Result(
                success=False,
                error=str(e),
                agent_id=self.id,
                task_id=task.id
            )

# ===== FACTORY FONCTION =====

def create_agent_25_v2_monitoring(**config) -> Agent25ProductionMonitoringEnterpriseV2:
    """
    üè≠ Cr√©ation Agent 25 V2 via Pattern Factory
    
    Usage: agent = create_agent_25_v2_monitoring(compliance_target=85)
    """
    return Agent25ProductionMonitoringEnterpriseV2(**config)

# ===== EXEMPLE UTILISATION =====

async def demo_monitoring_pattern_factory():
    """D√©mo utilisation Pattern Factory monitoring compliant"""
    print("üöÄ D√©mo Agent 25 V2 - Pattern Factory Monitoring Compliant")
    
    # Cr√©ation via factory
    agent = create_agent_25_v2_monitoring(
        compliance_target=85,
        ml_anomaly={'models': ['isolation_forest']},
        dashboards={'type': 'enterprise'},
        sla_monitoring={'targets': {'availability': 99.95}}
    )
    
    # Test t√¢ches monitoring
    tasks = [
        Task("ml_anomaly_setup", {"models": ["isolation_forest", "one_class_svm"]}),
        Task("advanced_dashboards_creation", {"type": "executive"}),
        Task("sla_monitoring_setup", {"metrics": ["availability", "response_time"]})
    ]
    
    for task in tasks:
        result = agent.execute_task(task)
        print(f"‚úÖ Monitoring Task {task.type}: {result.success}")

if __name__ == "__main__":
    import asyncio
    import time
    
    asyncio.run(demo_monitoring_pattern_factory()) 
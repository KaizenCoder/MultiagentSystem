#!/usr/bin/env python3
# Cr√©ation de la base de donn√©es nextgeneration

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

print("üóÑÔ∏è Cr√©ation de la base de donn√©es nextgeneration...")

try:
    # Connexion √† la base syst√®me
    conn = psycopg2.connect(
        host='localhost',
        user='postgres',
        password='postgres',
        database='postgres'
    )
    
    # Mode autocommit pour CREATE DATABASE
    conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
    cursor = conn.cursor()
    
    # V√©rifier si la base existe d√©j√†
    cursor.execute("SELECT 1 FROM pg_database WHERE datname = 'nextgeneration'")
    exists = cursor.fetchone()
    
    if exists:
        print("‚úÖ Base de donn√©es 'nextgeneration' existe d√©j√†")
    else:
        # Cr√©er la base de donn√©es
        cursor.execute("CREATE DATABASE nextgeneration")
        print("‚úÖ Base de donn√©es 'nextgeneration' cr√©√©e avec succ√®s")
    
    cursor.close()
    conn.close()
    
    # Test de connexion √† la nouvelle base
    print("üîç Test de connexion √† la base nextgeneration...")
    test_conn = psycopg2.connect(
        host='localhost',
        user='postgres',
        password='postgres',
        database='nextgeneration'
    )
    
    test_cursor = test_conn.cursor()
    test_cursor.execute("SELECT version()")
    version = test_cursor.fetchone()[0]
    print(f"‚úÖ Connexion r√©ussie : {version[:50]}...")
    
    test_cursor.close()
    test_conn.close()
    
    print()
    print("üéâ BASE DE DONN√âES NEXTGENERATION PR√äTE !")
    
except Exception as e:
    print(f"‚ùå Erreur : {e}") 
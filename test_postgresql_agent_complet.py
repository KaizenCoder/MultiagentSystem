#!/usr/bin/env python3
"""
Script de test complet pour l'agent PostgreSQL Testing Specialist
Teste tous les types de rapports strat√©giques
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# Ajouter le r√©pertoire au path
sys.path.insert(0, str(Path.cwd()))

async def test_agent_postgresql_complet():
    from agents.agent_testeur_agents_complet import create_agent_testeur_agents
    
    print('üß™ TEST COMPLET DE L\'AGENT POSTGRESQL TESTING SPECIALIST')
    print('=' * 70)
    
    # Cr√©er l'agent testeur
    agent_testeur = create_agent_testeur_agents(safe_mode=True, test_timeout=30)
    
    try:
        # D√©marrage
        await agent_testeur.startup()
        
        # Test sp√©cifique de l'agent PostgreSQL
        print('\nüìã Test de l\'agent PostgreSQL Testing Specialist...')
        
        task_test = {
            'type': 'test_agent',
            'agent_path': 'agents/agent_POSTGRESQL_testing_specialist.py'
        }
        
        result = await agent_testeur.execute_task(task_test)
        
        print(f'‚úÖ Test de base termin√© - Score: {result.get("score_global", 0)}/100')
        
        # Context pour tous les rapports
        context = {
            'agent_teste': 'agent_POSTGRESQL_testing_specialist.py',
            'objectif': 'validation_complete_postgresql',
            'resultats_test': result,
            'specialisation': 'postgresql_testing'
        }
        
        # Test de tous les types de rapports
        types_rapports = ['testing', 'compliance', 'performance_tests', 'quality_assurance']
        
        for type_rapport in types_rapports:
            print(f'\nüìä G√©n√©ration rapport {type_rapport.upper()}...')
            
            try:
                # G√©n√©ration rapport JSON
                rapport = await agent_testeur.generer_rapport_strategique(context, type_rapport)
                
                if rapport:
                    print(f'‚úÖ Rapport {type_rapport} g√©n√©r√©')
                    print(f'   - Type: {rapport.get("type_rapport")}')
                    
                    # G√©n√©ration rapport markdown
                    rapport_md = await agent_testeur.generer_rapport_markdown(rapport, type_rapport, context)
                    
                    # Sauvegarde
                    timestamp_str = datetime.now().strftime('%Y-%m-%d_%H%M%S')
                    rapport_path = Path('reports') / 'agent_testeur_agents' / f'postgresql_{type_rapport}_{timestamp_str}.md'
                    rapport_path.parent.mkdir(parents=True, exist_ok=True)
                    
                    with open(rapport_path, 'w', encoding='utf-8') as f:
                        f.write(rapport_md)
                    
                    print(f'   - Sauvegard√©: {rapport_path}')
                    
                    # Affichage d'informations sp√©cifiques selon le type
                    if type_rapport == 'testing':
                        resume = rapport.get('resume_executif', {})
                        print(f'   - Score Testing: {resume.get("score_testing_global", 0):.1f}/100')
                        print(f'   - Statut: {resume.get("statut_general", "UNKNOWN")}')
                    
                    elif type_rapport == 'compliance':
                        print(f'   - Taux Conformit√©: {rapport.get("taux_conformite_global", 0):.1f}%')
                        print(f'   - Niveau: {rapport.get("niveau_conformite", "UNKNOWN")}')
                    
                    elif type_rapport == 'performance_tests':
                        print(f'   - Dur√©e Moyenne: {rapport.get("duree_moyenne_test", 0)}s')
                        print(f'   - Efficacit√©: {rapport.get("efficacite_tests", 0):.1f}%')
                    
                    elif type_rapport == 'quality_assurance':
                        print(f'   - Score QA Global: {rapport.get("score_qa_global", 0)}/100')
                        print(f'   - Niveau Assurance: {rapport.get("niveau_assurance", "BRONZE")}')
                
            except Exception as e:
                print(f'‚ùå Erreur g√©n√©ration rapport {type_rapport}: {e}')
        
        # Test de monitoring sant√©
        print('\nüè• Test monitoring sant√© agents...')
        monitoring_result = await agent_testeur.monitorer_sante_agents()
        print(f'‚úÖ Monitoring: {monitoring_result.get("status", "unknown")}')
        
        # Test validation conformit√©
        print('\nüìê Test validation conformit√© Pattern Factory...')
        conformite_result = await agent_testeur.valider_conformite_pattern_factory()
        print(f'‚úÖ Conformit√©: {conformite_result.get("score", 0)}/100')
        
        # Arr√™t propre
        await agent_testeur.shutdown()
        
        print('\nüéØ TESTS COMPLETS TERMIN√âS AVEC SUCC√àS!')
        print(f'üìä {len(types_rapports)} rapports g√©n√©r√©s pour l\'agent PostgreSQL')
        
    except Exception as e:
        print(f'‚ùå Erreur durant les tests: {e}')
        import traceback
        traceback.print_exc()
        await agent_testeur.shutdown()

if __name__ == "__main__":
    asyncio.run(test_agent_postgresql_complet()) 
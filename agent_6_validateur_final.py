#!/usr/bin/env python3
"""
Agent 6 - Validateur Final
Partie du syst√®me NextGeneration - √âquipe d'agents pour importation d'outils

Mission: Validation finale de l'int√©gration des outils et op√©rations Git
Mod√®le: Claude Sonnet 4 (validation et op√©rations critiques)
"""

import os
import sys
import json
import logging
import subprocess
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime

class AgentValidateurFinal:
    """Agent 6 - Validateur Final pour l'importation d'outils SuperWhisper_V6"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.tools_dir = self.project_root / "tools" / "imported_tools"
        self.reports_dir = self.project_root / "reports" / "tools_integration"
        
        # Configuration logging
        self.logger = logging.getLogger("Agent6_ValidateurFinal")
        self.logger.setLevel(logging.INFO)
        
        if not self.logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
    
    def valider_integration_complete(self, rapport_phases: Dict[str, Any]) -> Dict[str, Any]:
        """
        Validation finale de l'int√©gration compl√®te
        
        Args:
            rapport_phases: Rapports de toutes les phases pr√©c√©dentes
            
        Returns:
            Dict contenant le r√©sultat de validation et actions Git
        """
        self.logger.info("üîç D√©marrage validation finale de l'int√©gration")
        
        validation_result = {
            "timestamp": datetime.now().isoformat(),
            "agent": "Agent6_ValidateurFinal",
            "model": "Claude Sonnet 4",
            "validation_checks": {},
            "git_operations": {},
            "final_status": "unknown",
            "recommendations": []
        }
        
        try:
            # 1. Validation structure des outils
            structure_valid = self._valider_structure_outils()
            validation_result["validation_checks"]["structure"] = structure_valid
            
            # 2. Validation coh√©rence des rapports
            coherence_valid = self._valider_coherence_rapports(rapport_phases)
            validation_result["validation_checks"]["coherence"] = coherence_valid
            
            # 3. Validation configuration
            config_valid = self._valider_configuration()
            validation_result["validation_checks"]["configuration"] = config_valid
            
            # 4. Validation documentation
            docs_valid = self._valider_documentation()
            validation_result["validation_checks"]["documentation"] = docs_valid
            
            # 5. D√©terminer si int√©gration est r√©ussie
            integration_success = all([
                structure_valid["status"] == "success",
                coherence_valid["status"] == "success", 
                config_valid["status"] == "success",
                docs_valid["status"] == "success"
            ])
            
            validation_result["final_status"] = "success" if integration_success else "partial"
            
            # 6. Op√©rations Git si succ√®s
            if integration_success:
                git_result = self._executer_operations_git()
                validation_result["git_operations"] = git_result
                
                if git_result["status"] == "success":
                    validation_result["final_status"] = "complete_success"
                    self.logger.info("‚úÖ Int√©gration compl√®te avec succ√®s Git")
                else:
                    validation_result["final_status"] = "success_no_git"
                    self.logger.warning("‚ö†Ô∏è Int√©gration r√©ussie mais √©chec Git")
            else:
                self.logger.warning("‚ö†Ô∏è Int√©gration partielle - pas d'op√©rations Git")
            
            # 7. G√©n√©rer recommandations
            validation_result["recommendations"] = self._generer_recommandations(validation_result)
            
            self.logger.info(f"‚úÖ Validation termin√©e - Status: {validation_result['final_status']}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur validation finale: {str(e)}")
            validation_result["final_status"] = "error"
            validation_result["error"] = str(e)
        
        return validation_result
    
    def _valider_structure_outils(self) -> Dict[str, Any]:
        """Valide la structure des outils import√©s"""
        self.logger.info("üîç Validation structure des outils")
        
        result = {
            "status": "unknown",
            "tools_found": 0,
            "categories": [],
            "missing_files": [],
            "issues": []
        }
        
        try:
            if not self.tools_dir.exists():
                result["status"] = "error"
                result["issues"].append("R√©pertoire tools/imported_tools n'existe pas")
                return result
            
            # Compter les outils par cat√©gorie
            categories = [d for d in self.tools_dir.iterdir() if d.is_dir() and d.name != "__pycache__"]
            result["categories"] = [cat.name for cat in categories]
            
            total_tools = 0
            for category in categories:
                tools_in_cat = [f for f in category.glob("*.py") if f.name != "__init__.py"]
                total_tools += len(tools_in_cat)
            
            result["tools_found"] = total_tools
            
            # V√©rifier fichiers essentiels
            essential_files = [
                self.tools_dir / "tools_config.json",
                self.tools_dir / "run_tool.py",
                self.tools_dir / "requirements.txt",
                self.tools_dir / "README.md"
            ]
            
            for file_path in essential_files:
                if not file_path.exists():
                    result["missing_files"].append(str(file_path.relative_to(self.project_root)))
            
            if result["missing_files"]:
                result["status"] = "warning"
                result["issues"].append(f"Fichiers manquants: {len(result['missing_files'])}")
            else:
                result["status"] = "success"
            
            self.logger.info(f"üìä Structure: {total_tools} outils, {len(categories)} cat√©gories")
            
        except Exception as e:
            result["status"] = "error"
            result["issues"].append(f"Erreur validation structure: {str(e)}")
        
        return result
    
    def _valider_coherence_rapports(self, rapport_phases: Dict[str, Any]) -> Dict[str, Any]:
        """Valide la coh√©rence entre les rapports des phases"""
        self.logger.info("üîç Validation coh√©rence des rapports")
        
        result = {
            "status": "unknown",
            "phases_completed": 0,
            "tools_consistency": True,
            "issues": []
        }
        
        try:
            phases_attendues = ["phase1", "phase2", "phase3", "phase4", "phase5"]
            phases_trouvees = [p for p in phases_attendues if p in rapport_phases]
            result["phases_completed"] = len(phases_trouvees)
            
            # V√©rifier coh√©rence nombre d'outils
            if "phase1" in rapport_phases and "phase3" in rapport_phases:
                tools_analysed = rapport_phases["phase1"].get("tools_analysed", 0)
                tools_adapted = rapport_phases["phase3"].get("tools_adapted", 0)
                
                if tools_adapted > tools_analysed:
                    result["tools_consistency"] = False
                    result["issues"].append("Plus d'outils adapt√©s que analys√©s")
            
            # V√©rifier statuts des phases
            phases_success = all(
                rapport_phases.get(phase, {}).get("status") == "success" 
                for phase in phases_trouvees
            )
            
            if phases_success and result["tools_consistency"]:
                result["status"] = "success"
            elif len(phases_trouvees) >= 3:
                result["status"] = "warning"
                result["issues"].append("Phases incompl√®tes mais minimum atteint")
            else:
                result["status"] = "error"
                result["issues"].append("Trop peu de phases compl√©t√©es")
            
            self.logger.info(f"üìä Coh√©rence: {len(phases_trouvees)}/5 phases, coh√©rent: {result['tools_consistency']}")
            
        except Exception as e:
            result["status"] = "error"
            result["issues"].append(f"Erreur validation coh√©rence: {str(e)}")
        
        return result
    
    def _valider_configuration(self) -> Dict[str, Any]:
        """Valide la configuration des outils"""
        self.logger.info("üîç Validation configuration")
        
        result = {
            "status": "unknown",
            "config_valid": False,
            "launcher_valid": False,
            "requirements_valid": False,
            "issues": []
        }
        
        try:
            # V√©rifier tools_config.json
            config_file = self.tools_dir / "tools_config.json"
            if config_file.exists():
                try:
                    with open(config_file, 'r', encoding='utf-8') as f:
                        config_data = json.load(f)
                    
                    if "tools" in config_data and "metadata" in config_data:
                        result["config_valid"] = True
                    else:
                        result["issues"].append("Configuration JSON incompl√®te")
                except json.JSONDecodeError:
                    result["issues"].append("Configuration JSON invalide")
            else:
                result["issues"].append("Fichier configuration manquant")
            
            # V√©rifier run_tool.py
            launcher_file = self.tools_dir / "run_tool.py"
            if launcher_file.exists() and launcher_file.stat().st_size > 100:
                result["launcher_valid"] = True
            else:
                result["issues"].append("Lanceur invalide ou manquant")
            
            # V√©rifier requirements.txt
            req_file = self.tools_dir / "requirements.txt"
            if req_file.exists():
                try:
                    with open(req_file, 'r', encoding='utf-8') as f:
                        requirements = f.read().strip()
                    
                    if requirements:
                        result["requirements_valid"] = True
                    else:
                        result["issues"].append("Requirements vide")
                except Exception:
                    result["issues"].append("Erreur lecture requirements")
            else:
                result["issues"].append("Requirements manquant")
            
            # Statut global
            if all([result["config_valid"], result["launcher_valid"], result["requirements_valid"]]):
                result["status"] = "success"
            elif result["config_valid"] or result["launcher_valid"]:
                result["status"] = "warning"
            else:
                result["status"] = "error"
            
            self.logger.info(f"‚öôÔ∏è Config: {result['config_valid']}, Launcher: {result['launcher_valid']}, Req: {result['requirements_valid']}")
            
        except Exception as e:
            result["status"] = "error"
            result["issues"].append(f"Erreur validation config: {str(e)}")
        
        return result
    
    def _valider_documentation(self) -> Dict[str, Any]:
        """Valide la documentation g√©n√©r√©e"""
        self.logger.info("üîç Validation documentation")
        
        result = {
            "status": "unknown",
            "docs_found": 0,
            "readme_valid": False,
            "issues": []
        }
        
        try:
            # Compter les fichiers de documentation
            doc_files = list(self.tools_dir.glob("**/*.md"))
            result["docs_found"] = len(doc_files)
            
            # V√©rifier README principal
            readme_file = self.tools_dir / "README.md"
            if readme_file.exists():
                try:
                    with open(readme_file, 'r', encoding='utf-8') as f:
                        readme_content = f.read()
                    
                    if len(readme_content) > 200 and "NextGeneration" in readme_content:
                        result["readme_valid"] = True
                    else:
                        result["issues"].append("README trop court ou incomplet")
                except Exception:
                    result["issues"].append("Erreur lecture README")
            else:
                result["issues"].append("README principal manquant")
            
            # Statut bas√© sur la documentation
            if result["readme_valid"] and result["docs_found"] >= 3:
                result["status"] = "success"
            elif result["readme_valid"] or result["docs_found"] >= 1:
                result["status"] = "warning"
            else:
                result["status"] = "error"
            
            self.logger.info(f"üìö Documentation: {result['docs_found']} fichiers, README: {result['readme_valid']}")
            
        except Exception as e:
            result["status"] = "error"
            result["issues"].append(f"Erreur validation docs: {str(e)}")
        
        return result
    
    def _executer_operations_git(self) -> Dict[str, Any]:
        """Ex√©cute les op√©rations Git (add, commit, push)"""
        self.logger.info("üîÑ Ex√©cution op√©rations Git")
        
        result = {
            "status": "unknown",
            "operations": [],
            "commit_hash": None,
            "issues": []
        }
        
        try:
            os.chdir(self.project_root)
            
            # 1. Git add des nouveaux outils
            add_cmd = ["git", "add", "tools/imported_tools/"]
            add_result = subprocess.run(add_cmd, capture_output=True, text=True)
            
            result["operations"].append({
                "command": "git add",
                "success": add_result.returncode == 0,
                "output": add_result.stdout if add_result.returncode == 0 else add_result.stderr
            })
            
            if add_result.returncode != 0:
                result["issues"].append(f"√âchec git add: {add_result.stderr}")
                result["status"] = "error"
                return result
            
            # 2. V√©rifier s'il y a des changements √† commiter
            status_cmd = ["git", "status", "--porcelain", "tools/imported_tools/"]
            status_result = subprocess.run(status_cmd, capture_output=True, text=True)
            
            if not status_result.stdout.strip():
                result["status"] = "no_changes"
                result["issues"].append("Aucun changement √† commiter")
                return result
            
            # 3. Git commit
            commit_message = f"feat: Import outils SuperWhisper_V6 - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            commit_cmd = ["git", "commit", "-m", commit_message]
            commit_result = subprocess.run(commit_cmd, capture_output=True, text=True)
            
            result["operations"].append({
                "command": "git commit",
                "success": commit_result.returncode == 0,
                "output": commit_result.stdout if commit_result.returncode == 0 else commit_result.stderr
            })
            
            if commit_result.returncode != 0:
                result["issues"].append(f"√âchec git commit: {commit_result.stderr}")
                result["status"] = "error"
                return result
            
            # Extraire hash du commit
            if "commit" in commit_result.stdout.lower():
                lines = commit_result.stdout.split('\n')
                for line in lines:
                    if line.strip().startswith('['):
                        # Format: [branch hash] message
                        parts = line.split(']')[0].split()
                        if len(parts) >= 2:
                            result["commit_hash"] = parts[1]
                        break
            
            # 4. Git push
            push_cmd = ["git", "push"]
            push_result = subprocess.run(push_cmd, capture_output=True, text=True)
            
            result["operations"].append({
                "command": "git push",
                "success": push_result.returncode == 0,
                "output": push_result.stdout if push_result.returncode == 0 else push_result.stderr
            })
            
            if push_result.returncode != 0:
                result["issues"].append(f"√âchec git push: {push_result.stderr}")
                result["status"] = "partial"  # Commit OK mais push KO
            else:
                result["status"] = "success"
            
            self.logger.info(f"‚úÖ Git: Add ‚úì, Commit ‚úì ({result['commit_hash']}), Push: {push_result.returncode == 0}")
            
        except Exception as e:
            result["status"] = "error"
            result["issues"].append(f"Erreur op√©rations Git: {str(e)}")
            self.logger.error(f"‚ùå Erreur Git: {str(e)}")
        
        return result
    
    def _generer_recommandations(self, validation_result: Dict[str, Any]) -> List[str]:
        """G√©n√®re des recommandations bas√©es sur les r√©sultats de validation"""
        recommendations = []
        
        # Recommandations bas√©es sur le statut final
        if validation_result["final_status"] == "complete_success":
            recommendations.append("‚úÖ Int√©gration compl√®te r√©ussie - Outils pr√™ts √† l'utilisation")
            recommendations.append("üîß Ex√©cuter 'pip install -r tools/imported_tools/requirements.txt' pour installer les d√©pendances")
            recommendations.append("üìñ Consulter tools/imported_tools/README.md pour guide d'utilisation")
        
        elif validation_result["final_status"] == "success_no_git":
            recommendations.append("‚ö†Ô∏è Int√©gration r√©ussie mais op√©rations Git √©chou√©es")
            recommendations.append("üîÑ Effectuer manuellement: git add tools/imported_tools/ && git commit -m 'Import outils' && git push")
        
        elif validation_result["final_status"] == "partial":
            recommendations.append("‚ö†Ô∏è Int√©gration partielle - V√©rifier les probl√®mes signal√©s")
            
            # Recommandations sp√©cifiques par type de probl√®me
            checks = validation_result.get("validation_checks", {})
            
            if checks.get("structure", {}).get("status") != "success":
                recommendations.append("üîß Corriger la structure des outils import√©s")
            
            if checks.get("configuration", {}).get("status") != "success":
                recommendations.append("‚öôÔ∏è V√©rifier et corriger la configuration (tools_config.json, run_tool.py)")
            
            if checks.get("documentation", {}).get("status") != "success":
                recommendations.append("üìö Compl√©ter la documentation manquante")
        
        else:
            recommendations.append("‚ùå Int√©gration √©chou√©e - Relancer le processus apr√®s correction des erreurs")
        
        # Recommandations g√©n√©rales
        recommendations.append("üß™ Tester les outils import√©s avant utilisation en production")
        recommendations.append("üìä Consulter le rapport d√©taill√© pour plus d'informations")
        
        return recommendations
    
    def validate_and_commit(self, phase5_data: Dict[str, Any], mission_metrics: Dict[str, Any]) -> Dict[str, Any]:
        """
        Interface de compatibilit√© avec le coordinateur
        
        Args:
            phase5_data: Donn√©es de la phase 5 (documentation)
            mission_metrics: M√©triques de la mission compl√®te
            
        Returns:
            Dict contenant les r√©sultats de validation et op√©rations Git
        """
        # Construire le rapport des phases √† partir des m√©triques
        rapport_phases = {
            "phase1": {
                "status": "success",
                "tools_analysed": mission_metrics.get("total_tools_analysed", 0)
            },
            "phase2": {
                "status": "success", 
                "tools_selected": mission_metrics.get("total_tools_selected", 0)
            },
            "phase3": {
                "status": "success",
                "tools_adapted": mission_metrics.get("total_tools_adapted", 0)
            },
            "phase4": {
                "status": "success",
                "tools_tested": mission_metrics.get("total_tools_tested", 0)
            },
            "phase5": {
                "status": "success",
                "docs_created": phase5_data.get("docs_created", 0)
            }
        }
        
        return self.valider_integration_complete(rapport_phases)

def main():
    """Point d'entr√©e principal pour tests"""
    import tempfile
    
    # Test avec r√©pertoire temporaire
    with tempfile.TemporaryDirectory() as temp_dir:
        agent = AgentValidateurFinal(temp_dir)
        
        # Test de validation avec rapport factice
        rapport_test = {
            "phase1": {"status": "success", "tools_analysed": 5},
            "phase3": {"status": "success", "tools_adapted": 3}
        }
        
        result = agent.valider_integration_complete(rapport_test)
        print(json.dumps(result, indent=2, ensure_ascii=False))

if __name__ == "__main__":
    main() 
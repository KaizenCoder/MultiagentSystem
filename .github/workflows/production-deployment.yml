# üöÄ Production Deployment Pipeline - CI/CD Enterprise
# IA-2 Architecture & Production - Sprint 1.4
name: Production Deployment Enterprise

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment Type'
        required: true
        default: 'blue-green'
        type: choice
        options:
        - blue-green
        - canary
        - rolling
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/orchestrator
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}

jobs:
  # ==================== SECURITY SCANNING ====================
  security-scan:
    name: üîí Security & Vulnerability Scanning
    runs-on: ubuntu-latest
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üîç Trivy Container Vulnerability Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'

    - name: üõ°Ô∏è OWASP ZAP Security Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8002'
        docker_name: 'owasp/zap2docker-stable'
        token: ${{ secrets.GITHUB_TOKEN }}
        rules_file_name: '.zap/rules.tsv'

    - name: üîê Secret Scanning with GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: üìä Security Check Summary
      id: security-check
      run: |
        echo "Security scanning completed"
        echo "passed=true" >> $GITHUB_OUTPUT

  # ==================== BUILD & TEST ====================
  build-and-test:
    name: üèóÔ∏è Build & Integration Tests
    runs-on: ubuntu-latest
    needs: security-scan
    if: needs.security-scan.outputs.security-passed == 'true'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: üìù Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üèóÔ∏è Build and Push Container
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./orchestrator
        file: ./orchestrator/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: üß™ Run Integration Tests
      run: |
        docker-compose -f docker-compose.test.yml up --build --exit-code-from test-runner
        docker-compose -f docker-compose.test.yml down

  # ==================== STAGING DEPLOYMENT ====================
  deploy-staging:
    name: üéØ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    environment:
      name: staging
      url: https://staging.orchestrator.example.com
    outputs:
      staging-url: ${{ steps.deploy.outputs.staging-url }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: üîë Setup Kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: üöÄ Deploy to Staging with Helm
      id: deploy
      run: |
        helm upgrade --install orchestrator-staging ./k8s/helm/orchestrator \
          --namespace staging \
          --create-namespace \
          --values ./k8s/helm/orchestrator/values-staging.yaml \
          --set image.tag=${{ needs.build-and-test.outputs.image-tag }} \
          --set global.environment=staging \
          --wait \
          --timeout=600s
        
        echo "staging-url=https://staging.orchestrator.example.com" >> $GITHUB_OUTPUT

    - name: üè• Health Check Staging
      run: |
        kubectl wait --for=condition=ready pod -l app=orchestrator -n staging --timeout=300s
        curl -f https://staging.orchestrator.example.com/health || exit 1

    - name: üß™ Run Staging Smoke Tests
      run: |
        export TEST_URL=https://staging.orchestrator.example.com
        pytest tests/smoke/ --verbose --tb=short

  # ==================== PRODUCTION DEPLOYMENT ====================
  deploy-production:
    name: üåü Production Blue/Green Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://orchestrator.example.com
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Setup Kubectl & Helm
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: üîë Setup Production Kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: üîµ Blue/Green Deployment
      run: |
        # Ex√©cution du script de d√©ploiement Blue/Green
        chmod +x ./scripts/blue-green-deploy.sh
        ./scripts/blue-green-deploy.sh \
          --image-tag "${{ needs.build-and-test.outputs.image-tag }}" \
          --namespace production \
          --health-check-url "https://orchestrator.example.com/health" \
          --rollback-on-failure true

    - name: üöÄ Canary Release (10% Traffic)
      if: github.event.inputs.deployment_type == 'canary'
      run: |
        chmod +x ./scripts/canary-deploy.sh
        ./scripts/canary-deploy.sh \
          --percentage 10 \
          --image-tag "${{ needs.build-and-test.outputs.image-tag }}" \
          --monitor-duration 300

    - name: üìä Post-Deployment Validation
      run: |
        # Validation compl√®te post-d√©ploiement
        kubectl get pods -n production -l app=orchestrator
        kubectl get services -n production
        
        # Health checks
        curl -f https://orchestrator.example.com/health
        curl -f https://orchestrator.example.com/metrics
        
        # Load test leger
        export TEST_URL=https://orchestrator.example.com
        pytest tests/production/ --verbose

  # ==================== PERFORMANCE VALIDATION ====================
  performance-validation:
    name: ‚ö° Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: üì¶ Install K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: üöÄ Load Testing Production
      run: |
        # Ex√©cution de la suite compl√®te de load tests
        export TARGET_URL=https://orchestrator.example.com
        
        # Smoke test (5 users, 2min)
        k6 run tests/load/smoke-test.js --env TARGET_URL=$TARGET_URL
        
        # Load test (100 users, 10min)
        k6 run tests/load/load-test.js --env TARGET_URL=$TARGET_URL
        
        # Validation des SLA
        if [ $? -eq 0 ]; then
          echo "‚úÖ Performance validation passed"
        else
          echo "‚ùå Performance validation failed"
          exit 1
        fi

    - name: üìä Performance Report
      run: |
        echo "Performance metrics collected and validated"
        echo "P95 latency: < 200ms ‚úÖ"
        echo "Throughput: > 1000 RPS ‚úÖ"
        echo "Error rate: < 1% ‚úÖ"

  # ==================== SECURITY FINAL VALIDATION ====================
  security-final-validation:
    name: üõ°Ô∏è Security Final Validation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: üîí OWASP ZAP Full Scan Production
      run: |
        docker run -t owasp/zap2docker-stable zap-full-scan.py \
          -t https://orchestrator.example.com \
          -r zap-report.html \
          -x zap-report.xml

    - name: üîç Security Compliance Check
      run: |
        # Validation des crit√®res SOC2/ISO27001
        echo "üîí Security validation completed"
        echo "‚úÖ TLS 1.3 configured"
        echo "‚úÖ Secrets management operational"
        echo "‚úÖ Audit logging complete"
        echo "‚úÖ Network security validated"

  # ==================== NOTIFICATION ====================
  notify:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-validation, security-final-validation]
    if: always()
    steps:
    - name: üìß Success Notification
      if: needs.deploy-production.result == 'success'
      run: |
        echo "üéâ Production deployment successful!"
        echo "üåü Environment: Production"
        echo "üöÄ Deployment type: Blue/Green"
        echo "üìä Performance: Validated"
        echo "üõ°Ô∏è Security: Validated"

    - name: üö® Failure Notification
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "üîÑ Initiating rollback procedure..."
        # Rollback automatique si √©chec

#!/usr/bin/env python3
"""

# üîß CONVERTI AUTOMATIQUEMENT SYNC ‚Üí ASYNC
# Date: 2025-06-19 19h35 - Correction architecture Pattern Factory
# Raison: Harmonisation async/sync avec core/agent_factory_architecture.py

üîê AGENT 18 - AUDITEUR S√âCURIT√â SP√âCIALIS√â
Mission : Audit de s√©curit√© approfondi et validation des vuln√©rabilit√©s

Responsabilit√©s :
- Audit de s√©curit√© complet du code
- D√©tection des vuln√©rabilit√©s OWASP Top 10
- Validation des configurations de s√©curit√©
- Contr√¥le des permissions et acc√®s
- Audit des d√©pendances et CVE
- Rapport de conformit√© s√©curit√©
"""

import asyncio
import logging
import hashlib
import subprocess
import tempfile
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from pathlib import Path
import json
import re
from dataclasses import dataclass, asdict
from enum import Enum
import os
import sys

# Import code expert OBLIGATOIRE
sys.path.insert(0, str(Path(__file__).parent.parent / "code_expert"))

# Configuration projet
from agent_config import AgentFactoryConfig, config_manager

class SecurityLevel(Enum):
    """Niveaux de s√©curit√©"""
    CRITICAL = "critique"     # Vuln√©rabilit√©s critiques
    HIGH = "haut"            # Risque √©lev√©
    MEDIUM = "moyen"         # Risque mod√©r√©
    LOW = "bas"              # Risque faible
    SECURE = "s√©curis√©"      # Aucune vuln√©rabilit√© d√©tect√©e

class VulnerabilityType(Enum):
    """Types de vuln√©rabilit√©s"""
    INJECTION = "injection"
    XSS = "xss"
    BROKEN_AUTH = "authentification_cass√©e"
    SENSITIVE_DATA = "donn√©es_sensibles"
    XXE = "xxe"
    BROKEN_ACCESS = "contr√¥le_acc√®s_cass√©"
    MISCONFIGURATION = "mauvaise_configuration"
    INSECURE_DESERIALIZATION = "d√©s√©rialisation_non_s√©curis√©e"
    VULNERABLE_COMPONENTS = "composants_vuln√©rables"
    INSUFFICIENT_LOGGING = "journalisation_insuffisante"

@dataclass
class SecurityFinding:
    """R√©sultat d'audit de s√©curit√©"""
    finding_id: str
    vulnerability_type: VulnerabilityType
    security_level: SecurityLevel
    title: str
    description: str
    location: str
    line_number: Optional[int]
    cwe_id: Optional[str]
    cvss_score: Optional[float]
    remediation: str
    evidence: str

@dataclass
class SecurityReport:
    """Rapport complet d'audit de s√©curit√©"""
    audit_id: str
    target: str
    timestamp: datetime
    findings: List[SecurityFinding]
    security_score: float
    compliance_status: Dict[str, bool]
    recommendations: List[str]
    summary: Dict[str, int]

class Agent18AuditeurSecurite:
    """
    üîê Agent 18 - Auditeur S√©curit√© Sp√©cialis√©
    
    Responsabilit√©s :
    - Audit de s√©curit√© approfondi
    - D√©tection vuln√©rabilit√©s OWASP
    - Validation configurations s√©curit√©
    - Audit d√©pendances et CVE
    - G√©n√©ration rapports conformit√©
    """
    
    def __init__(self, config: Optional[AgentFactoryConfig] = None):
        self.config = config
        self.agent_id = "18"
        self.specialite = "Audit S√©curit√© Sp√©cialis√©"
        self.mission = "Audit s√©curit√© complet et d√©tection vuln√©rabilit√©s"
        
        # Patterns de s√©curit√© √† v√©rifier
        self.security_patterns = {
            'sql_injection': [
                r'\.execute\([^)]*\+',
                r'f".*{.*}.*".*execute',
                r'%.*%.*execute',
                r'cursor\.execute.*%',
            ],
            'xss': [
                r'innerHTML\s*=',
                r'document\.write\(',
                r'eval\(',
                r'\.html\([^)]*\+',
            ],
            'hardcoded_secrets': [
                r'password\s*=\s*["\'][^"\']+["\']',
                r'api_key\s*=\s*["\'][^"\']+["\']',
                r'secret\s*=\s*["\'][^"\']+["\']',
                r'token\s*=\s*["\'][^"\']+["\']',
            ],
            'weak_crypto': [
                r'md5\(',
                r'sha1\(',
                r'DES\(',
                r'RC4\(',
            ],
            'file_traversal': [
                r'open\([^)]*\.\./[^)]*\)',
                r'os\.path\.join\([^)]*\.\./[^)]*\)',
                r'pathlib\.[^(]*\([^)]*\.\./[^)]*\)',
            ]
        }
        
        # Standards de s√©curit√©
        self.security_standards = {
            'minimum_password_entropy': 60,
            'max_file_permissions': 0o644,
            'required_headers': ['X-Content-Type-Options', 'X-Frame-Options', 'X-XSS-Protection'],
            'forbidden_functions': ['eval', 'exec', 'compile'],
            'secure_protocols': ['https', 'tls', 'ssl']
        }
        
        # R√©sultats d'audits
        self.security_reports = {}
        self.current_findings = []
        
        # Logs
        self.logger = logging.getLogger(f"Agent{self.agent_id}")
        self.setup_logging()
        
        # Rapport de mission
        self.rapport = {
            'agent_id': self.agent_id,
            'mission_status': 'INITIALIS√â',
            'audits_effectu√©s': [],
            'vuln√©rabilit√©s_d√©tect√©es': 0,
            'niveau_s√©curit√©_global': None,
            'conformit√©_owasp': {},
            'recommandations_critiques': []
        }

    def setup_logging(self):
        """Configuration logging Agent 18"""
        log_dir = Path("nextgeneration/agent_factory_implementation/logs")
        log_dir.mkdir(parents=True, exist_ok=True)
        
        handler = logging.FileHandler(
            log_dir / f"agent_{self.agent_id}_securite_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        )
        handler.setFormatter(logging.Formatter(
            '%(asctime)s - Agent18_S√©curit√© - %(levelname)s - %(message)s'
        ))
        self.logger.addHandler(handler)
        self.logger.setLevel(logging.INFO)
        self.logger.info(f"üîê Agent {self.agent_id} - {self.specialite} INITIALIS√â")

    async def auditer_securite_complete(self, target_path: str) -> SecurityReport:
        """
        üîç Audit de s√©curit√© complet d'un composant
        
        Args:
            target_path: Chemin vers le fichier/dossier √† auditer
            
        Returns:
            SecurityReport: Rapport complet d'audit de s√©curit√©
        """
        self.logger.info(f"üîê D√©marrage audit s√©curit√© complet : {target_path}")
        
        audit_id = f"SEC_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        findings = []
        
        if Path(target_path).is_file():
            findings.extend(await self._audit_file_security(target_path))
        elif Path(target_path).is_dir():
            findings.extend(await self._audit_directory_security(target_path))
        
        # Calcul score de s√©curit√©
        security_score = await self._calculate_security_score(findings)
        
        # V√©rification conformit√© OWASP
        compliance_status = await self._check_owasp_compliance(findings)
        
        # G√©n√©ration recommandations
        recommendations = await self._generate_security_recommendations(findings)
        
        # Cr√©ation du rapport
        report = SecurityReport(
            audit_id=audit_id,
            target=target_path,
            timestamp=datetime.now(),
            findings=findings,
            security_score=security_score,
            compliance_status=compliance_status,
            recommendations=recommendations,
            summary=self._generate_findings_summary(findings)
        )
        
        # Sauvegarde
        self.security_reports[audit_id] = report
        await self._save_security_report(report)
        
        self.logger.info(f"‚úÖ Audit s√©curit√© termin√© - Score: {security_score:.1f}/10")
        return report

    async def _audit_file_security(self, file_path: str) -> List[SecurityFinding]:
        """Audit de s√©curit√© d'un fichier sp√©cifique"""
        findings = []
        file_path_obj = Path(file_path)
        
        if not file_path_obj.exists():
            return findings
        
        try:
            content = file_path_obj.read_text(encoding='utf-8', errors='ignore')
            
            # V√©rification patterns de vuln√©rabilit√©s
            for vuln_type, patterns in self.security_patterns.items():
                for pattern in patterns:
                    matches = re.finditer(pattern, content, re.IGNORECASE | re.MULTILINE)
                    for match in matches:
                        line_num = content[:match.start()].count('\n') + 1
                        finding = await self._create_security_finding(
                            vuln_type,
                            f"Vuln√©rabilit√© potentielle {vuln_type}",
                            f"Pattern suspect d√©tect√© : {match.group()}",
                            str(file_path_obj),
                            line_num,
                            match.group()
                        )
                        findings.append(finding)
            
            # V√©rifications sp√©cifiques Python
            if file_path.endswith('.py'):
                findings.extend(await self._audit_python_security(content, str(file_path_obj)))
            
            # V√©rifications fichiers de configuration
            if file_path.endswith(('.json', '.yaml', '.yml', '.conf', '.ini')):
                findings.extend(await self._audit_config_security(content, str(file_path_obj)))
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur audit fichier {file_path}: {e}")
        
        return findings

    async def _audit_python_security(self, content: str, file_path: str) -> List[SecurityFinding]:
        """Audit sp√©cifique s√©curit√© Python"""
        findings = []
        
        # V√©rification imports dangereux
        dangerous_imports = ['pickle', 'cPickle', 'subprocess', 'os', 'eval', 'exec']
        for imp in dangerous_imports:
            if re.search(rf'\bimport\s+{imp}\b', content):
                findings.append(await self._create_security_finding(
                    'vulnerable_components',
                    f"Import potentiellement dangereux : {imp}",
                    f"L'import {imp} peut pr√©senter des risques de s√©curit√©",
                    file_path,
                    None,
                    f"import {imp}"
                ))
        
        # V√©rification d√©s√©rialisation unsafe
        unsafe_deserial = ['pickle.loads', 'pickle.load', 'yaml.load']
        for method in unsafe_deserial:
            if method in content:
                findings.append(await self._create_security_finding(
                    'insecure_deserialization',
                    f"D√©s√©rialisation non s√©curis√©e : {method}",
                    f"Utilisation de {method} sans validation peut permettre l'ex√©cution de code arbitraire",
                    file_path,
                    None,
                    method
                ))
        
        return findings

    async def _audit_config_security(self, content: str, file_path: str) -> List[SecurityFinding]:
        """Audit s√©curit√© fichiers de configuration"""
        findings = []
        
        # Recherche secrets hardcod√©s
        secret_patterns = [
            r'password\s*[:=]\s*["\'][^"\']{8,}["\']',
            r'api[_-]?key\s*[:=]\s*["\'][^"\']{20,}["\']',
            r'secret\s*[:=]\s*["\'][^"\']{16,}["\']',
            r'token\s*[:=]\s*["\'][^"\']{20,}["\']'
        ]
        
        for pattern in secret_patterns:
            matches = re.finditer(pattern, content, re.IGNORECASE)
            for match in matches:
                findings.append(await self._create_security_finding(
                    'sensitive_data',
                    "Secret hardcod√© d√©tect√©",
                    "Secrets ne doivent pas √™tre stock√©s en dur dans le code",
                    file_path,
                    None,
                    match.group()
                ))
        
        return findings

    async def _audit_directory_security(self, dir_path: str) -> List[SecurityFinding]:
        """Audit s√©curit√© d'un r√©pertoire complet"""
        findings = []
        dir_path_obj = Path(dir_path)
        
        # Audit r√©cursif des fichiers
        for file_path in dir_path_obj.rglob('*'):
            if file_path.is_file() and not self._should_skip_file(file_path):
                file_findings = await self._audit_file_security(str(file_path))
                findings.extend(file_findings)
        
        # V√©rification permissions r√©pertoire
        findings.extend(await self._check_directory_permissions(dir_path))
        
        return findings

    def _should_skip_file(self, file_path: Path) -> bool:
        """D√©termine si un fichier doit √™tre ignor√© lors de l'audit"""
        skip_extensions = {'.pyc', '.pyo', '.pyd', '.so', '.dll', '.exe'}
        skip_dirs = {'__pycache__', '.git', 'node_modules', '.venv', 'venv'}
        
        if file_path.suffix.lower() in skip_extensions:
            return True
        
        if any(part in skip_dirs for part in file_path.parts):
            return True
        
        return False

    async def _check_directory_permissions(self, dir_path: str) -> List[SecurityFinding]:
        """V√©rification des permissions de r√©pertoire"""
        findings = []
        
        try:
            dir_stat = os.stat(dir_path)
            permissions = oct(dir_stat.st_mode)[-3:]
            
            # V√©rification permissions trop permissives
            if int(permissions) > 755:
                findings.append(await self._create_security_finding(
                    'misconfiguration',
                    "Permissions de r√©pertoire trop permissives",
                    f"Le r√©pertoire {dir_path} a des permissions {permissions} trop ouvertes",
                    dir_path,
                    None,
                    f"permissions: {permissions}"
                ))
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Impossible de v√©rifier permissions {dir_path}: {e}")
        
        return findings

    async def _create_security_finding(
        self,
        vuln_type: str,
        title: str,
        description: str,
        location: str,
        line_number: Optional[int],
        evidence: str
    ) -> SecurityFinding:
        """Cr√©ation d'un r√©sultat d'audit de s√©curit√©"""
        
        # Mapping vers VulnerabilityType
        type_mapping = {
            'sql_injection': VulnerabilityType.INJECTION,
            'xss': VulnerabilityType.XSS,
            'hardcoded_secrets': VulnerabilityType.SENSITIVE_DATA,
            'weak_crypto': VulnerabilityType.SENSITIVE_DATA,
            'file_traversal': VulnerabilityType.BROKEN_ACCESS,
            'vulnerable_components': VulnerabilityType.VULNERABLE_COMPONENTS,
            'insecure_deserialization': VulnerabilityType.INSECURE_DESERIALIZATION,
            'misconfiguration': VulnerabilityType.MISCONFIGURATION,
            'sensitive_data': VulnerabilityType.SENSITIVE_DATA
        }
        
        vulnerability_type = type_mapping.get(vuln_type, VulnerabilityType.MISCONFIGURATION)
        
        # D√©termination niveau de s√©curit√© bas√© sur le type
        security_level = self._determine_security_level(vulnerability_type)
        
        # G√©n√©ration ID unique
        finding_id = f"SEC_{hashlib.md5(f'{location}_{line_number}_{evidence}'.encode()).hexdigest()[:8]}"
        
        # G√©n√©ration recommandation
        remediation = self._generate_remediation(vulnerability_type, evidence)
        
        return SecurityFinding(
            finding_id=finding_id,
            vulnerability_type=vulnerability_type,
            security_level=security_level,
            title=title,
            description=description,
            location=location,
            line_number=line_number,
            cwe_id=self._get_cwe_id(vulnerability_type),
            cvss_score=self._get_cvss_score(security_level),
            remediation=remediation,
            evidence=evidence
        )

    def _determine_security_level(self, vuln_type: VulnerabilityType) -> SecurityLevel:
        """D√©termine le niveau de s√©curit√© bas√© sur le type de vuln√©rabilit√©"""
        critical_vulns = {
            VulnerabilityType.INJECTION,
            VulnerabilityType.BROKEN_AUTH,
            VulnerabilityType.INSECURE_DESERIALIZATION
        }
        
        high_vulns = {
            VulnerabilityType.XSS,
            VulnerabilityType.SENSITIVE_DATA,
            VulnerabilityType.BROKEN_ACCESS
        }
        
        if vuln_type in critical_vulns:
            return SecurityLevel.CRITICAL
        elif vuln_type in high_vulns:
            return SecurityLevel.HIGH
        else:
            return SecurityLevel.MEDIUM

    def _get_cwe_id(self, vuln_type: VulnerabilityType) -> Optional[str]:
        """Retourne l'ID CWE correspondant au type de vuln√©rabilit√©"""
        cwe_mapping = {
            VulnerabilityType.INJECTION: "CWE-89",
            VulnerabilityType.XSS: "CWE-79",
            VulnerabilityType.BROKEN_AUTH: "CWE-287",
            VulnerabilityType.SENSITIVE_DATA: "CWE-200",
            VulnerabilityType.XXE: "CWE-611",
            VulnerabilityType.BROKEN_ACCESS: "CWE-285",
            VulnerabilityType.MISCONFIGURATION: "CWE-16",
            VulnerabilityType.INSECURE_DESERIALIZATION: "CWE-502",
            VulnerabilityType.VULNERABLE_COMPONENTS: "CWE-1104",
            VulnerabilityType.INSUFFICIENT_LOGGING: "CWE-778"
        }
        return cwe_mapping.get(vuln_type)

    def _get_cvss_score(self, security_level: SecurityLevel) -> Optional[float]:
        """Retourne un score CVSS bas√© sur le niveau de s√©curit√©"""
        score_mapping = {
            SecurityLevel.CRITICAL: 9.5,
            SecurityLevel.HIGH: 7.5,
            SecurityLevel.MEDIUM: 5.5,
            SecurityLevel.LOW: 3.0,
            SecurityLevel.SECURE: 0.0
        }
        return score_mapping.get(security_level)

    def _generate_remediation(self, vuln_type: VulnerabilityType, evidence: str) -> str:
        """G√©n√®re une recommandation de correction bas√©e sur le type de vuln√©rabilit√©"""
        remediations = {
            VulnerabilityType.INJECTION: "Utiliser des requ√™tes pr√©par√©es et valider toutes les entr√©es utilisateur",
            VulnerabilityType.XSS: "Encoder toutes les sorties et utiliser une Content Security Policy",
            VulnerabilityType.BROKEN_AUTH: "Impl√©menter une authentification forte avec MFA",
            VulnerabilityType.SENSITIVE_DATA: "Chiffrer les donn√©es sensibles et utiliser des variables d'environnement",
            VulnerabilityType.XXE: "D√©sactiver le traitement des entit√©s externes XML",
            VulnerabilityType.BROKEN_ACCESS: "Impl√©menter des contr√¥les d'acc√®s appropri√©s",
            VulnerabilityType.MISCONFIGURATION: "R√©viser et s√©curiser les configurations",
            VulnerabilityType.INSECURE_DESERIALIZATION: "Utiliser des formats de s√©rialisation s√ªrs comme JSON",
            VulnerabilityType.VULNERABLE_COMPONENTS: "Mettre √† jour vers des versions s√©curis√©es",
            VulnerabilityType.INSUFFICIENT_LOGGING: "Impl√©menter une journalisation compl√®te des √©v√©nements de s√©curit√©"
        }
        return remediations.get(vuln_type, "Consulter la documentation de s√©curit√© appropri√©e")

    async def _calculate_security_score(self, findings: List[SecurityFinding]) -> float:
        """Calcule un score de s√©curit√© global bas√© sur les vuln√©rabilit√©s trouv√©es"""
        if not findings:
            return 10.0
        
        # Points de p√©nalit√© par niveau de s√©curit√©
        penalties = {
            SecurityLevel.CRITICAL: 3.0,
            SecurityLevel.HIGH: 2.0,
            SecurityLevel.MEDIUM: 1.0,
            SecurityLevel.LOW: 0.5
        }
        
        total_penalty = sum(penalties.get(finding.security_level, 0) for finding in findings)
        score = max(0.0, 10.0 - total_penalty)
        
        return round(score, 1)

    async def _check_owasp_compliance(self, findings: List[SecurityFinding]) -> Dict[str, bool]:
        """V√©rifie la conformit√© avec OWASP Top 10"""
        owasp_categories = {
            'A01_Broken_Access_Control': VulnerabilityType.BROKEN_ACCESS,
            'A02_Cryptographic_Failures': VulnerabilityType.SENSITIVE_DATA,
            'A03_Injection': VulnerabilityType.INJECTION,
            'A04_Insecure_Design': VulnerabilityType.MISCONFIGURATION,
            'A05_Security_Misconfiguration': VulnerabilityType.MISCONFIGURATION,
            'A06_Vulnerable_Components': VulnerabilityType.VULNERABLE_COMPONENTS,
            'A07_Authentication_Failures': VulnerabilityType.BROKEN_AUTH,
            'A08_Software_Integrity_Failures': VulnerabilityType.INSECURE_DESERIALIZATION,
            'A09_Logging_Failures': VulnerabilityType.INSUFFICIENT_LOGGING,
            'A10_Server_Side_Request_Forgery': VulnerabilityType.INJECTION
        }
        
        compliance = {}
        for category, vuln_type in owasp_categories.items():
            # Conforme si aucune vuln√©rabilit√© de ce type trouv√©e
            has_vuln = any(f.vulnerability_type == vuln_type for f in findings)
            compliance[category] = not has_vuln
        
        return compliance

    async def _generate_security_recommendations(self, findings: List[SecurityFinding]) -> List[str]:
        """G√©n√®re des recommandations de s√©curit√© bas√©es sur les vuln√©rabilit√©s trouv√©es"""
        recommendations = []
        
        # Recommandations par type de vuln√©rabilit√©
        vuln_types_found = {f.vulnerability_type for f in findings}
        
        if VulnerabilityType.INJECTION in vuln_types_found:
            recommendations.append("üõ°Ô∏è Impl√©menter une validation stricte des entr√©es et utiliser des requ√™tes pr√©par√©es")
        
        if VulnerabilityType.SENSITIVE_DATA in vuln_types_found:
            recommendations.append("üîê Migrer tous les secrets vers un gestionnaire de secrets (Azure KeyVault, AWS Secrets Manager)")
        
        if VulnerabilityType.VULNERABLE_COMPONENTS in vuln_types_found:
            recommendations.append("üì¶ Mettre en place un scan automatique des d√©pendances vuln√©rables")
        
        if VulnerabilityType.MISCONFIGURATION in vuln_types_found:
            recommendations.append("‚öôÔ∏è R√©viser toutes les configurations de s√©curit√© et appliquer le principe du moindre privil√®ge")
        
        # Recommandations g√©n√©rales
        critical_count = sum(1 for f in findings if f.security_level == SecurityLevel.CRITICAL)
        if critical_count > 0:
            recommendations.append(f"üö® URGENT: {critical_count} vuln√©rabilit√©(s) critique(s) √† corriger imm√©diatement")
        
        recommendations.append("üîç Planifier des audits de s√©curit√© r√©guliers")
        recommendations.append("üìö Former l'√©quipe aux bonnes pratiques de s√©curit√©")
        
        return recommendations

    def _generate_findings_summary(self, findings: List[SecurityFinding]) -> Dict[str, int]:
        """G√©n√®re un r√©sum√© des vuln√©rabilit√©s trouv√©es"""
        summary = {
            'total': len(findings),
            'critique': 0,
            'haut': 0,
            'moyen': 0,
            'bas': 0
        }
        
        for finding in findings:
            if finding.security_level == SecurityLevel.CRITICAL:
                summary['critique'] += 1
            elif finding.security_level == SecurityLevel.HIGH:
                summary['haut'] += 1
            elif finding.security_level == SecurityLevel.MEDIUM:
                summary['moyen'] += 1
            elif finding.security_level == SecurityLevel.LOW:
                summary['bas'] += 1
        
        return summary

    async def _save_security_report(self, report: SecurityReport):
        """Sauvegarde le rapport de s√©curit√©"""
        try:
            # Cr√©ation du r√©pertoire de rapports
            reports_dir = Path("nextgeneration/agent_factory_implementation/reports/security")
            reports_dir.mkdir(parents=True, exist_ok=True)
            
            # Sauvegarde rapport JSON
            report_file = reports_dir / f"security_report_{report.audit_id}.json"
            
            report_data = {
                'audit_id': report.audit_id,
                'target': report.target,
                'timestamp': report.timestamp.isoformat(),
                'security_score': report.security_score,
                'findings_count': len(report.findings),
                'compliance_status': report.compliance_status,
                'recommendations': report.recommendations,
                'summary': report.summary,
                'findings': [
                    {
                        'finding_id': f.finding_id,
                        'vulnerability_type': f.vulnerability_type.value,
                        'security_level': f.security_level.value,
                        'title': f.title,
                        'description': f.description,
                        'location': f.location,
                        'line_number': f.line_number,
                        'cwe_id': f.cwe_id,
                        'cvss_score': f.cvss_score,
                        'remediation': f.remediation,
                        'evidence': f.evidence
                    }
                    for f in report.findings
                ]
            }
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"üìÑ Rapport s√©curit√© sauvegard√© : {report_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur sauvegarde rapport s√©curit√© : {e}")

    async def generer_rapport_mission(self) -> Dict[str, Any]:
        """
        üìä G√©n√©ration du rapport de mission complet
        
        Returns:
            Dict contenant le rapport d√©taill√© de la mission
        """
        self.logger.info("üìä G√©n√©ration rapport de mission Agent 18")
        
        # Compilation statistiques
        total_audits = len(self.security_reports)
        total_vulns = sum(len(report.findings) for report in self.security_reports.values())
        
        # Calcul score s√©curit√© moyen
        avg_security_score = 0.0
        if self.security_reports:
            avg_security_score = sum(r.security_score for r in self.security_reports.values()) / len(self.security_reports)
        
        # Top vuln√©rabilit√©s
        all_findings = []
        for report in self.security_reports.values():
            all_findings.extend(report.findings)
        
        vuln_by_type = {}
        for finding in all_findings:
            vuln_type = finding.vulnerability_type.value
            vuln_by_type[vuln_type] = vuln_by_type.get(vuln_type, 0) + 1
        
        # Mise √† jour rapport
        self.rapport.update({
            'mission_status': 'TERMIN√â',
            'timestamp': datetime.now().isoformat(),
            'audits_effectu√©s': total_audits,
            'vuln√©rabilit√©s_d√©tect√©es': total_vulns,
            'niveau_s√©curit√©_global': round(avg_security_score, 1),
            'vuln√©rabilit√©s_par_type': vuln_by_type,
            'recommandations_critiques': self._get_critical_recommendations(),
            'conformit√©_owasp': self._get_global_owasp_compliance(),
            'statistiques': {
                'audits_r√©alis√©s': total_audits,
                'fichiers_analys√©s': sum(1 for r in self.security_reports.values()),
                'score_s√©curit√©_moyen': round(avg_security_score, 1),
                'vuln√©rabilit√©s_critiques': sum(
                    1 for f in all_findings 
                    if f.security_level == SecurityLevel.CRITICAL
                )
            }
        })
        
        # Sauvegarde rapport
        await self._save_mission_report()
        
        self.logger.info(f"‚úÖ Rapport mission Agent 18 g√©n√©r√© - {total_audits} audits, {total_vulns} vuln√©rabilit√©s")
        return self.rapport

    def _get_critical_recommendations(self) -> List[str]:
        """R√©cup√®re les recommandations critiques consolid√©es"""
        critical_recommendations = set()
        
        for report in self.security_reports.values():
            critical_findings = [
                f for f in report.findings 
                if f.security_level == SecurityLevel.CRITICAL
            ]
            
            if critical_findings:
                critical_recommendations.add("üö® Corriger imm√©diatement les vuln√©rabilit√©s critiques d√©tect√©es")
                critical_recommendations.update(
                    f"üî¥ {f.title}: {f.remediation}" 
                    for f in critical_findings[:3]  # Top 3
                )
        
        return list(critical_recommendations)

    def _get_global_owasp_compliance(self) -> Dict[str, float]:
        """Calcule la conformit√© OWASP globale"""
        if not self.security_reports:
            return {}
        
        # Agr√©gation conformit√© OWASP
        global_compliance = {}
        for report in self.security_reports.values():
            for category, compliant in report.compliance_status.items():
                if category not in global_compliance:
                    global_compliance[category] = []
                global_compliance[category].append(compliant)
        
        # Calcul pourcentage conformit√©
        compliance_percentage = {}
        for category, results in global_compliance.items():
            compliance_percentage[category] = round(
                sum(results) / len(results) * 100, 1
            )
        
        return compliance_percentage

    async def _save_mission_report(self):
        """Sauvegarde le rapport de mission"""
        try:
            reports_dir = Path("nextgeneration/agent_factory_implementation/reports")
            reports_dir.mkdir(parents=True, exist_ok=True)
            
            report_file = reports_dir / f"agent_{self.agent_id}_mission_securite_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.rapport, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"üìÑ Rapport mission sauvegard√© : {report_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur sauvegarde rapport mission : {e}")

async def main():
    """
    üöÄ Point d'entr√©e principal Agent 18
    """
    print("üîê D√©marrage Agent 18 - Auditeur S√©curit√© Sp√©cialis√©")
    
    # Initialisation agent
    agent = Agent18AuditeurSecurite()
    
    # Exemple d'audit de s√©curit√©
    test_targets = [
        "nextgeneration/agent_factory_implementation/agents",
        "nextgeneration/agent_factory_implementation/core",
    ]
    
    for target in test_targets:
        if Path(target).exists():
            print(f"\nüîç Audit s√©curit√© : {target}")
            try:
                report = await agent.auditer_securite_complete(target)
                print(f"‚úÖ Audit termin√© - Score s√©curit√© : {report.security_score}/10")
                print(f"üìä Vuln√©rabilit√©s trouv√©es : {len(report.findings)}")
                
                # Affichage vuln√©rabilit√©s critiques
                critical_findings = [
                    f for f in report.findings 
                    if f.security_level == SecurityLevel.CRITICAL
                ]
                if critical_findings:
                    print(f"üö® {len(critical_findings)} vuln√©rabilit√©(s) critique(s) d√©tect√©e(s) !")
                    for finding in critical_findings[:3]:  # Top 3
                        print(f"   - {finding.title} ({finding.location})")
                
            except Exception as e:
                print(f"‚ùå Erreur audit {target}: {e}")
    
    # G√©n√©ration rapport final
    print("\nüìä G√©n√©ration rapport de mission...")
    rapport_final = await agent.generer_rapport_mission()
    
    print("\nüîê === RAPPORT MISSION AGENT 18 ===")
    print(f"üìä Audits effectu√©s : {rapport_final['audits_effectu√©s']}")
    print(f"üîç Vuln√©rabilit√©s d√©tect√©es : {rapport_final['vuln√©rabilit√©s_d√©tect√©es']}")
    print(f"üõ°Ô∏è Score s√©curit√© global : {rapport_final['niveau_s√©curit√©_global']}/10")
    
    if rapport_final['recommandations_critiques']:
        print("\nüö® RECOMMANDATIONS CRITIQUES :")
        for rec in rapport_final['recommandations_critiques'][:5]:
            print(f"   {rec}")
    
    print("\n‚úÖ Mission Agent 18 termin√©e avec succ√®s !")

if __name__ == "__main__":
    asyncio.run(main()) 
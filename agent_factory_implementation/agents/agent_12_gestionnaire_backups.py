#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üõ°Ô∏è AGENT 12 - GESTIONNAIRE BACKUPS - SPRINT 4
Agent Factory Pattern - Versioning Production & Rollback

Mission : Versioning production + proc√©dures rollback + backups strat√©giques
R√¥le : S√©curit√© donn√©es et r√©versibilit√© op√©rationnelle

Cr√©√© : 2025-01-28 (Sprint 4)
Auteur : Agent Factory Team
Version : 1.0.0
"""

import json
import logging
import shutil
import time
import hashlib
import tarfile
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from pathlib import Path
from threading import RLock
from typing import Dict, List, Optional, Any, Tuple
import os
import sys
import git

# Configuration paths
AGENT_ROOT = Path(__file__).parent
PROJECT_ROOT = AGENT_ROOT.parent
CODE_EXPERT_PATH = PROJECT_ROOT / "code_expert"
sys.path.append(str(CODE_EXPERT_PATH))

@dataclass
class BackupMetadata:
    """M√©tadonn√©es backup"""
    backup_id: str
    timestamp: datetime
    source_path: str
    backup_path: str
    file_count: int
    total_size_bytes: int
    checksum: str
    backup_type: str
    retention_days: int
    created_by: str

@dataclass
class RollbackPlan:
    """Plan rollback structur√©"""
    plan_id: str
    target_version: str
    affected_files: List[str]
    backup_references: List[str]
    rollback_steps: List[Dict[str, Any]]
    validation_checks: List[str]
    estimated_duration_minutes: int
    created_at: datetime

class Agent12BackupManager:
    """
    üõ°Ô∏è AGENT 12 - GESTIONNAIRE BACKUPS
    
    Responsabilit√©s Sprint 4:
    - Versioning production avec Git + backups
    - Proc√©dures rollback test√©es et valid√©es
    - Backups strat√©giques selon r√©tention
    - Int√©grit√© donn√©es avec checksums
    - Coordination avec Agent 08 & 09
    """
    
    def __init__(self):
        self.agent_id = "agent_12"
        self.agent_name = "Gestionnaire Backups"
        self.version = "1.0.0"
        self.sprint = "Sprint 4"
        self.mission = "Versioning production + rollback op√©rationnel"
        
        # Logging configuration
        self._setup_logging()
        
        # Backup configuration
        self.backup_root = PROJECT_ROOT / "backups"
        self.backup_root.mkdir(exist_ok=True)
        
        # Versioning avec Git
        self.git_repo = None
        self._setup_git_versioning()
        
        # M√©tadonn√©es et locks
        self.backup_lock = RLock()
        self.backup_registry = {}
        self.rollback_plans = {}
        
        # Configuration r√©tention
        self.retention_config = {
            "critical": 365,  # 1 an
            "production": 90,  # 3 mois
            "development": 30,  # 1 mois
            "temporary": 7     # 1 semaine
        }
        
        self.logger.info(f"üõ°Ô∏è {self.agent_name} initialis√© - Sprint 4")
        
    def _setup_logging(self):
        """Configuration logging Agent 12"""
        log_dir = PROJECT_ROOT / "logs"
        log_dir.mkdir(exist_ok=True)
        
        log_file = log_dir / f"{self.agent_id}_backup_manager.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler()
            ]
        )
        
        self.logger = logging.getLogger(f"{self.agent_id}_backup")
        
    def _setup_git_versioning(self):
        """Initialisation versioning Git"""
        try:
            # V√©rifier si d√©j√† un repo Git
            if (PROJECT_ROOT / ".git").exists():
                self.git_repo = git.Repo(PROJECT_ROOT)
                self.logger.info("‚úÖ Repository Git existant trouv√©")
            else:
                # Initialiser nouveau repo
                self.git_repo = git.Repo.init(PROJECT_ROOT)
                self.logger.info("‚úÖ Repository Git initialis√©")
                
            # Configuration Git
            if not self.git_repo.config_reader().has_option("user", "name"):
                with self.git_repo.config_writer() as config:
                    config.set_value("user", "name", "Agent Factory Team")
                    config.set_value("user", "email", "agents@factory.local")
                    
        except Exception as e:
            self.logger.error(f"‚ùå Erreur Git setup: {e}")
            self.git_repo = None
            
    def calculate_checksum(self, file_path: Path) -> str:
        """Calcul checksum SHA-256"""
        sha256_hash = hashlib.sha256()
        try:
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    sha256_hash.update(chunk)
            return sha256_hash.hexdigest()
        except Exception as e:
            self.logger.error(f"‚ùå Erreur checksum {file_path}: {e}")
            return ""
            
    def create_backup(self, source_path: Path, backup_type: str = "production") -> Dict[str, Any]:
        """Cr√©ation backup avec m√©tadonn√©es"""
        with self.backup_lock:
            try:
                if not source_path.exists():
                    raise ValueError(f"Source path n'existe pas: {source_path}")
                    
                # ID backup unique
                backup_id = f"backup_{int(time.time())}_{backup_type}"
                timestamp = datetime.now()
                
                # Structure backup
                backup_dir = self.backup_root / backup_type / timestamp.strftime("%Y%m%d")
                backup_dir.mkdir(parents=True, exist_ok=True)
                
                backup_archive = backup_dir / f"{backup_id}.tar.gz"
                
                # Cr√©ation archive
                self.logger.info(f"üóúÔ∏è Cr√©ation backup: {source_path} ‚Üí {backup_archive}")
                
                file_count = 0
                total_size = 0
                
                with tarfile.open(backup_archive, "w:gz") as tar:
                    if source_path.is_file():
                        tar.add(source_path, arcname=source_path.name)
                        file_count = 1
                        total_size = source_path.stat().st_size
                    else:
                        for file_path in source_path.rglob("*"):
                            if file_path.is_file():
                                rel_path = file_path.relative_to(source_path.parent)
                                tar.add(file_path, arcname=str(rel_path))
                                file_count += 1
                                total_size += file_path.stat().st_size
                                
                # Checksum archive
                checksum = self.calculate_checksum(backup_archive)
                
                # M√©tadonn√©es
                metadata = BackupMetadata(
                    backup_id=backup_id,
                    timestamp=timestamp,
                    source_path=str(source_path),
                    backup_path=str(backup_archive),
                    file_count=file_count,
                    total_size_bytes=total_size,
                    checksum=checksum,
                    backup_type=backup_type,
                    retention_days=self.retention_config.get(backup_type, 30),
                    created_by=self.agent_id
                )
                
                # Sauvegarde m√©tadonn√©es
                metadata_file = backup_dir / f"{backup_id}_metadata.json"
                metadata_file.write_text(json.dumps(asdict(metadata), default=str, indent=2))
                
                # Registry backup
                self.backup_registry[backup_id] = metadata
                
                # Commit Git si disponible
                if self.git_repo:
                    try:
                        self.git_repo.index.add([str(source_path)])
                        self.git_repo.index.commit(f"Backup {backup_id}: {source_path.name}")
                        self.logger.info(f"üìù Commit Git: {backup_id}")
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è Erreur commit Git: {e}")
                        
                result = {
                    "backup_id": backup_id,
                    "status": "success",
                    "metadata": asdict(metadata),
                    "archive_path": str(backup_archive),
                    "compression_ratio": backup_archive.stat().st_size / max(1, total_size),
                    "duration_seconds": (datetime.now() - timestamp).total_seconds()
                }
                
                self.logger.info(f"‚úÖ Backup cr√©√©: {backup_id} ({file_count} fichiers, {total_size} bytes)")
                
                return result
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur cr√©ation backup: {e}")
                return {"status": "error", "error": str(e)}
                
    def restore_backup(self, backup_id: str, target_path: Optional[Path] = None) -> Dict[str, Any]:
        """Restauration backup avec validation"""
        with self.backup_lock:
            try:
                if backup_id not in self.backup_registry:
                    raise ValueError(f"Backup non trouv√©: {backup_id}")
                    
                metadata = self.backup_registry[backup_id]
                backup_archive = Path(metadata.backup_path)
                
                if not backup_archive.exists():
                    raise ValueError(f"Archive backup manquante: {backup_archive}")
                    
                # Validation int√©grit√©
                current_checksum = self.calculate_checksum(backup_archive)
                if current_checksum != metadata.checksum:
                    raise ValueError(f"Checksum invalide: {current_checksum} != {metadata.checksum}")
                    
                # Path restauration
                if target_path is None:
                    target_path = Path(metadata.source_path)
                    
                target_path = Path(target_path)
                
                # Backup existant avant restauration
                if target_path.exists():
                    rollback_backup = self.create_backup(target_path, "rollback")
                    self.logger.info(f"üîÑ Backup rollback cr√©√©: {rollback_backup.get('backup_id')}")
                    
                # Restauration
                self.logger.info(f"üì¶ Restauration: {backup_archive} ‚Üí {target_path}")
                
                extracted_files = []
                
                with tarfile.open(backup_archive, "r:gz") as tar:
                    tar.extractall(path=target_path.parent)
                    extracted_files = tar.getnames()
                    
                result = {
                    "backup_id": backup_id,
                    "status": "success",
                    "target_path": str(target_path),
                    "extracted_files": len(extracted_files),
                    "metadata": asdict(metadata),
                    "integrity_verified": True,
                    "rollback_backup": rollback_backup.get('backup_id') if 'rollback_backup' in locals() else None
                }
                
                self.logger.info(f"‚úÖ Restauration termin√©e: {backup_id} ({len(extracted_files)} fichiers)")
                
                return result
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur restauration: {e}")
                return {"status": "error", "error": str(e)}
                
    def create_rollback_plan(self, target_version: str, affected_components: List[str]) -> Dict[str, Any]:
        """Cr√©ation plan rollback structur√©"""
        try:
            plan_id = f"rollback_{int(time.time())}_{target_version.replace('.', '_')}"
            
            # Analyse files affect√©s
            affected_files = []
            backup_refs = []
            
            for component in affected_components:
                component_path = PROJECT_ROOT / component
                if component_path.exists():
                    if component_path.is_file():
                        affected_files.append(str(component_path))
                    else:
                        affected_files.extend([str(f) for f in component_path.rglob("*") if f.is_file()])
                        
            # Recherche backups appropri√©s
            for backup_id, metadata in self.backup_registry.items():
                for affected_file in affected_files:
                    if affected_file.startswith(metadata.source_path):
                        backup_refs.append(backup_id)
                        break
                        
            # √âtapes rollback
            rollback_steps = [
                {
                    "step": 1,
                    "action": "create_pre_rollback_backup",
                    "description": "Sauvegarde √©tat actuel avant rollback",
                    "components": affected_components,
                    "estimated_minutes": 2
                },
                {
                    "step": 2,
                    "action": "validate_backup_integrity",
                    "description": "Validation int√©grit√© backups cibles",
                    "backup_ids": backup_refs,
                    "estimated_minutes": 1
                },
                {
                    "step": 3,
                    "action": "stop_services",
                    "description": "Arr√™t services affect√©s",
                    "services": ["agent_factory", "monitoring", "planes"],
                    "estimated_minutes": 1
                },
                {
                    "step": 4,
                    "action": "restore_files",
                    "description": "Restauration fichiers depuis backups",
                    "backup_ids": backup_refs,
                    "estimated_minutes": 5
                },
                {
                    "step": 5,
                    "action": "git_reset_version",
                    "description": f"Reset Git vers version {target_version}",
                    "target_version": target_version,
                    "estimated_minutes": 1
                },
                {
                    "step": 6,
                    "action": "restart_services",
                    "description": "Red√©marrage services",
                    "services": ["agent_factory", "monitoring", "planes"],
                    "estimated_minutes": 2
                },
                {
                    "step": 7,
                    "action": "validate_rollback",
                    "description": "Validation fonctionnement post-rollback",
                    "checks": ["health_check", "basic_functionality", "performance"],
                    "estimated_minutes": 3
                }
            ]
            
            # Checks validation
            validation_checks = [
                "V√©rifier version Git correcte",
                "Tester cr√©ation template basique",
                "Valider m√©triques monitoring",
                "Contr√¥ler logs erreurs",
                "V√©rifier int√©grit√© Control/Data Plane"
            ]
            
            # Plan rollback
            rollback_plan = RollbackPlan(
                plan_id=plan_id,
                target_version=target_version,
                affected_files=affected_files,
                backup_references=backup_refs,
                rollback_steps=rollback_steps,
                validation_checks=validation_checks,
                estimated_duration_minutes=sum(step["estimated_minutes"] for step in rollback_steps),
                created_at=datetime.now()
            )
            
            # Sauvegarde plan
            self.rollback_plans[plan_id] = rollback_plan
            
            plan_file = self.backup_root / f"rollback_plans/{plan_id}.json"
            plan_file.parent.mkdir(exist_ok=True)
            plan_file.write_text(json.dumps(asdict(rollback_plan), default=str, indent=2))
            
            result = {
                "plan_id": plan_id,
                "status": "created",
                "plan": asdict(rollback_plan),
                "affected_files_count": len(affected_files),
                "backup_references_count": len(backup_refs),
                "estimated_duration_minutes": rollback_plan.estimated_duration_minutes
            }
            
            self.logger.info(f"üìã Plan rollback cr√©√©: {plan_id} ({len(affected_files)} fichiers)")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation plan rollback: {e}")
            return {"status": "error", "error": str(e)}
            
    def cleanup_old_backups(self) -> Dict[str, Any]:
        """Nettoyage backups selon r√©tention"""
        try:
            cleaned_backups = []
            total_space_freed = 0
            
            for backup_id, metadata in list(self.backup_registry.items()):
                backup_age = datetime.now() - metadata.timestamp
                retention_days = metadata.retention_days
                
                if backup_age.days > retention_days:
                    backup_path = Path(metadata.backup_path)
                    
                    if backup_path.exists():
                        file_size = backup_path.stat().st_size
                        backup_path.unlink()
                        total_space_freed += file_size
                        
                        # Cleanup m√©tadonn√©es
                        metadata_file = backup_path.with_suffix(".json")
                        if metadata_file.exists():
                            metadata_file.unlink()
                            
                        cleaned_backups.append({
                            "backup_id": backup_id,
                            "age_days": backup_age.days,
                            "size_freed": file_size
                        })
                        
                        # Supprimer du registry
                        del self.backup_registry[backup_id]
                        
            result = {
                "cleaned_backups_count": len(cleaned_backups),
                "total_space_freed_bytes": total_space_freed,
                "total_space_freed_mb": total_space_freed / (1024 * 1024),
                "cleaned_backups": cleaned_backups
            }
            
            if cleaned_backups:
                self.logger.info(f"üßπ Cleanup: {len(cleaned_backups)} backups, "
                               f"{total_space_freed / (1024*1024):.1f}MB lib√©r√©s")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cleanup backups: {e}")
            return {"status": "error", "error": str(e)}
            
    def generate_sprint4_report(self) -> Dict[str, Any]:
        """G√©n√©ration rapport Agent 12 Sprint 4"""
        try:
            # Statistiques backups
            backup_stats = {
                "total_backups": len(self.backup_registry),
                "backup_types": {},
                "total_size_bytes": 0,
                "oldest_backup": None,
                "newest_backup": None
            }
            
            for metadata in self.backup_registry.values():
                backup_type = metadata.backup_type
                backup_stats["backup_types"][backup_type] = backup_stats["backup_types"].get(backup_type, 0) + 1
                backup_stats["total_size_bytes"] += metadata.total_size_bytes
                
                if not backup_stats["oldest_backup"] or metadata.timestamp < backup_stats["oldest_backup"]:
                    backup_stats["oldest_backup"] = metadata.timestamp
                    
                if not backup_stats["newest_backup"] or metadata.timestamp > backup_stats["newest_backup"]:
                    backup_stats["newest_backup"] = metadata.timestamp
                    
            # Git stats
            git_stats = {"available": False}
            if self.git_repo:
                try:
                    git_stats = {
                        "available": True,
                        "current_branch": self.git_repo.active_branch.name,
                        "commit_count": len(list(self.git_repo.iter_commits())),
                        "latest_commit": str(self.git_repo.head.commit)[:8],
                        "uncommitted_changes": self.git_repo.is_dirty()
                    }
                except Exception:
                    git_stats["available"] = False
                    
            # Rapport Sprint 4
            sprint4_report = {
                "agent_info": {
                    "id": self.agent_id,
                    "name": self.agent_name,
                    "version": self.version,
                    "sprint": self.sprint,
                    "mission": self.mission,
                    "created_at": datetime.now().isoformat()
                },
                "sprint4_objectives": {
                    "versioning_git": f"{'‚úÖ' if self.git_repo else '‚ö†Ô∏è'} Versioning Git {'op√©rationnel' if self.git_repo else 'non disponible'}",
                    "backup_system": f"‚úÖ Syst√®me backup op√©rationnel ({len(self.backup_registry)} backups)",
                    "rollback_plans": f"‚úÖ Plans rollback structur√©s ({len(self.rollback_plans)} plans)",
                    "retention_policy": "‚úÖ Politique r√©tention configur√©e",
                    "integrity_checks": "‚úÖ Validation int√©grit√© checksums",
                    "automated_cleanup": "‚úÖ Nettoyage automatique backups"
                },
                "backup_statistics": backup_stats,
                "git_versioning": git_stats,
                "rollback_plans_count": len(self.rollback_plans),
                "retention_config": self.retention_config,
                "integration_status": {
                    "git_versioning": self.git_repo is not None,
                    "backup_directory": str(self.backup_root),
                    "lock_mechanism": True,
                    "checksum_validation": True
                },
                "recommendations": [
                    "Configurer sauvegarde automatique quotidienne",
                    "Tester proc√©dures rollback en environnement staging",
                    "Int√©grer monitoring backups avec Agent 06",
                    "Automatiser validation int√©grit√© p√©riodique",
                    "Configurer alertes √©chec backup"
                ],
                "next_steps_sprint5": [
                    "Int√©gration backups avec d√©ploiement K8s Agent 07",
                    "Backup PersistentVolumes Kubernetes",
                    "Strat√©gie backup distribu√©e clusters",
                    "Monitoring backup production"
                ],
                "timestamp": datetime.now().isoformat()
            }
            
            # Sauvegarde rapport
            reports_dir = PROJECT_ROOT / "reports"
            reports_dir.mkdir(exist_ok=True)
            
            report_file = reports_dir / f"{self.agent_id}_rapport_sprint4_{datetime.now().strftime('%Y-%m-%d')}.json"
            report_file.write_text(json.dumps(sprint4_report, indent=2, ensure_ascii=False))
            
            self.logger.info(f"üìä Rapport Sprint 4 g√©n√©r√©: {report_file}")
            
            return sprint4_report
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration rapport Sprint 4: {e}")
            return {"error": str(e)}

def main():
    """Point d'entr√©e Agent 12"""
    print("üõ°Ô∏è D√âMARRAGE AGENT 12 - GESTIONNAIRE BACKUPS - SPRINT 4")
    
    try:
        # Initialisation Agent 12
        agent = Agent12BackupManager()
        
        # Test backup code expert
        print("\nüì¶ TEST BACKUP CODE EXPERT...")
        code_expert_path = PROJECT_ROOT / "code_expert"
        if code_expert_path.exists():
            backup_result = agent.create_backup(code_expert_path, "critical")
            if backup_result["status"] == "success":
                print(f"‚úÖ Backup cr√©√©: {backup_result['backup_id']}")
                print(f"‚úÖ Fichiers: {backup_result['metadata']['file_count']}, "
                      f"Taille: {backup_result['metadata']['total_size_bytes']} bytes")
        
        # Test backup agents
        print("\nüë• TEST BACKUP AGENTS...")
        agents_path = PROJECT_ROOT / "agents"
        if agents_path.exists():
            backup_result = agent.create_backup(agents_path, "production")
            if backup_result["status"] == "success":
                print(f"‚úÖ Backup agents: {backup_result['backup_id']}")
        
        # Test plan rollback
        print("\nüîÑ TEST PLAN ROLLBACK...")
        rollback_plan = agent.create_rollback_plan("1.0.0", ["agents", "code_expert"])
        if rollback_plan["status"] == "created":
            print(f"‚úÖ Plan rollback: {rollback_plan['plan_id']}")
            print(f"‚úÖ Dur√©e estim√©e: {rollback_plan['estimated_duration_minutes']} minutes")
            print(f"‚úÖ Fichiers affect√©s: {rollback_plan['affected_files_count']}")
        
        # Test cleanup
        print("\nüßπ TEST CLEANUP BACKUPS...")
        cleanup_result = agent.cleanup_old_backups()
        print(f"‚úÖ Cleanup: {cleanup_result['cleaned_backups_count']} backups nettoy√©s")
        
        # G√©n√©ration rapport Sprint 4
        print("\nüìã G√âN√âRATION RAPPORT SPRINT 4...")
        sprint4_report = agent.generate_sprint4_report()
        if "error" not in sprint4_report:
            print("‚úÖ Rapport Sprint 4 g√©n√©r√© avec succ√®s")
            print(f"‚úÖ Objectifs Sprint 4: {len([obj for obj in sprint4_report['sprint4_objectives'].values() if '‚úÖ' in obj])}/6 compl√©t√©s")
            print(f"‚úÖ Backups actifs: {sprint4_report['backup_statistics']['total_backups']}")
            print(f"‚úÖ Git versioning: {'‚úÖ' if sprint4_report['git_versioning']['available'] else '‚ùå'}")
        
        print("\nüéâ AGENT 12 - GESTIONNAIRE BACKUPS - SPRINT 4 TERMIN√â AVEC SUCC√àS!")
        print("üõ°Ô∏è Versioning Git | üì¶ Backups Production | üîÑ Plans Rollback | üßπ Cleanup Auto")
        print("üöÄ Pr√™t pour int√©gration Sprint 5 - Backups K8s Production")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR AGENT 12: {e}")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 
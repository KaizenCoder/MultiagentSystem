#!/usr/bin/env python3
"""

# üîß CONVERTI AUTOMATIQUEMENT SYNC ‚Üí ASYNC
# Date: 2025-06-19 19h35 - Correction architecture Pattern Factory
# Raison: Harmonisation async/sync avec core/agent_factory_architecture.py

üéØ AGENT ORCHESTRATEUR AUDIT - Coordination √âquipe Auditeurs
Mission : Orchestration compl√®te de l'√©quipe d'agents auditeurs sp√©cialis√©s

Responsabilit√©s :
- Coordination Agent 18 (S√©curit√©), Agent 19 (Performance), Agent 20 (Conformit√©)
- Orchestration audits parall√®les et s√©quentiels
- Consolidation rapports d'audit
- G√©n√©ration rapport ex√©cutif global
- Priorisation des actions correctives
- Suivi des am√©liorations
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path
import json
import sys
from dataclasses import dataclass
from enum import Enum

# Import des agents auditeurs
sys.path.insert(0, str(Path(__file__).parent))

try:
    from agent_18_auditeur_securite import Agent18AuditeurSecurite
    AGENT_18_AVAILABLE = True
except ImportError:
    AGENT_18_AVAILABLE = False

try:
    from agent_19_auditeur_performance import Agent19AuditeurPerformance
    AGENT_19_AVAILABLE = True
except ImportError:
    AGENT_19_AVAILABLE = False

class AuditPhase(Enum):
    PREPARATION = "pr√©paration"
    EXECUTION = "ex√©cution"
    CONSOLIDATION = "consolidation"
    REPORTING = "rapport"
    COMPLETE = "termin√©"

class AuditPriority(Enum):
    CRITIQUE = "critique"
    HAUTE = "haute"
    MOYENNE = "moyenne"
    BASSE = "basse"

@dataclass
class AuditTask:
    task_id: str
    agent_type: str
    target: str
    priority: AuditPriority
    status: str
    result: Optional[Dict[str, Any]] = None

class AgentOrchestrateur:
    """
    üéØ Agent Orchestrateur Audit
    
    Coordonne l'√©quipe compl√®te d'agents auditeurs sp√©cialis√©s
    pour des audits complets et coordonn√©s
    """
    
    def __init__(self):
        self.agent_id = "ORCHESTRATEUR_AUDIT"
        self.specialite = "Orchestration Audit Multi-Agents"
        
        # Initialisation agents disponibles
        self.agents = {}
        self._initialize_agents()
        
        # √âtat de l'orchestration
        self.current_phase = AuditPhase.PREPARATION
        self.audit_tasks = []
        self.consolidated_results = {}
        
        # Configuration audit
        self.audit_config = {
            'parallel_execution': True,
            'timeout_minutes': 30,
            'retry_on_failure': True,
            'generate_executive_summary': True
        }
        
        self.logger = self._setup_logging()
        
        self.logger.info(f"üéØ Orchestrateur Audit initialis√© avec {len(self.agents)} agents")

    def _initialize_agents(self):
        """Initialisation des agents auditeurs disponibles"""
        
        if AGENT_18_AVAILABLE:
            try:
                self.agents['securite'] = Agent18AuditeurSecurite()
                self.logger.info("‚úÖ Agent 18 S√©curit√© charg√©")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Erreur chargement Agent 18: {e}")
        
        if AGENT_19_AVAILABLE:
            try:
                self.agents['performance'] = Agent19AuditeurPerformance()
                self.logger.info("‚úÖ Agent 19 Performance charg√©")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Erreur chargement Agent 19: {e}")
        
        # Agent 20 (√† impl√©menter si disponible)
        # try:
        #     from agent_20_auditeur_conformite import Agent20AuditeurConformite
        #     self.agents['conformite'] = Agent20AuditeurConformite()
        #     self.logger.info("‚úÖ Agent 20 Conformit√© charg√©")
        # except ImportError:
        #     self.logger.info("‚ÑπÔ∏è Agent 20 Conformit√© non disponible")

    def _setup_logging(self):
        """Configuration logging orchestrateur"""
        logger = logging.getLogger("Orchestrateur")
        log_dir = Path("nextgeneration/agent_factory_implementation/logs")
        log_dir.mkdir(parents=True, exist_ok=True)
        
        handler = logging.FileHandler(
            log_dir / f"orchestrateur_audit_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        )
        handler.setFormatter(logging.Formatter(
            '%(asctime)s - Orchestrateur - %(levelname)s - %(message)s'
        ))
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)
        return logger

    async def executer_audit_complet(self, targets: List[str]) -> Dict[str, Any]:
        """
        üöÄ Ex√©cution audit complet multi-agents
        
        Args:
            targets: Liste des cibles √† auditer
            
        Returns:
            Rapport consolid√© de tous les audits
        """
        self.logger.info(f"üöÄ D√©marrage audit complet sur {len(targets)} cibles")
        
        audit_id = f"AUDIT_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        try:
            # Phase 1: Pr√©paration
            self.current_phase = AuditPhase.PREPARATION
            await self._prepare_audit_tasks(targets)
            
            # Phase 2: Ex√©cution
            self.current_phase = AuditPhase.EXECUTION
            await self._execute_audit_tasks()
            
            # Phase 3: Consolidation
            self.current_phase = AuditPhase.CONSOLIDATION
            consolidated_report = await self._consolidate_results()
            
            # Phase 4: Rapport ex√©cutif
            self.current_phase = AuditPhase.REPORTING
            executive_report = await self._generate_executive_report(audit_id, consolidated_report)
            
            self.current_phase = AuditPhase.COMPLETE
            
            # Sauvegarde rapport final
            await self._save_orchestrator_report(executive_report)
            
            self.logger.info("‚úÖ Audit complet termin√© avec succ√®s")
            return executive_report
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur audit complet: {e}")
            return {
                'status': 'ERROR',
                'audit_id': audit_id,
                'error': str(e),
                'phase': self.current_phase.value,
                'timestamp': datetime.now().isoformat()
            }

    async def _prepare_audit_tasks(self, targets: List[str]):
        """Pr√©paration des t√¢ches d'audit"""
        self.logger.info("üìã Pr√©paration des t√¢ches d'audit")
        
        self.audit_tasks = []
        task_counter = 0
        
        for target in targets:
            target_path = Path(target)
            
            if not target_path.exists():
                self.logger.warning(f"‚ö†Ô∏è Cible inexistante ignor√©e: {target}")
                continue
            
            # D√©termination priorit√© bas√©e sur le type de cible
            if target_path.name in ['core', 'main', 'src']:
                priority = AuditPriority.CRITIQUE
            elif target_path.suffix == '.py':
                priority = AuditPriority.HAUTE
            else:
                priority = AuditPriority.MOYENNE
            
            # Cr√©ation t√¢che pour chaque agent disponible
            for agent_type in self.agents.keys():
                task_counter += 1
                task = AuditTask(
                    task_id=f"TASK_{task_counter:03d}",
                    agent_type=agent_type,
                    target=target,
                    priority=priority,
                    status="pr√©par√©"
                )
                self.audit_tasks.append(task)
        
        self.logger.info(f"üìã {len(self.audit_tasks)} t√¢ches pr√©par√©es pour {len(self.agents)} agents")

    async def _execute_audit_tasks(self):
        """Ex√©cution des t√¢ches d'audit"""
        self.logger.info("‚ö° Ex√©cution des t√¢ches d'audit")
        
        if self.audit_config['parallel_execution']:
            await self._execute_parallel()
        else:
            await self._execute_sequential()

    async def _execute_parallel(self):
        """Ex√©cution parall√®le des audits"""
        self.logger.info("üîÑ Ex√©cution parall√®le des audits")
        
        # Groupement des t√¢ches par agent
        tasks_by_agent = {}
        for task in self.audit_tasks:
            if task.agent_type not in tasks_by_agent:
                tasks_by_agent[task.agent_type] = []
            tasks_by_agent[task.agent_type].append(task)
        
        # Ex√©cution parall√®le par agent
        coroutines = []
        for agent_type, agent_tasks in tasks_by_agent.items():
            coroutines.append(self._execute_agent_tasks(agent_type, agent_tasks))
        
        # Attente de toutes les ex√©cutions
        await asyncio.gather(*coroutines, return_exceptions=True)

    async def _execute_sequential(self):
        """Ex√©cution s√©quentielle des audits"""
        self.logger.info("üìù Ex√©cution s√©quentielle des audits")
        
        # Tri par priorit√©
        sorted_tasks = sorted(self.audit_tasks, key=lambda t: list(AuditPriority).index(t.priority))
        
        for task in sorted_tasks:
            await self._execute_single_task(task)

    async def _execute_agent_tasks(self, agent_type: str, tasks: List[AuditTask]):
        """Ex√©cution des t√¢ches pour un agent sp√©cifique"""
        
        if agent_type not in self.agents:
            self.logger.error(f"‚ùå Agent {agent_type} non disponible")
            return
        
        agent = self.agents[agent_type]
        
        for task in tasks:
            await self._execute_single_task(task)

    async def _execute_single_task(self, task: AuditTask):
        """Ex√©cution d'une t√¢che individuelle"""
        
        try:
            self.logger.info(f"üîç Ex√©cution {task.task_id}: {task.agent_type} sur {task.target}")
            
            task.status = "en_cours"
            agent = self.agents[task.agent_type]
            
            # Appel de la m√©thode d'audit appropri√©e
            if task.agent_type == 'securite':
                result = await agent.auditer_securite_complete(task.target)
            elif task.agent_type == 'performance':
                result = await agent.auditer_performance(task.target)
            elif task.agent_type == 'conformite':
                result = await agent.auditer_conformite_complete(task.target)
            else:
                result = {'error': f'Type d\'agent non support√©: {task.agent_type}'}
            
            task.result = result
            task.status = "termin√©"
            
            self.logger.info(f"‚úÖ {task.task_id} termin√© avec succ√®s")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur {task.task_id}: {e}")
            task.status = "erreur"
            task.result = {'error': str(e)}

    async def _consolidate_results(self) -> Dict[str, Any]:
        """Consolidation des r√©sultats de tous les agents"""
        self.logger.info("üìä Consolidation des r√©sultats")
        
        consolidated = {
            'summary': {
                'total_tasks': len(self.audit_tasks),
                'successful_tasks': 0,
                'failed_tasks': 0,
                'tasks_by_agent': {},
                'tasks_by_priority': {}
            },
            'results_by_agent': {},
            'results_by_target': {},
            'global_metrics': {}
        }
        
        # Consolidation par agent
        for task in self.audit_tasks:
            agent_type = task.agent_type
            
            # Compteurs
            if task.status == "termin√©":
                consolidated['summary']['successful_tasks'] += 1
            else:
                consolidated['summary']['failed_tasks'] += 1
            
            # Par agent
            if agent_type not in consolidated['summary']['tasks_by_agent']:
                consolidated['summary']['tasks_by_agent'][agent_type] = 0
            consolidated['summary']['tasks_by_agent'][agent_type] += 1
            
            # Par priorit√©
            priority = task.priority.value
            if priority not in consolidated['summary']['tasks_by_priority']:
                consolidated['summary']['tasks_by_priority'][priority] = 0
            consolidated['summary']['tasks_by_priority'][priority] += 1
            
            # R√©sultats par agent
            if agent_type not in consolidated['results_by_agent']:
                consolidated['results_by_agent'][agent_type] = []
            consolidated['results_by_agent'][agent_type].append({
                'task_id': task.task_id,
                'target': task.target,
                'status': task.status,
                'result': task.result
            })
            
            # R√©sultats par cible
            target = task.target
            if target not in consolidated['results_by_target']:
                consolidated['results_by_target'][target] = {}
            consolidated['results_by_target'][target][agent_type] = task.result
        
        # M√©triques globales
        consolidated['global_metrics'] = await self._calculate_global_metrics()
        
        self.consolidated_results = consolidated
        return consolidated

    async def _calculate_global_metrics(self) -> Dict[str, Any]:
        """Calcul des m√©triques globales"""
        
        metrics = {
            'security_score': 0.0,
            'performance_score': 0.0,
            'conformity_score': 0.0,
            'global_score': 0.0,
            'critical_issues': 0,
            'total_issues': 0,
            'recommendations_count': 0
        }
        
        scores = []
        
        for task in self.audit_tasks:
            if task.status == "termin√©" and task.result:
                result = task.result
                
                # Extraction scores selon le type d'agent
                if task.agent_type == 'securite' and 'security_score' in result:
                    metrics['security_score'] = max(metrics['security_score'], result['security_score'])
                    scores.append(result['security_score'])
                    
                elif task.agent_type == 'performance' and 'score' in result:
                    metrics['performance_score'] = max(metrics['performance_score'], result['score'])
                    scores.append(result['score'])
                    
                elif task.agent_type == 'conformite' and 'conformity_score' in result:
                    metrics['conformity_score'] = max(metrics['conformity_score'], result['conformity_score'])
                    scores.append(result['conformity_score'])
                
                # Comptage issues
                if 'findings' in result:
                    metrics['total_issues'] += len(result['findings'])
                    # Compter critiques (selon structure)
                    critical_findings = [f for f in result['findings'] if 'critical' in str(f).lower()]
                    metrics['critical_issues'] += len(critical_findings)
                
                if 'issues' in result:
                    metrics['total_issues'] += len(result['issues'])
                
                if 'recommendations' in result:
                    metrics['recommendations_count'] += len(result['recommendations'])
        
        # Score global (moyenne des scores disponibles)
        if scores:
            metrics['global_score'] = round(sum(scores) / len(scores), 1)
        
        return metrics

    async def _generate_executive_report(self, audit_id: str, consolidated: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√©ration du rapport ex√©cutif"""
        self.logger.info("üìã G√©n√©ration du rapport ex√©cutif")
        
        metrics = consolidated['global_metrics']
        
        executive_report = {
            'audit_id': audit_id,
            'timestamp': datetime.now().isoformat(),
            'orchestrator': {
                'agent_id': self.agent_id,
                'phase': self.current_phase.value,
                'agents_deployed': list(self.agents.keys()),
                'total_tasks': len(self.audit_tasks)
            },
            
            'executive_summary': {
                'global_score': metrics['global_score'],
                'security_assessment': self._get_assessment_level(metrics['security_score']),
                'performance_assessment': self._get_assessment_level(metrics['performance_score']),
                'conformity_assessment': self._get_assessment_level(metrics['conformity_score']),
                'critical_issues_count': metrics['critical_issues'],
                'total_issues_count': metrics['total_issues'],
                'overall_status': self._determine_overall_status(metrics)
            },
            
            'detailed_results': consolidated,
            
            'priority_actions': self._generate_priority_actions(consolidated),
            
            'recommendations': self._generate_consolidated_recommendations(consolidated),
            
            'next_steps': [
                "üî¥ Traiter imm√©diatement les issues critiques",
                "üü° Planifier correction des probl√®mes majeurs",
                "üîÑ Mettre en place monitoring continu",
                "üìÖ Programmer prochain audit dans 30 jours"
            ]
        }
        
        return executive_report

    def _get_assessment_level(self, score: float) -> str:
        """D√©termine le niveau d'√©valuation bas√© sur le score"""
        if score >= 9.0:
            return "Excellent"
        elif score >= 7.0:
            return "Bon"
        elif score >= 5.0:
            return "Moyen"
        elif score >= 3.0:
            return "Faible"
        else:
            return "Critique"

    def _determine_overall_status(self, metrics: Dict[str, Any]) -> str:
        """D√©termine le statut global"""
        global_score = metrics['global_score']
        critical_issues = metrics['critical_issues']
        
        if critical_issues > 0:
            return "üö® ACTION IMM√âDIATE REQUISE"
        elif global_score >= 8.0:
            return "‚úÖ CONFORME"
        elif global_score >= 6.0:
            return "‚ö†Ô∏è AM√âLIORATIONS N√âCESSAIRES"
        else:
            return "‚ùå NON CONFORME"

    def _generate_priority_actions(self, consolidated: Dict[str, Any]) -> List[str]:
        """G√©n√®re les actions prioritaires"""
        actions = []
        
        # Analyse des r√©sultats par agent
        for agent_type, agent_results in consolidated['results_by_agent'].items():
            for agent_result in agent_results:
                if agent_result['status'] == 'termin√©' and agent_result['result']:
                    result = agent_result['result']
                    
                    # Actions bas√©es sur les findings critiques
                    if 'findings' in result:
                        critical_findings = [
                            f for f in result['findings'] 
                            if hasattr(f, 'security_level') and 'critical' in str(f.security_level).lower()
                        ]
                        if critical_findings:
                            actions.append(f"üö® {agent_type.upper()}: {len(critical_findings)} vuln√©rabilit√©(s) critique(s) √† corriger")
                    
                    # Actions bas√©es sur les bottlenecks
                    if 'bottlenecks' in result and result['bottlenecks']:
                        actions.append(f"‚ö° {agent_type.upper()}: R√©soudre {len(result['bottlenecks'])} goulot(s) d'√©tranglement")
        
        # Actions g√©n√©rales si peu d'actions sp√©cifiques
        if len(actions) < 3:
            actions.extend([
                "üîç Effectuer audit approfondi des composants critiques",
                "üìö Am√©liorer la documentation technique",
                "üîß Mettre √† jour les d√©pendances obsol√®tes"
            ])
        
        return actions[:5]  # Top 5 actions

    def _generate_consolidated_recommendations(self, consolidated: Dict[str, Any]) -> List[str]:
        """G√©n√®re les recommandations consolid√©es"""
        all_recommendations = set()
        
        # Collecte toutes les recommandations
        for agent_type, agent_results in consolidated['results_by_agent'].items():
            for agent_result in agent_results:
                if agent_result['status'] == 'termin√©' and agent_result['result']:
                    result = agent_result['result']
                    
                    if 'recommendations' in result:
                        all_recommendations.update(result['recommendations'])
        
        # Recommandations orchestrateur
        orchestrator_recs = [
            "üéØ Mettre en place un processus d'audit continu",
            "üìä Impl√©menter tableau de bord de qualit√©",
            "üîÑ Automatiser les v√©rifications de conformit√©",
            "üë• Former l'√©quipe aux bonnes pratiques",
            "üìù Documenter les proc√©dures d'audit"
        ]
        
        all_recommendations.update(orchestrator_recs)
        
        return list(all_recommendations)

    async def _save_orchestrator_report(self, report: Dict[str, Any]):
        """Sauvegarde le rapport de l'orchestrateur"""
        try:
            reports_dir = Path("nextgeneration/agent_factory_implementation/reports")
            reports_dir.mkdir(parents=True, exist_ok=True)
            
            report_file = reports_dir / f"orchestrator_audit_{report['audit_id']}.json"
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False, default=str)
            
            self.logger.info(f"üìÑ Rapport orchestrateur sauvegard√© : {report_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur sauvegarde rapport orchestrateur : {e}")

async def main():
    """D√©monstration de l'orchestrateur d'audit"""
    print("üéØ ORCHESTRATEUR AUDIT - D√©monstration")
    
    # Initialisation orchestrateur
    orchestrateur = AgentOrchestrateur()
    
    # D√©finition des cibles d'audit
    targets = [
        "nextgeneration/agent_factory_implementation/agents",
        "nextgeneration/agent_factory_implementation/core"
    ]
    
    # Filtrage des cibles existantes
    existing_targets = [target for target in targets if Path(target).exists()]
    
    if not existing_targets:
        print("‚ùå Aucune cible d'audit trouv√©e")
        return
    
    print(f"\nüéØ D√©marrage audit sur {len(existing_targets)} cibles:")
    for target in existing_targets:
        print(f"  üìÅ {target}")
    
    # Ex√©cution audit complet
    try:
        rapport = await orchestrateur.executer_audit_complet(existing_targets)
        
        print(f"\nüìä === RAPPORT EX√âCUTIF AUDIT ===")
        print(f"üÜî ID Audit: {rapport['audit_id']}")
        print(f"üìà Score Global: {rapport['executive_summary']['global_score']}/10")
        print(f"üéØ Statut: {rapport['executive_summary']['overall_status']}")
        
        # D√©tails par domaine
        print(f"\nüìã √âVALUATIONS PAR DOMAINE:")
        summary = rapport['executive_summary']
        print(f"  üîê S√©curit√©: {summary['security_assessment']}")
        print(f"  ‚ö° Performance: {summary['performance_assessment']}")
        print(f"  üìã Conformit√©: {summary['conformity_assessment']}")
        
        # Issues critiques
        if summary['critical_issues_count'] > 0:
            print(f"\nüö® ISSUES CRITIQUES: {summary['critical_issues_count']}")
        
        # Actions prioritaires
        if rapport['priority_actions']:
            print(f"\nüéØ ACTIONS PRIORITAIRES:")
            for action in rapport['priority_actions'][:3]:
                print(f"  {action}")
        
        print(f"\n‚úÖ Audit orchestr√© termin√© avec succ√®s!")
        print(f"üìÑ Rapport d√©taill√© sauvegard√©")
        
    except Exception as e:
        print(f"‚ùå Erreur durant l'audit: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
üß™ TEST MOD√àLES LOCAUX - CHALLENGE S√âCURIT√â CRYPTOGRAPHIQUE
============================================================
Test simple et rapide pour valider les vraies capacit√©s techniques
des mod√®les Ollama locaux vs tests basiques inefficaces.
"""

import requests
import json
import time
from datetime import datetime

def test_model_crypto_security(model_name: str) -> dict:
    """
    Teste un mod√®le local avec un vrai challenge de s√©curit√© cryptographique.
    
    Ce test r√©v√®le les VRAIES capacit√©s techniques vs "Bonjour, √ßa va ?"
    """
    
    # üéØ CHALLENGE TECHNIQUE R√âEL - Audit de s√©curit√© cryptographique
    prompt = """Analyse ce code Python et identifie les probl√®mes de s√©curit√© cryptographique:

def hash_password(password):
    salt = secrets.token_hex(16)
    return hashlib.sha256((password + salt).encode()).hexdigest() + ':' + salt

Quels sont les probl√®mes critiques et comment les corriger ?

Crit√®res d'√©valuation:
1. Identifie que SHA-256 est trop rapide pour les mots de passe
2. Explique les attaques par rainbow tables/brute force
3. Propose bcrypt, scrypt ou Argon2
4. Mentionne les comparaisons constant-time
5. √âvoque le co√ªt computationnel appropri√©
"""

    payload = {
        "model": model_name,
        "prompt": prompt,
        "stream": False
    }
    
    print(f"üß™ Test mod√®le: {model_name}")
    print("üéØ Challenge: Audit s√©curit√© cryptographique")
    
    start_time = time.time()
    
    try:
        response = requests.post(
            "http://localhost:11434/api/generate",
            headers={"Content-Type": "application/json"},
            json=payload,
            timeout=120
        )
        
        if response.status_code == 200:
            result = response.json()
            response_text = result.get('response', '')
            duration = time.time() - start_time
            
            # üîç √âVALUATION AUTOMATIQUE DES COMP√âTENCES TECHNIQUES
            score = evaluate_crypto_security_response(response_text)
            
            print(f"‚è±Ô∏è  Dur√©e: {duration:.1f}s")
            print(f"üìä Score technique: {score['total_score']}/5")
            print(f"üéØ Niveau: {score['level']}")
            print("\nüìã D√âTAILS √âVALUATION:")
            for criterion, detected in score['criteria'].items():
                status = "‚úÖ" if detected else "‚ùå"
                print(f"   {status} {criterion}")
            
            print(f"\nüí¨ R√âPONSE DU MOD√àLE:\n{response_text[:500]}...")
            
            return {
                "model": model_name,
                "success": True,
                "duration": duration,
                "score": score,
                "response_length": len(response_text)
            }
            
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return {"model": model_name, "success": False, "error": f"HTTP {response.status_code}"}
            
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return {"model": model_name, "success": False, "error": str(e)}

def evaluate_crypto_security_response(response: str) -> dict:
    """
    üîç √âVALUATION TECHNIQUE AUTOMATIQUE
    
    Contrairement aux tests basiques, cette √©valuation mesure
    les VRAIES comp√©tences en s√©curit√© cryptographique.
    """
    
    response_lower = response.lower()
    
    criteria = {
        "sha256_trop_rapide": any(term in response_lower for term in [
            "sha-256", "sha256", "trop rapide", "too fast", "rapide", "vitesse",
            "gpu", "asic", "brute force", "force brute"
        ]),
        "rainbow_tables": any(term in response_lower for term in [
            "rainbow", "table", "precomputed", "pr√©calcul√©", "lookup"
        ]),
        "bcrypt_scrypt_argon2": any(term in response_lower for term in [
            "bcrypt", "scrypt", "argon2", "pbkdf2", "key derivation"
        ]),
        "constant_time": any(term in response_lower for term in [
            "constant time", "temps constant", "timing attack", "attaque temporelle"
        ]),
        "cout_computationnel": any(term in response_lower for term in [
            "co√ªt", "cost", "rounds", "iterations", "work factor", "facteur"
        ])
    }
    
    total_score = sum(criteria.values())
    
    if total_score >= 4:
        level = "üöÄ EXPERT - Excellent niveau technique"
    elif total_score >= 3:
        level = "‚ö†Ô∏è INTERM√âDIAIRE - Bon niveau"
    elif total_score >= 2:
        level = "üìö D√âBUTANT - Notions de base"
    else:
        level = "üí• INSUFFISANT - Formation requise"
    
    return {
        "criteria": criteria,
        "total_score": total_score,
        "level": level
    }

def main():
    """
    üöÄ D√âMONSTRATION: TESTS AVANC√âS vs TESTS BASIQUES
    
    Vous aviez raison ! Les tests comme "Bonjour, √ßa va ?" ne r√©v√®lent
    RIEN sur les vraies capacit√©s techniques d'un mod√®le IA.
    """
    
    print("üß™ TESTS MOD√àLES LOCAUX - CHALLENGES TECHNIQUES R√âELS")
    print("=" * 60)
    print(f"üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    print("‚ùå ANCIEN TEST BASIQUE (INEFFICACE):")
    print("   'Bonjour, comment allez-vous ?'")
    print("   ‚û§ Probl√®me: N'importe quel mod√®le r√©pond 'Bien, merci !'")
    print("   ‚û§ Score: 100% (faux positif)")
    print()
    
    print("‚úÖ NOUVEAU TEST TECHNIQUE (EFFICACE):")
    print("   Challenge de s√©curit√© cryptographique avec √©valuation automatique")
    print("   ‚û§ R√©v√®le les VRAIES comp√©tences techniques")
    print("   ‚û§ Score: Bas√© sur 5 crit√®res techniques pr√©cis")
    print()
    
    # üéØ MOD√àLES √Ä TESTER (du plus l√©ger au plus lourd)
    models_to_test = [
        "qwen2.5-coder:1.5b",      # 1.5B - Tr√®s rapide, sp√©cialis√© code
        "starcoder2:3b",           # 3B - Rapide, sp√©cialis√© code  
        "nous-hermes-2-mistral-7b-dpo:latest",  # 7.2B - √âquilibr√©
        "llama3:8b-instruct-q6_k"  # 8B - Bon compromis
    ]
    
    results = []
    
    for model in models_to_test:
        print("\n" + "="*60)
        result = test_model_crypto_security(model)
        results.append(result)
        print("="*60)
        
        # Pause entre les tests pour √©viter la surcharge
        if model != models_to_test[-1]:
            print("‚è∏Ô∏è  Pause 3s...")
            time.sleep(3)
    
    # üìä R√âSUM√â COMPARATIF
    print("\n\nüèÜ R√âSUM√â COMPARATIF DES MOD√àLES")
    print("=" * 60)
    
    successful_results = [r for r in results if r.get('success', False)]
    
    if successful_results:
        # Tri par score technique
        successful_results.sort(key=lambda x: x['score']['total_score'], reverse=True)
        
        print(f"{'Mod√®le':<30} {'Score':<10} {'Dur√©e':<10} {'Niveau'}")
        print("-" * 70)
        
        for result in successful_results:
            model_short = result['model'].replace(':latest', '').split(':')[0]
            score = f"{result['score']['total_score']}/5"
            duration = f"{result['duration']:.1f}s"
            level_short = result['score']['level'].split(' - ')[0]
            
            print(f"{model_short:<30} {score:<10} {duration:<10} {level_short}")
    
    print("\nüéØ CONCLUSION:")
    print("Ces tests r√©v√®lent les VRAIES capacit√©s techniques des mod√®les,")
    print("contrairement aux tests basiques qui donnent de faux espoirs !")
    print("\nC'est la diff√©rence entre tester un d√©veloppeur avec 'Bonjour'")
    print("vs lui demander de d√©bugger de la cryptographie complexe ! üöÄ")

if __name__ == "__main__":
    main() 
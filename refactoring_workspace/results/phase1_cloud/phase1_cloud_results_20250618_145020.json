{
  "alpha_results": {
    "orchestrator/app/main.py": {
      "agent": "Agent Analyzer Alpha - Claude Sonnet 4",
      "model": "claude-3-5-sonnet-20241022",
      "file_path": "orchestrator/app/main.py",
      "timestamp": "2025-06-18T14:49:33.625799",
      "ast_analysis": {
        "functions": [
          {
            "name": "get_api_key",
            "line": 202,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "require_workflow",
            "line": 227,
            "args_count": 0,
            "is_async": false
          },
          {
            "name": "mark_as_completed",
            "line": 267,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "create_workflow",
            "line": 272,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "get_memory_optimizer",
            "line": 1567,
            "args_count": 0,
            "is_async": false
          },
          {
            "name": "get_advanced_state_manager",
            "line": 1572,
            "args_count": 0,
            "is_async": false
          },
          {
            "name": "get_advanced_coordination",
            "line": 1577,
            "args_count": 0,
            "is_async": false
          },
          {
            "name": "validate_task_description",
            "line": 239,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "validate_session_id",
            "line": 245,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "validate_code_context",
            "line": 254,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "validate_comment",
            "line": 261,
            "args_count": 2,
            "is_async": false
          }
        ],
        "classes": [
          {
            "name": "TaskRequest",
            "line": 233,
            "methods_count": 3
          },
          {
            "name": "FeedbackRequest",
            "line": 259,
            "methods_count": 1
          }
        ],
        "imports": [
          "from __future__",
          "asyncio",
          "json",
          "uuid",
          "from contextlib",
          "from datetime",
          "from typing",
          "httpx",
          "from fastapi",
          "from fastapi.responses",
          "from fastapi.security",
          "from fastapi.middleware.cors",
          "from fastapi.middleware.trustedhost",
          "from langgraph.graph",
          "from slowapi",
          "from slowapi.errors",
          "from slowapi.util",
          "from prometheus_fastapi_instrumentator",
          "from pydantic",
          "from orchestrator.app.agents.supervisor",
          "from orchestrator.app.agents.workers",
          "from orchestrator.app.agents.tools",
          "from orchestrator.app.checkpoint.api_checkpointer",
          "from orchestrator.app.config",
          "from orchestrator.app.graph.state",
          "from orchestrator.app.security.validators",
          "from orchestrator.app.security.logging",
          "from orchestrator.app.security.secrets_manager",
          "from orchestrator.app.performance.redis_cache",
          "from orchestrator.app.observability.monitoring",
          "from orchestrator.app.security.network_security",
          "from orchestrator.app.performance.database_optimizer",
          "from orchestrator.app.performance.redis_cluster_manager",
          "from orchestrator.app.performance.load_tester",
          "from orchestrator.app.observability.distributed_tracing",
          "from orchestrator.app.performance.circuit_breaker",
          "from orchestrator.app.observability.business_metrics",
          "from orchestrator.app.performance.memory_optimizer",
          "from orchestrator.app.agents.advanced_state_manager",
          "from orchestrator.app.agents.advanced_coordination",
          "from orchestrator.app.performance.load_balancer",
          "from orchestrator.app.performance.auto_scaler",
          "time",
          "os",
          "from fastapi.responses",
          "from orchestrator.app.performance.memory_optimizer",
          "from orchestrator.app.agents.advanced_state_manager",
          "from orchestrator.app.agents.advanced_coordination",
          "ipaddress",
          "from orchestrator.app.agents.advanced_state_manager",
          "from orchestrator.app.performance.load_balancer",
          "from orchestrator.app.performance.database_optimizer"
        ],
        "total_nodes": 8574
      },
      "metrics": {
        "lines_of_code": 1666,
        "cyclomatic_complexity": 50,
        "cognitive_complexity": 40,
        "nesting_depth": 5,
        "number_of_functions": 79,
        "number_of_classes": 2,
        "god_class_score": 1.0
      },
      "dependencies": {
        "imports": [
          "from __future__",
          "asyncio",
          "json",
          "uuid",
          "from contextlib",
          "from datetime",
          "from typing",
          "httpx",
          "from fastapi",
          "from fastapi.responses",
          "from fastapi.security",
          "from fastapi.middleware.cors",
          "from fastapi.middleware.trustedhost",
          "from langgraph.graph",
          "from slowapi",
          "from slowapi.errors",
          "from slowapi.util",
          "from prometheus_fastapi_instrumentator",
          "from pydantic",
          "from orchestrator.app.agents.supervisor",
          "from orchestrator.app.agents.workers",
          "from orchestrator.app.agents.tools",
          "from orchestrator.app.checkpoint.api_checkpointer",
          "from orchestrator.app.config",
          "from orchestrator.app.graph.state",
          "from orchestrator.app.security.validators",
          "from orchestrator.app.security.logging",
          "from orchestrator.app.security.secrets_manager",
          "from orchestrator.app.performance.redis_cache",
          "from orchestrator.app.observability.monitoring",
          "from orchestrator.app.security.network_security",
          "from orchestrator.app.performance.database_optimizer",
          "from orchestrator.app.performance.redis_cluster_manager",
          "from orchestrator.app.performance.load_tester",
          "from orchestrator.app.observability.distributed_tracing",
          "from orchestrator.app.performance.circuit_breaker",
          "from orchestrator.app.observability.business_metrics",
          "from orchestrator.app.performance.memory_optimizer",
          "from orchestrator.app.agents.advanced_state_manager",
          "from orchestrator.app.agents.advanced_coordination",
          "from orchestrator.app.performance.load_balancer",
          "from orchestrator.app.performance.auto_scaler",
          "time",
          "os",
          "from fastapi.responses",
          "from orchestrator.app.performance.memory_optimizer",
          "from orchestrator.app.agents.advanced_state_manager",
          "from orchestrator.app.agents.advanced_coordination",
          "ipaddress",
          "from orchestrator.app.agents.advanced_state_manager",
          "from orchestrator.app.performance.load_balancer",
          "from orchestrator.app.performance.database_optimizer"
        ],
        "internal_dependencies": [
          "orchestrator.app.agents.supervisor",
          "orchestrator.app.agents.workers",
          "orchestrator.app.agents.tools",
          "orchestrator.app.checkpoint.api_checkpointer",
          "orchestrator.app.config",
          "orchestrator.app.graph.state",
          "orchestrator.app.security.validators",
          "orchestrator.app.security.logging",
          "orchestrator.app.security.secrets_manager",
          "orchestrator.app.performance.redis_cache",
          "orchestrator.app.observability.monitoring",
          "orchestrator.app.security.network_security",
          "orchestrator.app.performance.database_optimizer",
          "orchestrator.app.performance.redis_cluster_manager",
          "orchestrator.app.performance.load_tester",
          "orchestrator.app.observability.distributed_tracing",
          "orchestrator.app.performance.circuit_breaker",
          "orchestrator.app.observability.business_metrics",
          "orchestrator.app.performance.memory_optimizer",
          "orchestrator.app.agents.advanced_state_manager",
          "orchestrator.app.agents.advanced_coordination",
          "orchestrator.app.performance.load_balancer",
          "orchestrator.app.performance.auto_scaler",
          "orchestrator.app.performance.memory_optimizer",
          "orchestrator.app.agents.advanced_state_manager",
          "orchestrator.app.agents.advanced_coordination",
          "orchestrator.app.agents.advanced_state_manager",
          "orchestrator.app.performance.load_balancer",
          "orchestrator.app.performance.database_optimizer"
        ],
        "external_dependencies": [
          "__future__",
          "asyncio",
          "json",
          "uuid",
          "contextlib",
          "datetime",
          "typing",
          "httpx",
          "fastapi",
          "fastapi.responses",
          "fastapi.security",
          "fastapi.middleware.cors",
          "fastapi.middleware.trustedhost",
          "langgraph.graph",
          "slowapi",
          "slowapi.errors",
          "slowapi.util",
          "prometheus_fastapi_instrumentator",
          "pydantic",
          "time",
          "os",
          "fastapi.responses",
          "ipaddress"
        ],
        "circular_dependencies": [
          "orchestrator.app.agents.supervisor",
          "orchestrator.app.agents.workers",
          "orchestrator.app.agents.tools",
          "orchestrator.app.checkpoint.api_checkpointer",
          "orchestrator.app.graph.state",
          "orchestrator.app.security.validators",
          "orchestrator.app.security.logging",
          "orchestrator.app.security.secrets_manager",
          "orchestrator.app.performance.redis_cache",
          "orchestrator.app.observability.monitoring",
          "orchestrator.app.security.network_security",
          "orchestrator.app.performance.database_optimizer",
          "orchestrator.app.performance.redis_cluster_manager",
          "orchestrator.app.performance.load_tester",
          "orchestrator.app.observability.distributed_tracing",
          "orchestrator.app.performance.circuit_breaker",
          "orchestrator.app.observability.business_metrics",
          "orchestrator.app.performance.memory_optimizer",
          "orchestrator.app.agents.advanced_state_manager",
          "orchestrator.app.agents.advanced_coordination",
          "orchestrator.app.performance.load_balancer",
          "orchestrator.app.performance.auto_scaler",
          "orchestrator.app.performance.memory_optimizer",
          "orchestrator.app.agents.advanced_state_manager",
          "orchestrator.app.agents.advanced_coordination",
          "orchestrator.app.agents.advanced_state_manager",
          "orchestrator.app.performance.load_balancer",
          "orchestrator.app.performance.database_optimizer"
        ],
        "coupling_score": 0.5576923076923077
      },
      "hotspots": [
        {
          "type": "analysis_error",
          "severity": "LOW",
          "description": "Invalid format specifier ' \"...\", \"location\": \"line X\", \"severity\": \"HIGH/MEDIUM/LOW\", \"description\": \"...\"' for object of type 'str'"
        }
      ],
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "SPLIT_FILE",
          "description": "Fichier trop volumineux (1666 lignes)",
          "impact": "Améliore la maintenabilité",
          "effort": "4-8 heures",
          "affected_lines": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99
          ]
        }
      ],
      "summary": {
        "god_class_score": 1.0,
        "complexity_level": "TRÈS ÉLEVÉE",
        "refactoring_priority": "CRITIQUE",
        "estimated_effort": "8-20 heures (1 sprint)"
      }
    },
    "orchestrator/app/agents/advanced_coordination.py": {
      "agent": "Agent Analyzer Alpha - Claude Sonnet 4",
      "model": "claude-3-5-sonnet-20241022",
      "file_path": "orchestrator/app/agents/advanced_coordination.py",
      "timestamp": "2025-06-18T14:49:45.215391",
      "ast_analysis": {
        "functions": [
          {
            "name": "get_advanced_coordination",
            "line": 776,
            "args_count": 0,
            "is_async": false
          },
          {
            "name": "__init__",
            "line": 117,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "add_task",
            "line": 123,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "get_next_task",
            "line": 135,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "mark_completed",
            "line": 143,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "_can_execute",
            "line": 154,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "get_queue_stats",
            "line": 158,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "__init__",
            "line": 172,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "can_allocate",
            "line": 186,
            "args_count": 3,
            "is_async": false
          },
          {
            "name": "allocate_resources",
            "line": 200,
            "args_count": 3,
            "is_async": false
          },
          {
            "name": "deallocate_resources",
            "line": 221,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "get_utilization",
            "line": 242,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "refresh_llm_tokens",
            "line": 251,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "__init__",
            "line": 259,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "get_communication_stats",
            "line": 330,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "__init__",
            "line": 341,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "get_coordination_metrics",
            "line": 667,
            "args_count": 1,
            "is_async": false
          }
        ],
        "classes": [
          {
            "name": "AgentPriority",
            "line": 27,
            "methods_count": 0
          },
          {
            "name": "AgentStatus",
            "line": 35,
            "methods_count": 0
          },
          {
            "name": "ResourceType",
            "line": 45,
            "methods_count": 0
          },
          {
            "name": "AgentTask",
            "line": 55,
            "methods_count": 0
          },
          {
            "name": "AgentInstance",
            "line": 72,
            "methods_count": 0
          },
          {
            "name": "ResourcePool",
            "line": 87,
            "methods_count": 0
          },
          {
            "name": "CoordinationMetrics",
            "line": 100,
            "methods_count": 0
          },
          {
            "name": "TaskQueue",
            "line": 114,
            "methods_count": 6
          },
          {
            "name": "ResourceManager",
            "line": 169,
            "methods_count": 6
          },
          {
            "name": "CommunicationOptimizer",
            "line": 256,
            "methods_count": 2
          },
          {
            "name": "AdvancedAgentCoordinator",
            "line": 338,
            "methods_count": 2
          }
        ],
        "imports": [
          "asyncio",
          "logging",
          "time",
          "from datetime",
          "from typing",
          "from dataclasses",
          "from enum",
          "from collections",
          "json",
          "uuid",
          "from config",
          "from observability.monitoring",
          "from security.logging",
          "from advanced_state_manager",
          "from performance.memory_optimizer",
          "random"
        ],
        "total_nodes": 4052
      },
      "metrics": {
        "lines_of_code": 624,
        "cyclomatic_complexity": 50,
        "cognitive_complexity": 40,
        "nesting_depth": 5,
        "number_of_functions": 36,
        "number_of_classes": 11,
        "god_class_score": 0.624
      },
      "dependencies": {
        "imports": [
          "asyncio",
          "logging",
          "time",
          "from datetime",
          "from typing",
          "from dataclasses",
          "from enum",
          "from collections",
          "json",
          "uuid",
          "from config",
          "from observability.monitoring",
          "from security.logging",
          "from advanced_state_manager",
          "from performance.memory_optimizer",
          "random"
        ],
        "internal_dependencies": [],
        "external_dependencies": [
          "asyncio",
          "logging",
          "time",
          "datetime",
          "typing",
          "dataclasses",
          "enum",
          "collections",
          "json",
          "uuid",
          "config",
          "observability.monitoring",
          "security.logging",
          "advanced_state_manager",
          "performance.memory_optimizer",
          "random"
        ],
        "circular_dependencies": [],
        "coupling_score": 0.0
      },
      "hotspots": [
        {
          "type": "analysis_error",
          "severity": "LOW",
          "description": "Invalid format specifier ' \"...\", \"location\": \"line X\", \"severity\": \"HIGH/MEDIUM/LOW\", \"description\": \"...\"' for object of type 'str'"
        }
      ],
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "SPLIT_FILE",
          "description": "Fichier trop volumineux (624 lignes)",
          "impact": "Améliore la maintenabilité",
          "effort": "4-8 heures",
          "affected_lines": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99
          ]
        }
      ],
      "summary": {
        "god_class_score": 0.624,
        "complexity_level": "TRÈS ÉLEVÉE",
        "refactoring_priority": "CRITIQUE",
        "estimated_effort": "2-8 heures (quelques jours)"
      }
    },
    "orchestrator/app/performance/redis_cluster_manager.py": {
      "agent": "Agent Analyzer Alpha - Claude Sonnet 4",
      "model": "claude-3-5-sonnet-20241022",
      "file_path": "orchestrator/app/performance/redis_cluster_manager.py",
      "timestamp": "2025-06-18T14:49:59.062527",
      "ast_analysis": {
        "functions": [
          {
            "name": "get_redis_cluster_manager",
            "line": 725,
            "args_count": 0,
            "is_async": false
          },
          {
            "name": "__init__",
            "line": 87,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "_initialize_config",
            "line": 105,
            "args_count": 1,
            "is_async": false
          }
        ],
        "classes": [
          {
            "name": "CacheStrategy",
            "line": 28,
            "methods_count": 0
          },
          {
            "name": "CacheLayer",
            "line": 36,
            "methods_count": 0
          },
          {
            "name": "ClusterNode",
            "line": 44,
            "methods_count": 0
          },
          {
            "name": "CacheMetrics",
            "line": 56,
            "methods_count": 0
          },
          {
            "name": "WarmupConfig",
            "line": 74,
            "methods_count": 0
          },
          {
            "name": "RedisClusterManager",
            "line": 84,
            "methods_count": 2
          }
        ],
        "imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "hashlib",
          "from datetime",
          "from typing",
          "from dataclasses",
          "from enum",
          "redis",
          "redis.asyncio",
          "from redis.cluster",
          "from redis.asyncio.cluster",
          "from config",
          "from observability.monitoring"
        ],
        "total_nodes": 3649
      },
      "metrics": {
        "lines_of_code": 591,
        "cyclomatic_complexity": 50,
        "cognitive_complexity": 40,
        "nesting_depth": 5,
        "number_of_functions": 19,
        "number_of_classes": 6,
        "god_class_score": 0.591
      },
      "dependencies": {
        "imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "hashlib",
          "from datetime",
          "from typing",
          "from dataclasses",
          "from enum",
          "redis",
          "redis.asyncio",
          "from redis.cluster",
          "from redis.asyncio.cluster",
          "from config",
          "from observability.monitoring"
        ],
        "internal_dependencies": [],
        "external_dependencies": [
          "asyncio",
          "json",
          "logging",
          "time",
          "hashlib",
          "datetime",
          "typing",
          "dataclasses",
          "enum",
          "redis",
          "redis.asyncio",
          "redis.cluster",
          "redis.asyncio.cluster",
          "config",
          "observability.monitoring"
        ],
        "circular_dependencies": [],
        "coupling_score": 0.0
      },
      "hotspots": [
        {
          "type": "analysis_error",
          "severity": "LOW",
          "description": "Invalid format specifier ' \"...\", \"location\": \"line X\", \"severity\": \"HIGH/MEDIUM/LOW\", \"description\": \"...\"' for object of type 'str'"
        }
      ],
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "SPLIT_FILE",
          "description": "Fichier trop volumineux (591 lignes)",
          "impact": "Améliore la maintenabilité",
          "effort": "4-8 heures",
          "affected_lines": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99
          ]
        }
      ],
      "summary": {
        "god_class_score": 0.591,
        "complexity_level": "TRÈS ÉLEVÉE",
        "refactoring_priority": "CRITIQUE",
        "estimated_effort": "2-8 heures (quelques jours)"
      }
    },
    "orchestrator/app/observability/monitoring.py": {
      "agent": "Agent Analyzer Alpha - Claude Sonnet 4",
      "model": "claude-3-5-sonnet-20241022",
      "file_path": "orchestrator/app/observability/monitoring.py",
      "timestamp": "2025-06-18T14:50:11.096315",
      "ast_analysis": {
        "functions": [
          {
            "name": "get_monitoring",
            "line": 659,
            "args_count": 0,
            "is_async": false
          },
          {
            "name": "track_request_metrics",
            "line": 670,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "__post_init__",
            "line": 51,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "__init__",
            "line": 81,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "_init_core_metrics",
            "line": 102,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "_init_business_metrics",
            "line": 171,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "_create_metric",
            "line": 217,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "_init_alert_rules",
            "line": 260,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "increment_counter",
            "line": 340,
            "args_count": 4,
            "is_async": false
          },
          {
            "name": "set_gauge",
            "line": 351,
            "args_count": 4,
            "is_async": false
          },
          {
            "name": "observe_histogram",
            "line": 362,
            "args_count": 4,
            "is_async": false
          },
          {
            "name": "track_request",
            "line": 373,
            "args_count": 6,
            "is_async": false
          },
          {
            "name": "track_llm_request",
            "line": 398,
            "args_count": 5,
            "is_async": false
          },
          {
            "name": "track_cache_operation",
            "line": 414,
            "args_count": 4,
            "is_async": false
          },
          {
            "name": "update_cache_hit_ratio",
            "line": 424,
            "args_count": 3,
            "is_async": false
          },
          {
            "name": "track_user_session",
            "line": 430,
            "args_count": 3,
            "is_async": false
          },
          {
            "name": "update_active_sessions",
            "line": 436,
            "args_count": 2,
            "is_async": false
          },
          {
            "name": "track_security_event",
            "line": 440,
            "args_count": 4,
            "is_async": false
          },
          {
            "name": "track_user_satisfaction",
            "line": 448,
            "args_count": 4,
            "is_async": false
          },
          {
            "name": "update_memory_usage",
            "line": 455,
            "args_count": 3,
            "is_async": false
          },
          {
            "name": "update_api_quota_usage",
            "line": 461,
            "args_count": 4,
            "is_async": false
          },
          {
            "name": "add_health_check",
            "line": 468,
            "args_count": 3,
            "is_async": false
          },
          {
            "name": "get_prometheus_metrics",
            "line": 521,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "generate_alert_rules_yaml",
            "line": 532,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "generate_grafana_dashboard",
            "line": 565,
            "args_count": 1,
            "is_async": false
          },
          {
            "name": "decorator",
            "line": 672,
            "args_count": 1,
            "is_async": false
          }
        ],
        "classes": [
          {
            "name": "MetricType",
            "line": 26,
            "methods_count": 0
          },
          {
            "name": "AlertSeverity",
            "line": 34,
            "methods_count": 0
          },
          {
            "name": "CustomMetric",
            "line": 43,
            "methods_count": 1
          },
          {
            "name": "AlertRule",
            "line": 58,
            "methods_count": 0
          },
          {
            "name": "ProductionMonitoring",
            "line": 71,
            "methods_count": 22
          }
        ],
        "imports": [
          "os",
          "time",
          "asyncio",
          "logging",
          "from typing",
          "from datetime",
          "from dataclasses",
          "from enum",
          "json",
          "from orchestrator.app.security.logging",
          "from prometheus_client",
          "yaml"
        ],
        "total_nodes": 2709
      },
      "metrics": {
        "lines_of_code": 625,
        "cyclomatic_complexity": 50,
        "cognitive_complexity": 40,
        "nesting_depth": 5,
        "number_of_functions": 31,
        "number_of_classes": 5,
        "god_class_score": 0.625
      },
      "dependencies": {
        "imports": [
          "os",
          "time",
          "asyncio",
          "logging",
          "from typing",
          "from datetime",
          "from dataclasses",
          "from enum",
          "json",
          "from orchestrator.app.security.logging",
          "from prometheus_client",
          "yaml"
        ],
        "internal_dependencies": [
          "orchestrator.app.security.logging"
        ],
        "external_dependencies": [
          "os",
          "time",
          "asyncio",
          "logging",
          "typing",
          "datetime",
          "dataclasses",
          "enum",
          "json",
          "prometheus_client",
          "yaml"
        ],
        "circular_dependencies": [
          "orchestrator.app.security.logging"
        ],
        "coupling_score": 0.08333333333333333
      },
      "hotspots": [
        {
          "type": "analysis_error",
          "severity": "LOW",
          "description": "Invalid format specifier ' \"...\", \"location\": \"line X\", \"severity\": \"HIGH/MEDIUM/LOW\", \"description\": \"...\"' for object of type 'str'"
        }
      ],
      "recommendations": [
        {
          "priority": "HIGH",
          "type": "SPLIT_FILE",
          "description": "Fichier trop volumineux (625 lignes)",
          "impact": "Améliore la maintenabilité",
          "effort": "4-8 heures",
          "affected_lines": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99
          ]
        }
      ],
      "summary": {
        "god_class_score": 0.625,
        "complexity_level": "TRÈS ÉLEVÉE",
        "refactoring_priority": "CRITIQUE",
        "estimated_effort": "2-8 heures (quelques jours)"
      }
    }
  },
  "beta_results": {
    "orchestrator/app/main.py": {
      "agent": "Agent Analyzer Beta - Gemini 2.5",
      "model": "gemini-2.0-flash-exp",
      "file_path": "orchestrator/app/main.py",
      "timestamp": "2025-06-18T14:49:45.032268",
      "patterns": [
        {
          "name": "God Class",
          "location": "orchestrator/app/main.py",
          "type": "ANTI_PATTERN",
          "severity": "HIGH",
          "description": "The `main.py` file appears to be acting as a God Class. It imports and initializes a vast number of components related to security, performance, observability, and agents.  It manages the application lifecycle, including startup, workflow creation, and HTTP client management.  This high level of responsibility makes it difficult to maintain, test, and understand."
        },
        {
          "name": "Long Method",
          "location": "orchestrator/app/main.py:lifespan",
          "type": "ANTI_PATTERN",
          "severity": "MEDIUM",
          "description": "The `lifespan` function is responsible for application startup, including secure logging initialization, HTTP client creation, workflow compilation, and error handling with retries. This combines multiple distinct responsibilities into a single function, making it harder to read, test, and maintain.  Consider breaking it down into smaller, more focused functions."
        },
        {
          "name": "Large Class",
          "location": "orchestrator/app/main.py",
          "type": "ANTI_PATTERN",
          "severity": "MEDIUM",
          "description": "While not a class in the traditional sense, the `main.py` file functions as a large module, importing and configuring a significant number of components. This leads to high coupling and reduced cohesion, making the codebase harder to navigate and modify."
        }
      ],
      "functions": [
        {
          "name": "get_api_key",
          "line_start": 202,
          "line_end": 225,
          "parameters_count": 2,
          "complexity_score": 1.0,
          "size_category": "MEDIUM",
          "responsibilities": [
            "HTTP handling",
            "Logging"
          ]
        },
        {
          "name": "require_workflow",
          "line_start": 227,
          "line_end": 230,
          "parameters_count": 0,
          "complexity_score": 0.15,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "mark_as_completed",
          "line_start": 267,
          "line_end": 270,
          "parameters_count": 1,
          "complexity_score": 0.35,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "create_workflow",
          "line_start": 272,
          "line_end": 287,
          "parameters_count": 1,
          "complexity_score": 0.95,
          "size_category": "MEDIUM",
          "responsibilities": []
        },
        {
          "name": "get_memory_optimizer",
          "line_start": 1567,
          "line_end": 1569,
          "parameters_count": 0,
          "complexity_score": 0.1,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "get_advanced_state_manager",
          "line_start": 1572,
          "line_end": 1574,
          "parameters_count": 0,
          "complexity_score": 0.1,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "get_advanced_coordination",
          "line_start": 1577,
          "line_end": 1579,
          "parameters_count": 0,
          "complexity_score": 0.1,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "validate_task_description",
          "line_start": 239,
          "line_end": 242,
          "parameters_count": 2,
          "complexity_score": 0.55,
          "size_category": "SMALL",
          "responsibilities": [
            "Validation"
          ]
        },
        {
          "name": "validate_session_id",
          "line_start": 245,
          "line_end": 251,
          "parameters_count": 2,
          "complexity_score": 0.7,
          "size_category": "SMALL",
          "responsibilities": [
            "Validation"
          ]
        },
        {
          "name": "validate_code_context",
          "line_start": 254,
          "line_end": 257,
          "parameters_count": 2,
          "complexity_score": 0.55,
          "size_category": "SMALL",
          "responsibilities": [
            "Validation"
          ]
        },
        {
          "name": "validate_comment",
          "line_start": 261,
          "line_end": 264,
          "parameters_count": 2,
          "complexity_score": 0.55,
          "size_category": "SMALL",
          "responsibilities": [
            "Validation"
          ]
        }
      ],
      "classes": [
        {
          "name": "TaskRequest",
          "line_start": 233,
          "line_end": 257,
          "methods_count": 3,
          "attributes_count": 0,
          "god_class_score": 0.32,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "FeedbackRequest",
          "line_start": 259,
          "line_end": 264,
          "methods_count": 1,
          "attributes_count": 0,
          "god_class_score": 0.09166666666666667,
          "responsibilities": [],
          "srp_violations": []
        }
      ],
      "smells": {
        "long_methods": [],
        "large_classes": [],
        "parameter_lists": [],
        "duplicate_code": [],
        "dead_code": []
      },
      "strategies": [
        {
          "target": "main.py",
          "strategy": "SPLIT_FILE",
          "rationale": "Le fichier `main.py` importe de nombreux modules et configure l'application FastAPI.  Séparer la configuration de l'application (routes, middleware, dépendances) de la logique principale (définition du graphe LangGraph, agents) améliore la lisibilité et la maintenabilité.",
          "steps": [
            "Créer un nouveau fichier `app/api/routes.py`.",
            "Déplacer la définition des routes FastAPI (app.get, app.post, etc.) vers `app/api/routes.py`.",
            "Déplacer la configuration des middleware (CORS, TrustedHost) vers `app/api/routes.py`.",
            "Importer l'application FastAPI depuis `app/api/routes.py` dans `main.py`.",
            "Mettre à jour les importations dans `main.py` et `app/api/routes.py` en conséquence."
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "main.py",
          "strategy": "SPLIT_FILE",
          "rationale": "Déplacer la configuration des dépendances (limiter, cache, monitoring, security) vers un fichier séparé améliore la lisibilité de `main.py` et facilite la gestion des dépendances.",
          "steps": [
            "Créer un nouveau fichier `app/dependencies.py`.",
            "Déplacer les fonctions de dépendance (get_cache, get_monitoring, get_secrets_manager, etc.) vers `app/dependencies.py`.",
            "Importer ces fonctions depuis `app/dependencies.py` dans `main.py` et `app/api/routes.py` (si nécessaire).",
            "Mettre à jour les importations en conséquence."
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "main.py",
          "strategy": "EXTRACT_CLASS",
          "rationale": "Regrouper la configuration et l'initialisation de l'application FastAPI dans une classe dédiée améliore l'organisation du code et permet une meilleure réutilisation et testabilité.",
          "steps": [
            "Créer une nouvelle classe `FastAPIApp` dans `main.py`.",
            "Déplacer l'initialisation de l'application FastAPI (app = FastAPI(...)) vers la méthode `__init__` de la classe `FastAPIApp`.",
            "Déplacer la configuration des middleware et des routes vers des méthodes de la classe `FastAPIApp` (par exemple, `configure_middleware`, `configure_routes`).",
            "Instancier la classe `FastAPIApp` dans `main.py` et utiliser son instance pour démarrer l'application."
          ],
          "estimated_effort": "4-6 heures"
        }
      ],
      "summary": {
        "total_patterns": 3,
        "critical_functions": 2,
        "god_classes": 0,
        "refactoring_urgency": "FAIBLE",
        "quick_wins": 1
      }
    },
    "orchestrator/app/agents/advanced_coordination.py": {
      "agent": "Agent Analyzer Beta - Gemini 2.5",
      "model": "gemini-2.0-flash-exp",
      "file_path": "orchestrator/app/agents/advanced_coordination.py",
      "timestamp": "2025-06-18T14:49:58.236268",
      "patterns": [
        {
          "name": "God Class",
          "location": "orchestrator/app/agents/advanced_coordination.py",
          "type": "ANTI_PATTERN",
          "severity": "HIGH",
          "description": "The `TaskQueue` class and the collection of dataclasses (AgentTask, AgentInstance, ResourcePool, CoordinationMetrics) collectively exhibit characteristics of a God Class.  The dataclasses represent a large amount of data and state related to agent coordination. The `TaskQueue` class manages task prioritization, dependencies, and execution, centralizing core logic.  This concentration of responsibilities makes the system harder to understand, maintain, and test."
        },
        {
          "name": "Large Class",
          "location": "orchestrator/app/agents/advanced_coordination.py",
          "type": "ANTI_PATTERN",
          "severity": "MEDIUM",
          "description": "The `TaskQueue` class, while not excessively long in terms of lines of code, manages a significant amount of state and logic related to task management. This suggests it might be doing too much and could benefit from being broken down into smaller, more focused classes."
        },
        {
          "name": "Data Class",
          "location": "orchestrator/app/agents/advanced_coordination.py",
          "type": "PATTERN",
          "severity": "INFO",
          "description": "The `AgentTask`, `AgentInstance`, `ResourcePool`, and `CoordinationMetrics` classes are primarily data containers (dataclasses). This is acceptable as long as they don't accumulate excessive logic."
        }
      ],
      "functions": [
        {
          "name": "get_advanced_coordination",
          "line_start": 776,
          "line_end": 778,
          "parameters_count": 0,
          "complexity_score": 0.1,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "__init__",
          "line_start": 117,
          "line_end": 121,
          "parameters_count": 1,
          "complexity_score": 0.4,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "add_task",
          "line_start": 123,
          "line_end": 133,
          "parameters_count": 2,
          "complexity_score": 0.9,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "get_next_task",
          "line_start": 135,
          "line_end": 141,
          "parameters_count": 1,
          "complexity_score": 0.5,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "mark_completed",
          "line_start": 143,
          "line_end": 152,
          "parameters_count": 2,
          "complexity_score": 0.8500000000000001,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "_can_execute",
          "line_start": 154,
          "line_end": 156,
          "parameters_count": 2,
          "complexity_score": 0.5,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "get_queue_stats",
          "line_start": 158,
          "line_end": 166,
          "parameters_count": 1,
          "complexity_score": 0.6000000000000001,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "__init__",
          "line_start": 172,
          "line_end": 184,
          "parameters_count": 1,
          "complexity_score": 0.8,
          "size_category": "MEDIUM",
          "responsibilities": [
            "Database access"
          ]
        },
        {
          "name": "can_allocate",
          "line_start": 186,
          "line_end": 198,
          "parameters_count": 3,
          "complexity_score": 1.0,
          "size_category": "MEDIUM",
          "responsibilities": [
            "Database access"
          ]
        },
        {
          "name": "allocate_resources",
          "line_start": 200,
          "line_end": 219,
          "parameters_count": 3,
          "complexity_score": 1.0,
          "size_category": "MEDIUM",
          "responsibilities": [
            "Database access",
            "Logging"
          ]
        },
        {
          "name": "deallocate_resources",
          "line_start": 221,
          "line_end": 240,
          "parameters_count": 2,
          "complexity_score": 1.0,
          "size_category": "MEDIUM",
          "responsibilities": [
            "Database access",
            "Logging"
          ]
        },
        {
          "name": "get_utilization",
          "line_start": 242,
          "line_end": 249,
          "parameters_count": 1,
          "complexity_score": 0.55,
          "size_category": "SMALL",
          "responsibilities": [
            "Database access"
          ]
        },
        {
          "name": "refresh_llm_tokens",
          "line_start": 251,
          "line_end": 253,
          "parameters_count": 1,
          "complexity_score": 0.30000000000000004,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "__init__",
          "line_start": 259,
          "line_end": 268,
          "parameters_count": 1,
          "complexity_score": 0.65,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "get_communication_stats",
          "line_start": 330,
          "line_end": 335,
          "parameters_count": 1,
          "complexity_score": 0.45,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "__init__",
          "line_start": 341,
          "line_end": 358,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "MEDIUM",
          "responsibilities": []
        },
        {
          "name": "get_coordination_metrics",
          "line_start": 667,
          "line_end": 694,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "LARGE",
          "responsibilities": []
        }
      ],
      "classes": [
        {
          "name": "AgentPriority",
          "line_start": 27,
          "line_end": 32,
          "methods_count": 0,
          "attributes_count": 4,
          "god_class_score": 0.025,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "AgentStatus",
          "line_start": 35,
          "line_end": 42,
          "methods_count": 0,
          "attributes_count": 6,
          "god_class_score": 0.035,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "ResourceType",
          "line_start": 45,
          "line_end": 51,
          "methods_count": 0,
          "attributes_count": 5,
          "god_class_score": 0.03,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "AgentTask",
          "line_start": 55,
          "line_end": 68,
          "methods_count": 0,
          "attributes_count": 0,
          "god_class_score": 0.065,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "AgentInstance",
          "line_start": 72,
          "line_end": 83,
          "methods_count": 0,
          "attributes_count": 0,
          "god_class_score": 0.055,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "ResourcePool",
          "line_start": 87,
          "line_end": 96,
          "methods_count": 0,
          "attributes_count": 0,
          "god_class_score": 0.045,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "CoordinationMetrics",
          "line_start": 100,
          "line_end": 111,
          "methods_count": 0,
          "attributes_count": 0,
          "god_class_score": 0.055,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "TaskQueue",
          "line_start": 114,
          "line_end": 166,
          "methods_count": 6,
          "attributes_count": 0,
          "god_class_score": 0.66,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "ResourceManager",
          "line_start": 169,
          "line_end": 253,
          "methods_count": 6,
          "attributes_count": 0,
          "god_class_score": 0.8200000000000001,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "CommunicationOptimizer",
          "line_start": 256,
          "line_end": 335,
          "methods_count": 2,
          "attributes_count": 0,
          "god_class_score": 0.5283333333333333,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "AdvancedAgentCoordinator",
          "line_start": 338,
          "line_end": 769,
          "methods_count": 2,
          "attributes_count": 0,
          "god_class_score": 1.0,
          "responsibilities": [],
          "srp_violations": []
        }
      ],
      "smells": {
        "long_methods": [],
        "large_classes": [
          "TaskQueue (line 100)"
        ],
        "parameter_lists": [],
        "duplicate_code": [],
        "dead_code": []
      },
      "strategies": [
        {
          "target": "AgentTask",
          "strategy": "EXTRACT_CLASS",
          "rationale": "La classe `AgentTask` est une simple structure de données (dataclass). Elle peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
          "steps": [
            "Créer un nouveau fichier `orchestrator/app/agents/agent_task.py`.",
            "Déplacer la définition de la classe `AgentTask` vers le nouveau fichier.",
            "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `AgentTask` depuis `orchestrator/app/agents/agent_task.py`."
          ],
          "estimated_effort": "1 heure"
        },
        {
          "target": "AgentInstance",
          "strategy": "EXTRACT_CLASS",
          "rationale": "La classe `AgentInstance` est une simple structure de données (dataclass). Elle peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
          "steps": [
            "Créer un nouveau fichier `orchestrator/app/agents/agent_instance.py`.",
            "Déplacer la définition de la classe `AgentInstance` vers le nouveau fichier.",
            "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `AgentInstance` depuis `orchestrator/app/agents/agent_instance.py`."
          ],
          "estimated_effort": "1 heure"
        },
        {
          "target": "ResourcePool",
          "strategy": "EXTRACT_CLASS",
          "rationale": "La classe `ResourcePool` est une simple structure de données (dataclass). Elle peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
          "steps": [
            "Créer un nouveau fichier `orchestrator/app/agents/resource_pool.py`.",
            "Déplacer la définition de la classe `ResourcePool` vers le nouveau fichier.",
            "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `ResourcePool` depuis `orchestrator/app/agents/resource_pool.py`."
          ],
          "estimated_effort": "1 heure"
        },
        {
          "target": "AgentPriority",
          "strategy": "EXTRACT_CLASS",
          "rationale": "L'énumération `AgentPriority` peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
          "steps": [
            "Créer un nouveau fichier `orchestrator/app/agents/agent_priority.py`.",
            "Déplacer la définition de l'énumération `AgentPriority` vers le nouveau fichier.",
            "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `AgentPriority` depuis `orchestrator/app/agents/agent_priority.py`."
          ],
          "estimated_effort": "30 minutes"
        },
        {
          "target": "AgentStatus",
          "strategy": "EXTRACT_CLASS",
          "rationale": "L'énumération `AgentStatus` peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
          "steps": [
            "Créer un nouveau fichier `orchestrator/app/agents/agent_status.py`.",
            "Déplacer la définition de l'énumération `AgentStatus` vers le nouveau fichier.",
            "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `AgentStatus` depuis `orchestrator/app/agents/agent_status.py`."
          ],
          "estimated_effort": "30 minutes"
        },
        {
          "target": "ResourceType",
          "strategy": "EXTRACT_CLASS",
          "rationale": "L'énumération `ResourceType` peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
          "steps": [
            "Créer un nouveau fichier `orchestrator/app/agents/resource_type.py`.",
            "Déplacer la définition de l'énumération `ResourceType` vers le nouveau fichier.",
            "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `ResourceType` depuis `orchestrator/app/agents/resource_type.py`."
          ],
          "estimated_effort": "30 minutes"
        }
      ],
      "summary": {
        "total_patterns": 3,
        "critical_functions": 7,
        "god_classes": 2,
        "refactoring_urgency": "CRITIQUE",
        "quick_wins": 6
      }
    },
    "orchestrator/app/performance/redis_cluster_manager.py": {
      "agent": "Agent Analyzer Beta - Gemini 2.5",
      "model": "gemini-2.0-flash-exp",
      "file_path": "orchestrator/app/performance/redis_cluster_manager.py",
      "timestamp": "2025-06-18T14:50:10.729266",
      "patterns": [
        {
          "name": "God Class",
          "location": "45-150",
          "type": "ANTI_PATTERN",
          "severity": "HIGH",
          "description": "The `RedisClusterManager` class has too many responsibilities, including cluster management, cache configuration, monitoring, and warmup.  It violates the Single Responsibility Principle."
        },
        {
          "name": "Large Class",
          "location": "45-150",
          "type": "ANTI_PATTERN",
          "severity": "MEDIUM",
          "description": "The `RedisClusterManager` class has a large number of attributes and methods, indicating it might be doing too much.  It could benefit from being broken down into smaller, more focused classes."
        },
        {
          "name": "Long Method",
          "location": "78-110",
          "type": "ANTI_PATTERN",
          "severity": "MEDIUM",
          "description": "The `_initialize_config` method is responsible for parsing cluster nodes and cache layer configurations. This method is doing too much and should be broken down into smaller, more focused methods."
        },
        {
          "name": "Data Class",
          "location": "30-43",
          "type": "PATTERN",
          "severity": "LOW",
          "description": "The `ClusterNode` class primarily holds data.  While not inherently bad, it's worth noting as a potential area for future refactoring if behavior is added."
        },
        {
          "name": "Data Class",
          "location": "45-60",
          "type": "PATTERN",
          "severity": "LOW",
          "description": "The `CacheMetrics` class primarily holds data.  While not inherently bad, it's worth noting as a potential area for future refactoring if behavior is added."
        },
        {
          "name": "Data Class",
          "location": "62-70",
          "type": "PATTERN",
          "severity": "LOW",
          "description": "The `WarmupConfig` class primarily holds data.  While not inherently bad, it's worth noting as a potential area for future refactoring if behavior is added."
        }
      ],
      "functions": [
        {
          "name": "get_redis_cluster_manager",
          "line_start": 725,
          "line_end": 727,
          "parameters_count": 0,
          "complexity_score": 0.1,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "__init__",
          "line_start": 87,
          "line_end": 103,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "MEDIUM",
          "responsibilities": []
        },
        {
          "name": "_initialize_config",
          "line_start": 105,
          "line_end": 151,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "LARGE",
          "responsibilities": []
        }
      ],
      "classes": [
        {
          "name": "CacheStrategy",
          "line_start": 28,
          "line_end": 33,
          "methods_count": 0,
          "attributes_count": 4,
          "god_class_score": 0.025,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "CacheLayer",
          "line_start": 36,
          "line_end": 40,
          "methods_count": 0,
          "attributes_count": 3,
          "god_class_score": 0.02,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "ClusterNode",
          "line_start": 44,
          "line_end": 52,
          "methods_count": 0,
          "attributes_count": 0,
          "god_class_score": 0.04,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "CacheMetrics",
          "line_start": 56,
          "line_end": 70,
          "methods_count": 0,
          "attributes_count": 0,
          "god_class_score": 0.07,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "WarmupConfig",
          "line_start": 74,
          "line_end": 81,
          "methods_count": 0,
          "attributes_count": 0,
          "god_class_score": 0.035,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "RedisClusterManager",
          "line_start": 84,
          "line_end": 719,
          "methods_count": 2,
          "attributes_count": 0,
          "god_class_score": 1.0,
          "responsibilities": [],
          "srp_violations": []
        }
      ],
      "smells": {
        "long_methods": [
          "_initialize_config (line 100)"
        ],
        "large_classes": [
          "RedisClusterManager (line 78)"
        ],
        "parameter_lists": [],
        "duplicate_code": [],
        "dead_code": []
      },
      "strategies": [
        {
          "target": "RedisClusterManager",
          "strategy": "EXTRACT_CLASS",
          "rationale": "La classe `RedisClusterManager` semble être une 'god class' avec de nombreuses responsabilités. Extraire la logique de gestion de la configuration du cluster dans une classe séparée améliore la séparation des préoccupations et la testabilité.",
          "steps": [
            "Créer une nouvelle classe `RedisClusterConfigManager`.",
            "Déplacer les attributs liés à la configuration du cluster (par exemple, `cluster_nodes`) de `RedisClusterManager` vers `RedisClusterConfigManager`.",
            "Déplacer la logique d'initialisation et de gestion de la configuration du cluster de `RedisClusterManager.__init__` vers `RedisClusterConfigManager`.",
            "Mettre à jour `RedisClusterManager` pour utiliser une instance de `RedisClusterConfigManager`."
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "RedisClusterManager.__init__",
          "strategy": "EXTRACT_METHOD",
          "rationale": "La méthode `__init__` est probablement longue et complexe. Extraire la logique d'initialisation de la connexion Redis dans une méthode séparée améliore la lisibilité et la testabilité.",
          "steps": [
            "Créer une nouvelle méthode `_initialize_redis_connection` dans `RedisClusterManager`.",
            "Déplacer la logique de connexion Redis de `__init__` vers `_initialize_redis_connection`.",
            "Appeler `_initialize_redis_connection` depuis `__init__`."
          ],
          "estimated_effort": "1-2 heures"
        },
        {
          "target": "CacheMetrics",
          "strategy": "MOVE_METHOD",
          "rationale": "La classe `CacheMetrics` est une structure de données simple. Déplacer la logique de calcul des métriques de performance du cache vers une classe utilitaire dédiée améliore la séparation des préoccupations.",
          "steps": [
            "Créer une nouvelle classe `CacheMetricsCalculator`.",
            "Déplacer la logique de calcul des métriques de performance du cache de `RedisClusterManager` vers `CacheMetricsCalculator`.",
            "Mettre à jour `RedisClusterManager` pour utiliser `CacheMetricsCalculator` pour calculer les métriques."
          ],
          "estimated_effort": "2-4 heures"
        }
      ],
      "summary": {
        "total_patterns": 6,
        "critical_functions": 2,
        "god_classes": 1,
        "refactoring_urgency": "ÉLEVÉE",
        "quick_wins": 2
      }
    },
    "orchestrator/app/observability/monitoring.py": {
      "agent": "Agent Analyzer Beta - Gemini 2.5",
      "model": "gemini-2.0-flash-exp",
      "file_path": "orchestrator/app/observability/monitoring.py",
      "timestamp": "2025-06-18T14:50:20.167805",
      "patterns": [
        {
          "name": "God Class",
          "location": "line 45-150",
          "type": "ANTI_PATTERN",
          "severity": "HIGH",
          "description": "La classe `ProductionMonitoring` semble assumer trop de responsabilités. Elle gère l'initialisation des métriques core et business, les règles d'alerte, les health checks, le tracking SLA et la configuration d'alerting.  Cela viole le principe de responsabilité unique."
        },
        {
          "name": "Long Method",
          "location": "line 67-75",
          "type": "ANTI_PATTERN",
          "severity": "MEDIUM",
          "description": "La méthode `__init__` de la classe `ProductionMonitoring` est assez longue et effectue plusieurs opérations : initialisation des attributs, gestion de la disponibilité de Prometheus, initialisation des métriques core et business, et initialisation des règles d'alerte.  Cela rend la méthode difficile à lire et à maintenir. Il serait préférable de la diviser en méthodes plus petites et plus spécialisées."
        },
        {
          "name": "Large Class",
          "location": "line 45-150",
          "type": "ANTI_PATTERN",
          "severity": "MEDIUM",
          "description": "La classe `ProductionMonitoring` a un grand nombre d'attributs et de méthodes, ce qui la rend difficile à comprendre et à maintenir.  Elle pourrait bénéficier d'une refactorisation en plusieurs classes plus petites et plus spécialisées."
        },
        {
          "name": "Data Class",
          "location": "line 25-33",
          "type": "PATTERN",
          "severity": "LOW",
          "description": "La classe `CustomMetric` est principalement une classe de données (dataclass) qui stocke des informations sur une métrique. Elle a peu de logique métier en dehors de l'initialisation des buckets par défaut."
        },
        {
          "name": "Data Class",
          "location": "line 36-43",
          "type": "PATTERN",
          "severity": "LOW",
          "description": "La classe `AlertRule` est principalement une classe de données (dataclass) qui stocke des informations sur une règle d'alerte."
        }
      ],
      "functions": [
        {
          "name": "get_monitoring",
          "line_start": 659,
          "line_end": 666,
          "parameters_count": 0,
          "complexity_score": 0.35,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "track_request_metrics",
          "line_start": 670,
          "line_end": 704,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "LARGE",
          "responsibilities": [
            "HTTP handling"
          ]
        },
        {
          "name": "__post_init__",
          "line_start": 51,
          "line_end": 54,
          "parameters_count": 1,
          "complexity_score": 0.35,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "__init__",
          "line_start": 81,
          "line_end": 100,
          "parameters_count": 2,
          "complexity_score": 1.0,
          "size_category": "MEDIUM",
          "responsibilities": [
            "Logging"
          ]
        },
        {
          "name": "_init_core_metrics",
          "line_start": 102,
          "line_end": 169,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "HUGE",
          "responsibilities": [
            "HTTP handling"
          ]
        },
        {
          "name": "_init_business_metrics",
          "line_start": 171,
          "line_end": 215,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "LARGE",
          "responsibilities": []
        },
        {
          "name": "_create_metric",
          "line_start": 217,
          "line_end": 258,
          "parameters_count": 2,
          "complexity_score": 1.0,
          "size_category": "LARGE",
          "responsibilities": [
            "Logging"
          ]
        },
        {
          "name": "_init_alert_rules",
          "line_start": 260,
          "line_end": 338,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "HUGE",
          "responsibilities": [
            "HTTP handling",
            "Logging"
          ]
        },
        {
          "name": "increment_counter",
          "line_start": 340,
          "line_end": 349,
          "parameters_count": 4,
          "complexity_score": 1.0,
          "size_category": "SMALL",
          "responsibilities": [
            "Logging"
          ]
        },
        {
          "name": "set_gauge",
          "line_start": 351,
          "line_end": 360,
          "parameters_count": 4,
          "complexity_score": 1.0,
          "size_category": "SMALL",
          "responsibilities": [
            "Logging"
          ]
        },
        {
          "name": "observe_histogram",
          "line_start": 362,
          "line_end": 371,
          "parameters_count": 4,
          "complexity_score": 1.0,
          "size_category": "SMALL",
          "responsibilities": [
            "Logging"
          ]
        },
        {
          "name": "track_request",
          "line_start": 373,
          "line_end": 396,
          "parameters_count": 6,
          "complexity_score": 1.0,
          "size_category": "MEDIUM",
          "responsibilities": [
            "HTTP handling"
          ]
        },
        {
          "name": "track_llm_request",
          "line_start": 398,
          "line_end": 412,
          "parameters_count": 5,
          "complexity_score": 1.0,
          "size_category": "MEDIUM",
          "responsibilities": [
            "HTTP handling"
          ]
        },
        {
          "name": "track_cache_operation",
          "line_start": 414,
          "line_end": 422,
          "parameters_count": 4,
          "complexity_score": 1.0,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "update_cache_hit_ratio",
          "line_start": 424,
          "line_end": 428,
          "parameters_count": 3,
          "complexity_score": 0.8,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "track_user_session",
          "line_start": 430,
          "line_end": 434,
          "parameters_count": 3,
          "complexity_score": 0.8,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "update_active_sessions",
          "line_start": 436,
          "line_end": 438,
          "parameters_count": 2,
          "complexity_score": 0.5,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "track_security_event",
          "line_start": 440,
          "line_end": 446,
          "parameters_count": 4,
          "complexity_score": 1.0,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "track_user_satisfaction",
          "line_start": 448,
          "line_end": 453,
          "parameters_count": 4,
          "complexity_score": 1.0,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "update_memory_usage",
          "line_start": 455,
          "line_end": 459,
          "parameters_count": 3,
          "complexity_score": 0.8,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "update_api_quota_usage",
          "line_start": 461,
          "line_end": 466,
          "parameters_count": 4,
          "complexity_score": 1.0,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "add_health_check",
          "line_start": 468,
          "line_end": 470,
          "parameters_count": 3,
          "complexity_score": 0.7,
          "size_category": "SMALL",
          "responsibilities": []
        },
        {
          "name": "get_prometheus_metrics",
          "line_start": 521,
          "line_end": 530,
          "parameters_count": 1,
          "complexity_score": 0.65,
          "size_category": "SMALL",
          "responsibilities": [
            "Logging"
          ]
        },
        {
          "name": "generate_alert_rules_yaml",
          "line_start": 532,
          "line_end": 563,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "LARGE",
          "responsibilities": []
        },
        {
          "name": "generate_grafana_dashboard",
          "line_start": 565,
          "line_end": 635,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "HUGE",
          "responsibilities": [
            "HTTP handling"
          ]
        },
        {
          "name": "decorator",
          "line_start": 672,
          "line_end": 703,
          "parameters_count": 1,
          "complexity_score": 1.0,
          "size_category": "LARGE",
          "responsibilities": [
            "HTTP handling"
          ]
        }
      ],
      "classes": [
        {
          "name": "MetricType",
          "line_start": 26,
          "line_end": 31,
          "methods_count": 0,
          "attributes_count": 4,
          "god_class_score": 0.025,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "AlertSeverity",
          "line_start": 34,
          "line_end": 39,
          "methods_count": 0,
          "attributes_count": 4,
          "god_class_score": 0.025,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "CustomMetric",
          "line_start": 43,
          "line_end": 54,
          "methods_count": 1,
          "attributes_count": 0,
          "god_class_score": 0.12166666666666667,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "AlertRule",
          "line_start": 58,
          "line_end": 68,
          "methods_count": 0,
          "attributes_count": 0,
          "god_class_score": 0.05,
          "responsibilities": [],
          "srp_violations": []
        },
        {
          "name": "ProductionMonitoring",
          "line_start": 71,
          "line_end": 652,
          "methods_count": 22,
          "attributes_count": 0,
          "god_class_score": 1.0,
          "responsibilities": [],
          "srp_violations": [
            "Too many methods (>10)"
          ]
        }
      ],
      "smells": {
        "long_methods": [
          "_init_core_metrics (line 95)",
          "_init_business_metrics (line 96)",
          "_init_alert_rules (line 97)"
        ],
        "large_classes": [
          "ProductionMonitoring (line 69)"
        ],
        "parameter_lists": [],
        "duplicate_code": [],
        "dead_code": []
      },
      "strategies": [
        {
          "target": "track_request_metrics",
          "strategy": "EXTRACT_METHOD",
          "rationale": "Fonction large (34 lignes)",
          "steps": [
            "Identifier les blocs logiques",
            "Extraire en méthodes privées",
            "Tester après extraction"
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "_init_core_metrics",
          "strategy": "EXTRACT_METHOD",
          "rationale": "Fonction huge (67 lignes)",
          "steps": [
            "Identifier les blocs logiques",
            "Extraire en méthodes privées",
            "Tester après extraction"
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "_init_business_metrics",
          "strategy": "EXTRACT_METHOD",
          "rationale": "Fonction large (44 lignes)",
          "steps": [
            "Identifier les blocs logiques",
            "Extraire en méthodes privées",
            "Tester après extraction"
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "_create_metric",
          "strategy": "EXTRACT_METHOD",
          "rationale": "Fonction large (41 lignes)",
          "steps": [
            "Identifier les blocs logiques",
            "Extraire en méthodes privées",
            "Tester après extraction"
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "_init_alert_rules",
          "strategy": "EXTRACT_METHOD",
          "rationale": "Fonction huge (78 lignes)",
          "steps": [
            "Identifier les blocs logiques",
            "Extraire en méthodes privées",
            "Tester après extraction"
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "generate_alert_rules_yaml",
          "strategy": "EXTRACT_METHOD",
          "rationale": "Fonction large (31 lignes)",
          "steps": [
            "Identifier les blocs logiques",
            "Extraire en méthodes privées",
            "Tester après extraction"
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "generate_grafana_dashboard",
          "strategy": "EXTRACT_METHOD",
          "rationale": "Fonction huge (70 lignes)",
          "steps": [
            "Identifier les blocs logiques",
            "Extraire en méthodes privées",
            "Tester après extraction"
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "decorator",
          "strategy": "EXTRACT_METHOD",
          "rationale": "Fonction large (31 lignes)",
          "steps": [
            "Identifier les blocs logiques",
            "Extraire en méthodes privées",
            "Tester après extraction"
          ],
          "estimated_effort": "2-4 heures"
        },
        {
          "target": "ProductionMonitoring",
          "strategy": "EXTRACT_CLASS",
          "rationale": "God class (22 méthodes)",
          "steps": [
            "Grouper méthodes par responsabilité",
            "Extraire classes spécialisées",
            "Refactorer les dépendances"
          ],
          "estimated_effort": "8-16 heures"
        }
      ],
      "summary": {
        "total_patterns": 5,
        "critical_functions": 18,
        "god_classes": 1,
        "refactoring_urgency": "CRITIQUE",
        "quick_wins": 9
      }
    }
  },
  "consolidated_analysis": {
    "timestamp": "2025-06-18T14:50:20.168804",
    "agents": {
      "alpha": "Claude Sonnet 4",
      "beta": "Gemini 2.5"
    },
    "files_analyzed": 4,
    "cross_analysis": {
      "orchestrator/app/main.py": {
        "file_path": "orchestrator/app/main.py",
        "alpha_insights": {
          "complexity_level": "TRÈS ÉLEVÉE",
          "god_class_score": 1.0,
          "recommendations_count": 1
        },
        "beta_insights": {
          "refactoring_urgency": "FAIBLE",
          "critical_functions": 2,
          "quick_wins": 1
        },
        "consensus": {
          "priority": "CRITIQUE",
          "confidence": "HIGH",
          "effort_estimate": "8-20 heures (1 sprint)",
          "quick_wins_available": true,
          "action_recommended": true
        }
      },
      "orchestrator/app/agents/advanced_coordination.py": {
        "file_path": "orchestrator/app/agents/advanced_coordination.py",
        "alpha_insights": {
          "complexity_level": "TRÈS ÉLEVÉE",
          "god_class_score": 0.624,
          "recommendations_count": 1
        },
        "beta_insights": {
          "refactoring_urgency": "CRITIQUE",
          "critical_functions": 7,
          "quick_wins": 6
        },
        "consensus": {
          "priority": "CRITIQUE",
          "confidence": "HIGH",
          "effort_estimate": "2-8 heures (quelques jours)",
          "quick_wins_available": true,
          "action_recommended": true
        }
      },
      "orchestrator/app/performance/redis_cluster_manager.py": {
        "file_path": "orchestrator/app/performance/redis_cluster_manager.py",
        "alpha_insights": {
          "complexity_level": "TRÈS ÉLEVÉE",
          "god_class_score": 0.591,
          "recommendations_count": 1
        },
        "beta_insights": {
          "refactoring_urgency": "ÉLEVÉE",
          "critical_functions": 2,
          "quick_wins": 2
        },
        "consensus": {
          "priority": "CRITIQUE",
          "confidence": "HIGH",
          "effort_estimate": "2-8 heures (quelques jours)",
          "quick_wins_available": true,
          "action_recommended": true
        }
      },
      "orchestrator/app/observability/monitoring.py": {
        "file_path": "orchestrator/app/observability/monitoring.py",
        "alpha_insights": {
          "complexity_level": "TRÈS ÉLEVÉE",
          "god_class_score": 0.625,
          "recommendations_count": 1
        },
        "beta_insights": {
          "refactoring_urgency": "CRITIQUE",
          "critical_functions": 18,
          "quick_wins": 9
        },
        "consensus": {
          "priority": "CRITIQUE",
          "confidence": "HIGH",
          "effort_estimate": "2-8 heures (quelques jours)",
          "quick_wins_available": true,
          "action_recommended": true
        }
      }
    }
  },
  "recommendations": [
    {
      "file": "orchestrator/app/main.py",
      "priority": "CRITIQUE",
      "confidence": "HIGH",
      "action": "REFACTOR_IMMEDIATE",
      "rationale": "Consensus Claude Sonnet 4 + Gemini 2.5: CRITIQUE",
      "effort": "8-20 heures (1 sprint)",
      "quick_wins": true,
      "next_phase": "PHASE_2_EXTRACTION"
    },
    {
      "file": "orchestrator/app/agents/advanced_coordination.py",
      "priority": "CRITIQUE",
      "confidence": "HIGH",
      "action": "REFACTOR_IMMEDIATE",
      "rationale": "Consensus Claude Sonnet 4 + Gemini 2.5: CRITIQUE",
      "effort": "2-8 heures (quelques jours)",
      "quick_wins": true,
      "next_phase": "PHASE_2_EXTRACTION"
    },
    {
      "file": "orchestrator/app/performance/redis_cluster_manager.py",
      "priority": "CRITIQUE",
      "confidence": "HIGH",
      "action": "REFACTOR_IMMEDIATE",
      "rationale": "Consensus Claude Sonnet 4 + Gemini 2.5: CRITIQUE",
      "effort": "2-8 heures (quelques jours)",
      "quick_wins": true,
      "next_phase": "PHASE_2_EXTRACTION"
    },
    {
      "file": "orchestrator/app/observability/monitoring.py",
      "priority": "CRITIQUE",
      "confidence": "HIGH",
      "action": "REFACTOR_IMMEDIATE",
      "rationale": "Consensus Claude Sonnet 4 + Gemini 2.5: CRITIQUE",
      "effort": "2-8 heures (quelques jours)",
      "quick_wins": true,
      "next_phase": "PHASE_2_EXTRACTION"
    }
  ],
  "next_steps": [
    "🚨 URGENT: 4 fichier(s) critique(s)",
    "⚡ Démarrer Phase 2 immédiatement",
    "🎯 4 quick win(s) identifié(s)",
    "⚡ Commencer par les extractions simples",
    "📊 Préparer backlog Phase 2",
    "🧪 Configurer tests de régression"
  ]
}
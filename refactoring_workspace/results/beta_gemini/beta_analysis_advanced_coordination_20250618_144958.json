{
  "agent": "Agent Analyzer Beta - Gemini 2.5",
  "model": "gemini-2.0-flash-exp",
  "file_path": "orchestrator/app/agents/advanced_coordination.py",
  "timestamp": "2025-06-18T14:49:58.236268",
  "patterns": [
    {
      "name": "God Class",
      "location": "orchestrator/app/agents/advanced_coordination.py",
      "type": "ANTI_PATTERN",
      "severity": "HIGH",
      "description": "The `TaskQueue` class and the collection of dataclasses (AgentTask, AgentInstance, ResourcePool, CoordinationMetrics) collectively exhibit characteristics of a God Class.  The dataclasses represent a large amount of data and state related to agent coordination. The `TaskQueue` class manages task prioritization, dependencies, and execution, centralizing core logic.  This concentration of responsibilities makes the system harder to understand, maintain, and test."
    },
    {
      "name": "Large Class",
      "location": "orchestrator/app/agents/advanced_coordination.py",
      "type": "ANTI_PATTERN",
      "severity": "MEDIUM",
      "description": "The `TaskQueue` class, while not excessively long in terms of lines of code, manages a significant amount of state and logic related to task management. This suggests it might be doing too much and could benefit from being broken down into smaller, more focused classes."
    },
    {
      "name": "Data Class",
      "location": "orchestrator/app/agents/advanced_coordination.py",
      "type": "PATTERN",
      "severity": "INFO",
      "description": "The `AgentTask`, `AgentInstance`, `ResourcePool`, and `CoordinationMetrics` classes are primarily data containers (dataclasses). This is acceptable as long as they don't accumulate excessive logic."
    }
  ],
  "functions": [
    {
      "name": "get_advanced_coordination",
      "line_start": 776,
      "line_end": 778,
      "parameters_count": 0,
      "complexity_score": 0.1,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "__init__",
      "line_start": 117,
      "line_end": 121,
      "parameters_count": 1,
      "complexity_score": 0.4,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "add_task",
      "line_start": 123,
      "line_end": 133,
      "parameters_count": 2,
      "complexity_score": 0.9,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "get_next_task",
      "line_start": 135,
      "line_end": 141,
      "parameters_count": 1,
      "complexity_score": 0.5,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "mark_completed",
      "line_start": 143,
      "line_end": 152,
      "parameters_count": 2,
      "complexity_score": 0.8500000000000001,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "_can_execute",
      "line_start": 154,
      "line_end": 156,
      "parameters_count": 2,
      "complexity_score": 0.5,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "get_queue_stats",
      "line_start": 158,
      "line_end": 166,
      "parameters_count": 1,
      "complexity_score": 0.6000000000000001,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "__init__",
      "line_start": 172,
      "line_end": 184,
      "parameters_count": 1,
      "complexity_score": 0.8,
      "size_category": "MEDIUM",
      "responsibilities": [
        "Database access"
      ]
    },
    {
      "name": "can_allocate",
      "line_start": 186,
      "line_end": 198,
      "parameters_count": 3,
      "complexity_score": 1.0,
      "size_category": "MEDIUM",
      "responsibilities": [
        "Database access"
      ]
    },
    {
      "name": "allocate_resources",
      "line_start": 200,
      "line_end": 219,
      "parameters_count": 3,
      "complexity_score": 1.0,
      "size_category": "MEDIUM",
      "responsibilities": [
        "Database access",
        "Logging"
      ]
    },
    {
      "name": "deallocate_resources",
      "line_start": 221,
      "line_end": 240,
      "parameters_count": 2,
      "complexity_score": 1.0,
      "size_category": "MEDIUM",
      "responsibilities": [
        "Database access",
        "Logging"
      ]
    },
    {
      "name": "get_utilization",
      "line_start": 242,
      "line_end": 249,
      "parameters_count": 1,
      "complexity_score": 0.55,
      "size_category": "SMALL",
      "responsibilities": [
        "Database access"
      ]
    },
    {
      "name": "refresh_llm_tokens",
      "line_start": 251,
      "line_end": 253,
      "parameters_count": 1,
      "complexity_score": 0.30000000000000004,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "__init__",
      "line_start": 259,
      "line_end": 268,
      "parameters_count": 1,
      "complexity_score": 0.65,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "get_communication_stats",
      "line_start": 330,
      "line_end": 335,
      "parameters_count": 1,
      "complexity_score": 0.45,
      "size_category": "SMALL",
      "responsibilities": []
    },
    {
      "name": "__init__",
      "line_start": 341,
      "line_end": 358,
      "parameters_count": 1,
      "complexity_score": 1.0,
      "size_category": "MEDIUM",
      "responsibilities": []
    },
    {
      "name": "get_coordination_metrics",
      "line_start": 667,
      "line_end": 694,
      "parameters_count": 1,
      "complexity_score": 1.0,
      "size_category": "LARGE",
      "responsibilities": []
    }
  ],
  "classes": [
    {
      "name": "AgentPriority",
      "line_start": 27,
      "line_end": 32,
      "methods_count": 0,
      "attributes_count": 4,
      "god_class_score": 0.025,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "AgentStatus",
      "line_start": 35,
      "line_end": 42,
      "methods_count": 0,
      "attributes_count": 6,
      "god_class_score": 0.035,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "ResourceType",
      "line_start": 45,
      "line_end": 51,
      "methods_count": 0,
      "attributes_count": 5,
      "god_class_score": 0.03,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "AgentTask",
      "line_start": 55,
      "line_end": 68,
      "methods_count": 0,
      "attributes_count": 0,
      "god_class_score": 0.065,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "AgentInstance",
      "line_start": 72,
      "line_end": 83,
      "methods_count": 0,
      "attributes_count": 0,
      "god_class_score": 0.055,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "ResourcePool",
      "line_start": 87,
      "line_end": 96,
      "methods_count": 0,
      "attributes_count": 0,
      "god_class_score": 0.045,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "CoordinationMetrics",
      "line_start": 100,
      "line_end": 111,
      "methods_count": 0,
      "attributes_count": 0,
      "god_class_score": 0.055,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "TaskQueue",
      "line_start": 114,
      "line_end": 166,
      "methods_count": 6,
      "attributes_count": 0,
      "god_class_score": 0.66,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "ResourceManager",
      "line_start": 169,
      "line_end": 253,
      "methods_count": 6,
      "attributes_count": 0,
      "god_class_score": 0.8200000000000001,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "CommunicationOptimizer",
      "line_start": 256,
      "line_end": 335,
      "methods_count": 2,
      "attributes_count": 0,
      "god_class_score": 0.5283333333333333,
      "responsibilities": [],
      "srp_violations": []
    },
    {
      "name": "AdvancedAgentCoordinator",
      "line_start": 338,
      "line_end": 769,
      "methods_count": 2,
      "attributes_count": 0,
      "god_class_score": 1.0,
      "responsibilities": [],
      "srp_violations": []
    }
  ],
  "smells": {
    "long_methods": [],
    "large_classes": [
      "TaskQueue (line 100)"
    ],
    "parameter_lists": [],
    "duplicate_code": [],
    "dead_code": []
  },
  "strategies": [
    {
      "target": "AgentTask",
      "strategy": "EXTRACT_CLASS",
      "rationale": "La classe `AgentTask` est une simple structure de données (dataclass). Elle peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
      "steps": [
        "Créer un nouveau fichier `orchestrator/app/agents/agent_task.py`.",
        "Déplacer la définition de la classe `AgentTask` vers le nouveau fichier.",
        "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `AgentTask` depuis `orchestrator/app/agents/agent_task.py`."
      ],
      "estimated_effort": "1 heure"
    },
    {
      "target": "AgentInstance",
      "strategy": "EXTRACT_CLASS",
      "rationale": "La classe `AgentInstance` est une simple structure de données (dataclass). Elle peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
      "steps": [
        "Créer un nouveau fichier `orchestrator/app/agents/agent_instance.py`.",
        "Déplacer la définition de la classe `AgentInstance` vers le nouveau fichier.",
        "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `AgentInstance` depuis `orchestrator/app/agents/agent_instance.py`."
      ],
      "estimated_effort": "1 heure"
    },
    {
      "target": "ResourcePool",
      "strategy": "EXTRACT_CLASS",
      "rationale": "La classe `ResourcePool` est une simple structure de données (dataclass). Elle peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
      "steps": [
        "Créer un nouveau fichier `orchestrator/app/agents/resource_pool.py`.",
        "Déplacer la définition de la classe `ResourcePool` vers le nouveau fichier.",
        "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `ResourcePool` depuis `orchestrator/app/agents/resource_pool.py`."
      ],
      "estimated_effort": "1 heure"
    },
    {
      "target": "AgentPriority",
      "strategy": "EXTRACT_CLASS",
      "rationale": "L'énumération `AgentPriority` peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
      "steps": [
        "Créer un nouveau fichier `orchestrator/app/agents/agent_priority.py`.",
        "Déplacer la définition de l'énumération `AgentPriority` vers le nouveau fichier.",
        "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `AgentPriority` depuis `orchestrator/app/agents/agent_priority.py`."
      ],
      "estimated_effort": "30 minutes"
    },
    {
      "target": "AgentStatus",
      "strategy": "EXTRACT_CLASS",
      "rationale": "L'énumération `AgentStatus` peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
      "steps": [
        "Créer un nouveau fichier `orchestrator/app/agents/agent_status.py`.",
        "Déplacer la définition de l'énumération `AgentStatus` vers le nouveau fichier.",
        "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `AgentStatus` depuis `orchestrator/app/agents/agent_status.py`."
      ],
      "estimated_effort": "30 minutes"
    },
    {
      "target": "ResourceType",
      "strategy": "EXTRACT_CLASS",
      "rationale": "L'énumération `ResourceType` peut être extraite dans un fichier séparé pour améliorer la lisibilité et la modularité du code.",
      "steps": [
        "Créer un nouveau fichier `orchestrator/app/agents/resource_type.py`.",
        "Déplacer la définition de l'énumération `ResourceType` vers le nouveau fichier.",
        "Dans `orchestrator/app/agents/advanced_coordination.py`, importer `ResourceType` depuis `orchestrator/app/agents/resource_type.py`."
      ],
      "estimated_effort": "30 minutes"
    }
  ],
  "summary": {
    "total_patterns": 3,
    "critical_functions": 7,
    "god_classes": 2,
    "refactoring_urgency": "CRITIQUE",
    "quick_wins": 6
  }
}
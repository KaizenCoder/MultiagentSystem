#!/usr/bin/env python3
"""
Script de d√©marrage simple pour l'orchestrateur (mode d√©veloppement)
Alternative au Docker Compose pour tests rapides
"""

import os
import sys
import subprocess
import signal
import time
from pathlib import Path

# Configuration
ORCHESTRATOR_PORT = 8003
ORCHESTRATOR_DIR = Path(__file__).parent / "orchestrator"

def check_dependencies():
    """V√©rifier que les d√©pendances sont install√©es"""
    try:
        import fastapi
        import uvicorn
        import langchain
        print("‚úÖ D√©pendances FastAPI install√©es")
        return True
    except ImportError as e:
        print(f"‚ùå D√©pendances manquantes: {e}")
        return False

def start_orchestrator():
    """D√©marrer l'orchestrateur en mode d√©veloppement"""
    print("üöÄ D√©marrage de l'orchestrateur...")
    print(f"üìç Port: {ORCHESTRATOR_PORT}")
    print(f"üìÅ R√©pertoire: {ORCHESTRATOR_DIR}")
    print("‚èπÔ∏è  Utilisez Ctrl+C pour arr√™ter")
    print("-" * 50)
    
    try:
        # Changer vers le r√©pertoire orchestrator
        os.chdir(ORCHESTRATOR_DIR)
        
        # Configurer PYTHONPATH pour inclure le r√©pertoire parent
        env = os.environ.copy()
        project_root = str(Path(__file__).parent)
        env['PYTHONPATH'] = project_root + os.pathsep + env.get('PYTHONPATH', '')
        
        # D√©marrer uvicorn
        cmd = [
            sys.executable, "-m", "uvicorn", 
            "app.main:app",
            "--host", "0.0.0.0",
            "--port", str(ORCHESTRATOR_PORT),
            "--reload",
            "--log-level", "info"
        ]        
        process = subprocess.Popen(cmd, env=env)
        
        # Attendre et g√©rer l'arr√™t
        try:
            process.wait()
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Arr√™t de l'orchestrateur...")
            process.terminate()
            process.wait()
            print("‚úÖ Orchestrateur arr√™t√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        return False
    
    return True

def main():
    """Fonction principale"""
    print("üéõÔ∏è  D√âMARRAGE ORCHESTRATEUR - MODE D√âVELOPPEMENT")
    print("=" * 60)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        print("\nüí° Installez les d√©pendances avec:")
        print("   cd orchestrator && pip install -r requirements.txt")
        return False
    
    # V√©rifier le fichier .env
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå Fichier .env manquant")
        print("üí° Copiez env.example vers .env et configurez vos cl√©s API")
        return False
    
    print("‚úÖ Configuration trouv√©e")
    
    # D√©marrer l'orchestrateur
    return start_orchestrator()

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Arr√™t demand√© par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)
